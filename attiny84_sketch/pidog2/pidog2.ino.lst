
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714/pidog2.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	2d c0       	rjmp	.+90     	; 0x5c <__ctors_end>
       2:	51 c0       	rjmp	.+162    	; 0xa6 <__bad_interrupt>
       4:	50 c0       	rjmp	.+160    	; 0xa6 <__bad_interrupt>
       6:	2f c6       	rjmp	.+3166   	; 0xc66 <__vector_3>
       8:	74 c6       	rjmp	.+3304   	; 0xcf2 <__vector_4>
       a:	4d c0       	rjmp	.+154    	; 0xa6 <__bad_interrupt>
       c:	4c c0       	rjmp	.+152    	; 0xa6 <__bad_interrupt>
       e:	4b c0       	rjmp	.+150    	; 0xa6 <__bad_interrupt>
      10:	4a c0       	rjmp	.+148    	; 0xa6 <__bad_interrupt>
      12:	49 c0       	rjmp	.+146    	; 0xa6 <__bad_interrupt>
      14:	48 c0       	rjmp	.+144    	; 0xa6 <__bad_interrupt>
      16:	6e c5       	rjmp	.+2780   	; 0xaf4 <__vector_11>
      18:	46 c0       	rjmp	.+140    	; 0xa6 <__bad_interrupt>
      1a:	45 c0       	rjmp	.+138    	; 0xa6 <__bad_interrupt>
      1c:	44 c0       	rjmp	.+136    	; 0xa6 <__bad_interrupt>
      1e:	43 c0       	rjmp	.+134    	; 0xa6 <__bad_interrupt>
      20:	b3 c5       	rjmp	.+2918   	; 0xb88 <__vector_16>

00000022 <__trampolines_end>:
__trampolines_start():
      22:	00 00       	nop
      24:	3a 00       	.word	0x003a	; ????
      26:	37 00       	.word	0x0037	; ????

00000028 <port_to_output_PGM>:
      28:	00 00 3b 00 38 00                                   ..;.8.

0000002e <digital_pin_to_timer_PGM>:
      2e:	00 00 01 02 03 04 00 00 00 00 00 00 00              .............

0000003b <port_to_input_PGM>:
      3b:	00 00 39 00 36 00                                   ..9.6.

00000041 <digital_pin_to_port_PGM>:
      41:	02 02 02 01 01 01 01 01 01 01 01 02                 ............

0000004d <digital_pin_to_bit_mask_PGM>:
      4d:	01 02 04 80 40 20 10 08 04 02 01 08 00              ....@ .......

0000005a <__ctors_start>:
__ctors_start():
      5a:	c4 07       	cpc	r28, r20

0000005c <__ctors_end>:
__dtors_end():
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf e5       	ldi	r28, 0x5F	; 95
      62:	d2 e0       	ldi	r29, 0x02	; 2
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
      68:	21 e0       	ldi	r18, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
      6a:	a4 ec       	ldi	r26, 0xC4	; 196
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
      6c:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
      6e:	01 c0       	rjmp	.+2      	; 0x72 <.do_clear_bss_start>

00000070 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
      70:	1d 92       	st	X+, r1

00000072 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
      72:	ab 34       	cpi	r26, 0x4B	; 75
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
      74:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
      76:	e1 f7       	brne	.-8      	; 0x70 <.do_clear_bss_loop>

00000078 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
      78:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
      7a:	a0 e6       	ldi	r26, 0x60	; 96
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
      7c:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
      7e:	e6 e8       	ldi	r30, 0x86	; 134
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
      80:	f0 e1       	ldi	r31, 0x10	; 16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
      82:	02 c0       	rjmp	.+4      	; 0x88 <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
      84:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
      86:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
      88:	a4 3c       	cpi	r26, 0xC4	; 196
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
      8a:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
      8c:	d9 f7       	brne	.-10     	; 0x84 <__do_copy_data+0xc>

0000008e <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
      8e:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
      90:	ce e2       	ldi	r28, 0x2E	; 46
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
      92:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
      94:	03 c0       	rjmp	.+6      	; 0x9c <__do_global_ctors+0xe>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
      96:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
      98:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
      9a:	ed d7       	rcall	.+4058   	; 0x1076 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
      9c:	cd 32       	cpi	r28, 0x2D	; 45
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
      9e:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
      a0:	d1 f7       	brne	.-12     	; 0x96 <__do_global_ctors+0x8>
      a2:	4c d6       	rcall	.+3224   	; 0xd3c <main>
      a4:	ee c7       	rjmp	.+4060   	; 0x1082 <_exit>

000000a6 <__bad_interrupt>:
__vector_1():
      a6:	1b c6       	rjmp	.+3126   	; 0xcde <__vector_default>

000000a8 <digitalRead.constprop.0>:
digitalRead.constprop.0():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:168

int digitalRead(uint8_t pin)
{
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
  //uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
      a8:	ed e4       	ldi	r30, 0x4D	; 77
      aa:	f0 e0       	ldi	r31, 0x00	; 0
      ac:	84 91       	lpm	r24, Z
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:169
  uint8_t port = digitalPinToPort(pin);
      ae:	e1 e4       	ldi	r30, 0x41	; 65
      b0:	f0 e0       	ldi	r31, 0x00	; 0
      b2:	e4 91       	lpm	r30, Z
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:171

  if (port == NOT_A_PIN) return LOW;
      b4:	ee 23       	and	r30, r30
      b6:	71 f0       	breq	.+28     	; 0xd4 <digitalRead.constprop.0+0x2c>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:179
  // "read" should *NEVER* change the behavior of the thing you're using it on.
  // That's why it's called "read" not "write". As an added bonus, sets the
  // stage for auto-fast-digitalRead() for compile time known pins.
  // if (timer != NOT_ON_TIMER) turnOffPWM(timer);

  if (*portInputRegister(port) & bit) return HIGH;
      b8:	f0 e0       	ldi	r31, 0x00	; 0
      ba:	ee 0f       	add	r30, r30
      bc:	ff 1f       	adc	r31, r31
      be:	e5 5c       	subi	r30, 0xC5	; 197
      c0:	ff 4f       	sbci	r31, 0xFF	; 255
      c2:	a5 91       	lpm	r26, Z+
      c4:	b4 91       	lpm	r27, Z
      c6:	ec 91       	ld	r30, X
      c8:	e8 23       	and	r30, r24
      ca:	81 e0       	ldi	r24, 0x01	; 1
      cc:	90 e0       	ldi	r25, 0x00	; 0
      ce:	21 f4       	brne	.+8      	; 0xd8 <digitalRead.constprop.0+0x30>
      d0:	80 e0       	ldi	r24, 0x00	; 0
      d2:	08 95       	ret
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:171
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
  //uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
      d4:	80 e0       	ldi	r24, 0x00	; 0
      d6:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:181
  // stage for auto-fast-digitalRead() for compile time known pins.
  // if (timer != NOT_ON_TIMER) turnOffPWM(timer);

  if (*portInputRegister(port) & bit) return HIGH;
  return LOW;
}
      d8:	08 95       	ret

000000da <handleCommand(unsigned char, unsigned long)>:
_Z13handleCommandhm():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:64
typedef regfile_c<reg_t, rf_size> myregfile_c;

myregfile_c rf;
adcReader_c <myregfile_c, 1, 16> adcreader(rf);

reg_t handleCommand(uint8_t cmd, reg_t indata) {
      da:	e8 2f       	mov	r30, r24
      dc:	ef 70       	andi	r30, 0x0F	; 15
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:69
    reg_t odata = 0;
    uint8_t insn = (cmd & 0xc0) >> 6;
    reg_names_t reg = (reg_names_t)(cmd & 0xf);

    if (reg >= rf_size - 1) insn = 0;
      de:	eb 30       	cpi	r30, 0x0B	; 11
      e0:	50 f4       	brcc	.+20     	; 0xf6 <handleCommand(unsigned char, unsigned long)+0x1c>
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:66
myregfile_c rf;
adcReader_c <myregfile_c, 1, 16> adcreader(rf);

reg_t handleCommand(uint8_t cmd, reg_t indata) {
    reg_t odata = 0;
    uint8_t insn = (cmd & 0xc0) >> 6;
      e2:	82 95       	swap	r24
      e4:	86 95       	lsr	r24
      e6:	86 95       	lsr	r24
      e8:	83 70       	andi	r24, 0x03	; 3
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:70
    reg_names_t reg = (reg_names_t)(cmd & 0xf);

    if (reg >= rf_size - 1) insn = 0;
    switch (insn) {
      ea:	82 30       	cpi	r24, 0x02	; 2
      ec:	51 f1       	breq	.+84     	; 0x142 <handleCommand(unsigned char, unsigned long)+0x68>
      ee:	83 30       	cpi	r24, 0x03	; 3
      f0:	c1 f1       	breq	.+112    	; 0x162 <handleCommand(unsigned char, unsigned long)+0x88>
      f2:	81 30       	cpi	r24, 0x01	; 1
      f4:	91 f0       	breq	.+36     	; 0x11a <handleCommand(unsigned char, unsigned long)+0x40>
_ZN9regfile_cImLj12EE3getEh():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:87
            v &= halfmask;
            return v;
        }

        REGW get(uint8_t addr) { 
            return registers[addr % REG_COUNT];
      f6:	8e 2f       	mov	r24, r30
      f8:	6c e0       	ldi	r22, 0x0C	; 12
      fa:	8f d7       	rcall	.+3870   	; 0x101a <__udivmodqi4>
      fc:	e9 2f       	mov	r30, r25
      fe:	f0 e0       	ldi	r31, 0x00	; 0
     100:	ee 0f       	add	r30, r30
     102:	ff 1f       	adc	r31, r31
     104:	ee 0f       	add	r30, r30
     106:	ff 1f       	adc	r31, r31
     108:	e7 5e       	subi	r30, 0xE7	; 231
     10a:	fe 4f       	sbci	r31, 0xFE	; 254
     10c:	40 81       	ld	r20, Z
     10e:	51 81       	ldd	r21, Z+1	; 0x01
     110:	62 81       	ldd	r22, Z+2	; 0x02
     112:	73 81       	ldd	r23, Z+3	; 0x03
_Z13handleCommandhm():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:86
           odata = rf.set(reg, indata);
           break;
    }
    // rf.dump();
    return odata;
};
     114:	cb 01       	movw	r24, r22
     116:	ba 01       	movw	r22, r20
     118:	08 95       	ret
_ZN9regfile_cImLj12EE5setOrEhm():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:91
        }

        REGW setOr(uint8_t addr, REGW val) {
            registers[addr % REG_COUNT] |= val;
     11a:	f0 e0       	ldi	r31, 0x00	; 0
     11c:	ee 0f       	add	r30, r30
     11e:	ff 1f       	adc	r31, r31
     120:	ee 0f       	add	r30, r30
     122:	ff 1f       	adc	r31, r31
     124:	e7 5e       	subi	r30, 0xE7	; 231
     126:	fe 4f       	sbci	r31, 0xFE	; 254
     128:	80 81       	ld	r24, Z
     12a:	91 81       	ldd	r25, Z+1	; 0x01
     12c:	a2 81       	ldd	r26, Z+2	; 0x02
     12e:	b3 81       	ldd	r27, Z+3	; 0x03
     130:	48 2b       	or	r20, r24
     132:	59 2b       	or	r21, r25
     134:	6a 2b       	or	r22, r26
     136:	7b 2b       	or	r23, r27
_ZN9regfile_cImLj12EE3setEhm():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:99
        REGW setAnd(uint8_t addr, REGW val) {
            registers[addr % REG_COUNT] &= val;
            return get(addr);
        }
        REGW set(uint8_t addr, REGW val) {
            registers[addr % REG_COUNT] = val;
     138:	40 83       	st	Z, r20
     13a:	51 83       	std	Z+1, r21	; 0x01
     13c:	62 83       	std	Z+2, r22	; 0x02
     13e:	73 83       	std	Z+3, r23	; 0x03
     140:	e9 cf       	rjmp	.-46     	; 0x114 <handleCommand(unsigned char, unsigned long)+0x3a>
_ZN9regfile_cImLj12EE6setAndEhm():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:95
        REGW setOr(uint8_t addr, REGW val) {
            registers[addr % REG_COUNT] |= val;
            return get(addr);
        }
        REGW setAnd(uint8_t addr, REGW val) {
            registers[addr % REG_COUNT] &= val;
     142:	f0 e0       	ldi	r31, 0x00	; 0
     144:	ee 0f       	add	r30, r30
     146:	ff 1f       	adc	r31, r31
     148:	ee 0f       	add	r30, r30
     14a:	ff 1f       	adc	r31, r31
     14c:	e7 5e       	subi	r30, 0xE7	; 231
     14e:	fe 4f       	sbci	r31, 0xFE	; 254
     150:	80 81       	ld	r24, Z
     152:	91 81       	ldd	r25, Z+1	; 0x01
     154:	a2 81       	ldd	r26, Z+2	; 0x02
     156:	b3 81       	ldd	r27, Z+3	; 0x03
     158:	48 23       	and	r20, r24
     15a:	59 23       	and	r21, r25
     15c:	6a 23       	and	r22, r26
     15e:	7b 23       	and	r23, r27
     160:	eb cf       	rjmp	.-42     	; 0x138 <handleCommand(unsigned char, unsigned long)+0x5e>
_ZN9regfile_cImLj12EE3setEhm():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:99
            return get(addr);
        }
        REGW set(uint8_t addr, REGW val) {
            registers[addr % REG_COUNT] = val;
     162:	f0 e0       	ldi	r31, 0x00	; 0
     164:	ee 0f       	add	r30, r30
     166:	ff 1f       	adc	r31, r31
     168:	ee 0f       	add	r30, r30
     16a:	ff 1f       	adc	r31, r31
     16c:	e7 5e       	subi	r30, 0xE7	; 231
     16e:	fe 4f       	sbci	r31, 0xFE	; 254
     170:	e3 cf       	rjmp	.-58     	; 0x138 <handleCommand(unsigned char, unsigned long)+0x5e>

00000172 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/Print.cpp:34

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     172:	cf 92       	push	r12
     174:	df 92       	push	r13
     176:	ef 92       	push	r14
     178:	ff 92       	push	r15
     17a:	0f 93       	push	r16
     17c:	1f 93       	push	r17
     17e:	cf 93       	push	r28
     180:	df 93       	push	r29
     182:	6c 01       	movw	r12, r24
     184:	eb 01       	movw	r28, r22
     186:	7b 01       	movw	r14, r22
     188:	e4 0e       	add	r14, r20
     18a:	f5 1e       	adc	r15, r21
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/Print.cpp:35
  size_t n = 0;
     18c:	10 e0       	ldi	r17, 0x00	; 0
     18e:	00 e0       	ldi	r16, 0x00	; 0
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/Print.cpp:36
  while (size--) {
     190:	ce 15       	cp	r28, r14
     192:	df 05       	cpc	r29, r15
     194:	61 f0       	breq	.+24     	; 0x1ae <Print::write(unsigned char const*, unsigned int)+0x3c>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/Print.cpp:37
    n += write(*buffer++);
     196:	69 91       	ld	r22, Y+
     198:	d6 01       	movw	r26, r12
     19a:	ed 91       	ld	r30, X+
     19c:	fc 91       	ld	r31, X
     19e:	01 90       	ld	r0, Z+
     1a0:	f0 81       	ld	r31, Z
     1a2:	e0 2d       	mov	r30, r0
     1a4:	c6 01       	movw	r24, r12
     1a6:	09 95       	icall
     1a8:	08 0f       	add	r16, r24
     1aa:	19 1f       	adc	r17, r25
     1ac:	f1 cf       	rjmp	.-30     	; 0x190 <Print::write(unsigned char const*, unsigned int)+0x1e>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/Print.cpp:40
  }
  return n;
}
     1ae:	c8 01       	movw	r24, r16
     1b0:	df 91       	pop	r29
     1b2:	cf 91       	pop	r28
     1b4:	1f 91       	pop	r17
     1b6:	0f 91       	pop	r16
     1b8:	ff 90       	pop	r15
     1ba:	ef 90       	pop	r14
     1bc:	df 90       	pop	r13
     1be:	cf 90       	pop	r12
     1c0:	08 95       	ret

000001c2 <digitalWrite>:
digitalWrite():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:138
}

void digitalWrite(uint8_t pin, uint8_t val)
{
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
  uint8_t timer = digitalPinToTimer(pin);
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	fc 01       	movw	r30, r24
     1c6:	e2 5d       	subi	r30, 0xD2	; 210
     1c8:	ff 4f       	sbci	r31, 0xFF	; 255
     1ca:	34 91       	lpm	r19, Z
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:139
  uint8_t bit = digitalPinToBitMask(pin);
     1cc:	fc 01       	movw	r30, r24
     1ce:	e3 5b       	subi	r30, 0xB3	; 179
     1d0:	ff 4f       	sbci	r31, 0xFF	; 255
     1d2:	24 91       	lpm	r18, Z
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:140
  uint8_t port = digitalPinToPort(pin);
     1d4:	fc 01       	movw	r30, r24
     1d6:	ef 5b       	subi	r30, 0xBF	; 191
     1d8:	ff 4f       	sbci	r31, 0xFF	; 255
     1da:	e4 91       	lpm	r30, Z
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:143
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
     1dc:	ee 23       	and	r30, r30
     1de:	b9 f0       	breq	.+46     	; 0x20e <digitalWrite+0x4c>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:147

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     1e0:	33 23       	and	r19, r19
     1e2:	29 f0       	breq	.+10     	; 0x1ee <digitalWrite+0x2c>
turnOffPWM():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:67
}

static void turnOffPWM(uint8_t timer)
{
  #if defined(TCCR0A) && defined(COM0A1)
  if( timer == TIMER0A){
     1e4:	31 30       	cpi	r19, 0x01	; 1
     1e6:	a1 f4       	brne	.+40     	; 0x210 <digitalWrite+0x4e>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:68
    cbi(TCCR0A, COM0A1);
     1e8:	80 b7       	in	r24, 0x30	; 48
     1ea:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:75
  } else
  #endif

  #if defined(TCCR0A) && defined(COM0B1)
  if( timer == TIMER0B){
    cbi(TCCR0A, COM0B1);
     1ec:	80 bf       	out	0x30, r24	; 48
digitalWrite():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:149

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);

  out = portOutputRegister(port);
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	ee 0f       	add	r30, r30
     1f2:	ff 1f       	adc	r31, r31
     1f4:	e8 5d       	subi	r30, 0xD8	; 216
     1f6:	ff 4f       	sbci	r31, 0xFF	; 255
     1f8:	a5 91       	lpm	r26, Z+
     1fa:	b4 91       	lpm	r27, Z
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:152

  if (val == LOW) {
    uint8_t oldSREG = SREG;
     1fc:	8f b7       	in	r24, 0x3f	; 63
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:151
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);

  out = portOutputRegister(port);

  if (val == LOW) {
     1fe:	61 11       	cpse	r22, r1
     200:	17 c0       	rjmp	.+46     	; 0x230 <digitalWrite+0x6e>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:153
    uint8_t oldSREG = SREG;
    cli();
     202:	f8 94       	cli
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:154
    *out &= ~bit;
     204:	ec 91       	ld	r30, X
     206:	20 95       	com	r18
     208:	2e 23       	and	r18, r30
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:159
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    cli();
    *out |= bit;
     20a:	2c 93       	st	X, r18
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:160
    SREG = oldSREG;
     20c:	8f bf       	out	0x3f, r24	; 63
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:162
  }
}
     20e:	08 95       	ret
turnOffPWM():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:74
    //cbi(TCCR0A, COM0A0);
  } else
  #endif

  #if defined(TCCR0A) && defined(COM0B1)
  if( timer == TIMER0B){
     210:	32 30       	cpi	r19, 0x02	; 2
     212:	19 f4       	brne	.+6      	; 0x21a <digitalWrite+0x58>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:75
    cbi(TCCR0A, COM0B1);
     214:	80 b7       	in	r24, 0x30	; 48
     216:	8f 7d       	andi	r24, 0xDF	; 223
     218:	e9 cf       	rjmp	.-46     	; 0x1ec <digitalWrite+0x2a>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:82
  } else
  #endif

  #ifndef __AVR_ATtinyX7__
  #if defined(TCCR1A) && defined(COM1A1)
  if( timer == TIMER1A){
     21a:	33 30       	cpi	r19, 0x03	; 3
     21c:	21 f4       	brne	.+8      	; 0x226 <digitalWrite+0x64>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:83
    cbi(TCCR1A, COM1A1);
     21e:	8f b5       	in	r24, 0x2f	; 47
     220:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:114
  } else
  #endif

  #if defined(TCCR1A) && defined(COM1B1)
  if( timer == TIMER1B){
    cbi(TCCR1A, COM1B1);
     222:	8f bd       	out	0x2f, r24	; 47
     224:	e4 cf       	rjmp	.-56     	; 0x1ee <digitalWrite+0x2c>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:113
    //cbi(TCCR1, COM1A0);
  } else
  #endif

  #if defined(TCCR1A) && defined(COM1B1)
  if( timer == TIMER1B){
     226:	34 30       	cpi	r19, 0x04	; 4
     228:	11 f7       	brne	.-60     	; 0x1ee <digitalWrite+0x2c>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:114
    cbi(TCCR1A, COM1B1);
     22a:	8f b5       	in	r24, 0x2f	; 47
     22c:	8f 7d       	andi	r24, 0xDF	; 223
     22e:	f9 cf       	rjmp	.-14     	; 0x222 <digitalWrite+0x60>
digitalWrite():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:158
    cli();
    *out &= ~bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    cli();
     230:	f8 94       	cli
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:159
    *out |= bit;
     232:	ec 91       	ld	r30, X
     234:	2e 2b       	or	r18, r30
     236:	e9 cf       	rjmp	.-46     	; 0x20a <digitalWrite+0x48>

00000238 <pinMode>:
pinMode():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:33
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     238:	cf 93       	push	r28
     23a:	df 93       	push	r29
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:35
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
  uint8_t bit = digitalPinToBitMask(pin);
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	fc 01       	movw	r30, r24
     240:	e3 5b       	subi	r30, 0xB3	; 179
     242:	ff 4f       	sbci	r31, 0xFF	; 255
     244:	24 91       	lpm	r18, Z
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:36
  uint8_t port = digitalPinToPort(pin);
     246:	8f 5b       	subi	r24, 0xBF	; 191
     248:	9f 4f       	sbci	r25, 0xFF	; 255
     24a:	fc 01       	movw	r30, r24
     24c:	84 91       	lpm	r24, Z
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:39
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     24e:	88 23       	and	r24, r24
     250:	d1 f0       	breq	.+52     	; 0x286 <__stack+0x27>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:41

  reg = portModeRegister(port);
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	88 0f       	add	r24, r24
     256:	99 1f       	adc	r25, r25
     258:	fc 01       	movw	r30, r24
     25a:	ee 5d       	subi	r30, 0xDE	; 222
     25c:	ff 4f       	sbci	r31, 0xFF	; 255
     25e:	a5 91       	lpm	r26, Z+
     260:	b4 91       	lpm	r27, Z
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:42
  out = portOutputRegister(port);
     262:	fc 01       	movw	r30, r24
     264:	e8 5d       	subi	r30, 0xD8	; 216
     266:	ff 4f       	sbci	r31, 0xFF	; 255
     268:	c5 91       	lpm	r28, Z+
     26a:	d4 91       	lpm	r29, Z
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:44

  if (mode == INPUT) {
     26c:	61 11       	cpse	r22, r1
     26e:	0e c0       	rjmp	.+28     	; 0x28c <__stack+0x2d>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:45
    uint8_t oldSREG = SREG;
     270:	9f b7       	in	r25, 0x3f	; 63
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:46
                cli();
     272:	f8 94       	cli
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:47
    *reg &= ~bit;
     274:	8c 91       	ld	r24, X
     276:	e2 2f       	mov	r30, r18
     278:	e0 95       	com	r30
     27a:	8e 23       	and	r24, r30
     27c:	8c 93       	st	X, r24
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:48
    *out &= ~bit;
     27e:	28 81       	ld	r18, Y
     280:	e2 23       	and	r30, r18
     282:	e8 83       	st	Y, r30
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:49
    SREG = oldSREG;
     284:	9f bf       	out	0x3f, r25	; 63
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:62
    uint8_t oldSREG = SREG;
                cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
     286:	df 91       	pop	r29
     288:	cf 91       	pop	r28
     28a:	08 95       	ret
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:57
                cli();
    *reg &= ~bit;
    *out |= bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     28c:	8f b7       	in	r24, 0x3f	; 63
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:58
                cli();
     28e:	f8 94       	cli
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:59
    *reg |= bit;
     290:	ec 91       	ld	r30, X
     292:	e2 2b       	or	r30, r18
     294:	ec 93       	st	X, r30
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:60
    SREG = oldSREG;
     296:	8f bf       	out	0x3f, r24	; 63
     298:	f6 cf       	rjmp	.-20     	; 0x286 <__stack+0x27>

0000029a <analogRead>:
analogRead():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_analog.c:72
  #ifndef ADCSRA
  return digitalRead(analogInputToDigitalPin(pin)) ? 1023 : 0; //No ADC, so read as a digital pin instead.
  #endif

  #if defined(ADMUX)
  ADMUX = ((analog_reference & ADMUX_REFS_MASK) << REFS0) | ((pin & ADMUX_MUX_MASK) << MUX0); //select the channel and reference
     29a:	90 91 fe 00 	lds	r25, 0x00FE	; 0x8000fe <analog_reference>
     29e:	92 95       	swap	r25
     2a0:	99 0f       	add	r25, r25
     2a2:	99 0f       	add	r25, r25
     2a4:	90 7c       	andi	r25, 0xC0	; 192
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_analog.c:66
#define ADMUX_MUX_MASK (0x07)
#endif

int analogRead(uint8_t pin)
{
  pin &=127; //strip off the high bit of the A# constants
     2a6:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_analog.c:72
  #ifndef ADCSRA
  return digitalRead(analogInputToDigitalPin(pin)) ? 1023 : 0; //No ADC, so read as a digital pin instead.
  #endif

  #if defined(ADMUX)
  ADMUX = ((analog_reference & ADMUX_REFS_MASK) << REFS0) | ((pin & ADMUX_MUX_MASK) << MUX0); //select the channel and reference
     2a8:	98 2b       	or	r25, r24
     2aa:	97 b9       	out	0x07, r25	; 7
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_analog.c:79
  ADMUX |= (((analog_reference & 0x04) >> 2) << REFS2); //some have an extra reference bit in a weird position.
  #endif
  #endif

  #if defined(HAVE_ADC) && HAVE_ADC
  sbi(ADCSRA, ADSC); //Start conversion
     2ac:	36 9a       	sbi	0x06, 6	; 6
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_analog.c:81

  while(ADCSRA & (1<<ADSC)); //Wait for conversion to complete.
     2ae:	36 99       	sbic	0x06, 6	; 6
     2b0:	fe cf       	rjmp	.-4      	; 0x2ae <analogRead+0x14>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_analog.c:83

  uint8_t low = ADCL;
     2b2:	84 b1       	in	r24, 0x04	; 4
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_analog.c:84
  uint8_t high = ADCH;
     2b4:	95 b1       	in	r25, 0x05	; 5
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_analog.c:89
  return (high << 8) | low;
  #else
  return LOW;
  #endif
}
     2b6:	08 95       	ret

000002b8 <micros>:
micros():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:181
  }

  unsigned long micros()
  {
    unsigned long m;
    uint8_t oldSREG = SREG, t;
     2b8:	3f b7       	in	r19, 0x3f	; 63
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:183

    cli();
     2ba:	f8 94       	cli
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:184
    m = millis_timer_overflow_count;
     2bc:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <millis_timer_overflow_count>
     2c0:	90 91 fb 00 	lds	r25, 0x00FB	; 0x8000fb <millis_timer_overflow_count+0x1>
     2c4:	a0 91 fc 00 	lds	r26, 0x00FC	; 0x8000fc <millis_timer_overflow_count+0x2>
     2c8:	b0 91 fd 00 	lds	r27, 0x00FD	; 0x8000fd <millis_timer_overflow_count+0x3>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:186
  #if defined(TCNT0) && (TIMER_TO_USE_FOR_MILLIS == 0) && !defined(TCW0)
    t = TCNT0;
     2cc:	22 b7       	in	r18, 0x32	; 50
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:198
  #else
    #error "Millis()/Micros() timer not defined"
  #endif

  #if defined(TIFR0) && (TIMER_TO_USE_FOR_MILLIS == 0)
    if ((TIFR0 & _BV(TOV0)) && (t < 255))
     2ce:	08 b6       	in	r0, 0x38	; 56
     2d0:	00 fe       	sbrs	r0, 0
     2d2:	05 c0       	rjmp	.+10     	; 0x2de <micros+0x26>
     2d4:	2f 3f       	cpi	r18, 0xFF	; 255
     2d6:	19 f0       	breq	.+6      	; 0x2de <micros+0x26>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:199
      m++;
     2d8:	01 96       	adiw	r24, 0x01	; 1
     2da:	a1 1d       	adc	r26, r1
     2dc:	b1 1d       	adc	r27, r1
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:211
  #elif defined(TIFR) && (TIMER_TO_USE_FOR_MILLIS == 1)
    if ((TIFR & _BV(TOV1)) && (t < 255))
      m++;
  #endif

    SREG = oldSREG;
     2de:	3f bf       	out	0x3f, r19	; 63
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:218

  #if F_CPU < 1000000L
    return ((m << 8) + t) * MillisTimer_Prescale_Value * (1000000L/F_CPU);
  #else
    #if (MillisTimer_Prescale_Value % clockCyclesPerMicrosecond() == 0 && (F_CPU % 1000000 == 0 )) // Can we just do it the naive way? If so great!
      return ((m << 8) + t) * (MillisTimer_Prescale_Value / clockCyclesPerMicrosecond());
     2e0:	ba 2f       	mov	r27, r26
     2e2:	a9 2f       	mov	r26, r25
     2e4:	98 2f       	mov	r25, r24
     2e6:	88 27       	eor	r24, r24
     2e8:	bc 01       	movw	r22, r24
     2ea:	cd 01       	movw	r24, r26
     2ec:	62 0f       	add	r22, r18
     2ee:	71 1d       	adc	r23, r1
     2f0:	81 1d       	adc	r24, r1
     2f2:	91 1d       	adc	r25, r1
     2f4:	43 e0       	ldi	r20, 0x03	; 3
     2f6:	66 0f       	add	r22, r22
     2f8:	77 1f       	adc	r23, r23
     2fa:	88 1f       	adc	r24, r24
     2fc:	99 1f       	adc	r25, r25
     2fe:	4a 95       	dec	r20
     300:	d1 f7       	brne	.-12     	; 0x2f6 <micros+0x3e>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:266
      //the high part gets divided by cCPuS then multiplied by the prescaler. Then take the low 8 bits plus the high part modulo-cCPuS to correct for the division, then multiply that by the prescaler value first before dividing by cCPuS, and finally add the two together.
      //return ((m << 8 )/clockCyclesPerMicrosecond()* MillisTimer_Prescale_Value) + ((t+(((m<<8)%clockCyclesPerMicrosecond())) * MillisTimer_Prescale_Value / clockCyclesPerMicrosecond()));
      return ((m << 8 )/clockCyclesPerMicrosecond()* MillisTimer_Prescale_Value) + (t * MillisTimer_Prescale_Value / clockCyclesPerMicrosecond());
    #endif
  #endif
  }
     302:	08 95       	ret

00000304 <delay>:
delay():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:276
    // Empty
  }
  void yield(void) __attribute__ ((weak, alias("__empty")));

  void delay(unsigned long ms)
  {
     304:	cf 92       	push	r12
     306:	df 92       	push	r13
     308:	ef 92       	push	r14
     30a:	ff 92       	push	r15
     30c:	cf 93       	push	r28
     30e:	df 93       	push	r29
     310:	6b 01       	movw	r12, r22
     312:	7c 01       	movw	r14, r24
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:278
    #if (F_CPU>=1000000L)
    uint16_t start = (uint16_t)micros();
     314:	d1 df       	rcall	.-94     	; 0x2b8 <micros>
     316:	eb 01       	movw	r28, r22
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:282

    while (ms > 0) {
      yield();
      while (((uint16_t)micros() - start) >= 1000 && ms) {
     318:	cf df       	rcall	.-98     	; 0x2b8 <micros>
     31a:	6c 1b       	sub	r22, r28
     31c:	7d 0b       	sbc	r23, r29
     31e:	68 3e       	cpi	r22, 0xE8	; 232
     320:	73 40       	sbci	r23, 0x03	; 3
     322:	a0 f0       	brcs	.+40     	; 0x34c <delay+0x48>
     324:	c1 14       	cp	r12, r1
     326:	d1 04       	cpc	r13, r1
     328:	e1 04       	cpc	r14, r1
     32a:	f1 04       	cpc	r15, r1
     32c:	39 f4       	brne	.+14     	; 0x33c <delay+0x38>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:292
    #else
    uint32_t start = millis();
    while((millis() - start) < ms)  /* NOP */yield();
    return;
    #endif
  }
     32e:	df 91       	pop	r29
     330:	cf 91       	pop	r28
     332:	ff 90       	pop	r15
     334:	ef 90       	pop	r14
     336:	df 90       	pop	r13
     338:	cf 90       	pop	r12
     33a:	08 95       	ret
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:283
    uint16_t start = (uint16_t)micros();

    while (ms > 0) {
      yield();
      while (((uint16_t)micros() - start) >= 1000 && ms) {
        ms--;
     33c:	81 e0       	ldi	r24, 0x01	; 1
     33e:	c8 1a       	sub	r12, r24
     340:	d1 08       	sbc	r13, r1
     342:	e1 08       	sbc	r14, r1
     344:	f1 08       	sbc	r15, r1
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:284
        start += 1000;
     346:	c8 51       	subi	r28, 0x18	; 24
     348:	dc 4f       	sbci	r29, 0xFC	; 252
     34a:	e6 cf       	rjmp	.-52     	; 0x318 <delay+0x14>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:280
  void delay(unsigned long ms)
  {
    #if (F_CPU>=1000000L)
    uint16_t start = (uint16_t)micros();

    while (ms > 0) {
     34c:	c1 14       	cp	r12, r1
     34e:	d1 04       	cpc	r13, r1
     350:	e1 04       	cpc	r14, r1
     352:	f1 04       	cpc	r15, r1
     354:	09 f7       	brne	.-62     	; 0x318 <delay+0x14>
     356:	eb cf       	rjmp	.-42     	; 0x32e <delay+0x2a>

00000358 <spislave_c::getInstance()>:
_ZN10spislave_c11getInstanceEv():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/spislave.h:28
        reg_t   dv_in, dv_out;
        uint8_t cmd_in, cmd_out;

    public:
        static spislave_c *getInstance() {
            static spislave_c instance;
     358:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <guard variable for spislave_c::getInstance()::instance>
     35c:	81 11       	cpse	r24, r1
     35e:	1e c0       	rjmp	.+60     	; 0x39c <spislave_c::getInstance()+0x44>
__base_ctor ():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/spislave.h:19
typedef uint32_t reg_t;
typedef reg_t (*cmdhandler_t)(uint8_t, reg_t);

class spislave_c {
    private:
        spislave_c() : psrl(0), bctr(-1), dv_in(0), dv_out(0), cmd_in(0), cmd_out(0) {};
     360:	10 92 c7 00 	sts	0x00C7, r1	; 0x8000c7 <__data_end+0x3>
     364:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__data_end+0x2>
     368:	8f ef       	ldi	r24, 0xFF	; 255
     36a:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__data_end+0x4>
     36e:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <__data_end+0x5>
     372:	10 92 ca 00 	sts	0x00CA, r1	; 0x8000ca <__data_end+0x6>
     376:	10 92 cb 00 	sts	0x00CB, r1	; 0x8000cb <__data_end+0x7>
     37a:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <__data_end+0x8>
     37e:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__data_end+0x9>
     382:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <__data_end+0xa>
     386:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <__data_end+0xb>
     38a:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <__data_end+0xc>
     38e:	10 92 d1 00 	sts	0x00D1, r1	; 0x8000d1 <__data_end+0xd>
     392:	10 92 d2 00 	sts	0x00D2, r1	; 0x8000d2 <__data_end+0xe>
_ZN10spislave_c11getInstanceEv():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/spislave.h:28
        reg_t   dv_in, dv_out;
        uint8_t cmd_in, cmd_out;

    public:
        static spislave_c *getInstance() {
            static spislave_c instance;
     396:	81 e0       	ldi	r24, 0x01	; 1
     398:	80 93 d3 00 	sts	0x00D3, r24	; 0x8000d3 <guard variable for spislave_c::getInstance()::instance>
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/spislave.h:30
            return &instance;
        }
     39c:	84 ec       	ldi	r24, 0xC4	; 196
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	08 95       	ret

000003a2 <SoftwareSerialTX::write(unsigned char)>:
_ZN16SoftwareSerialTX5writeEh():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/SoftwareSerial_tx.cpp:139
{
}


size_t SoftwareSerialTX::write(uint8_t b)
{
     3a2:	ef 92       	push	r14
     3a4:	ff 92       	push	r15
     3a6:	0f 93       	push	r16
     3a8:	1f 93       	push	r17
     3aa:	cf 93       	push	r28
     3ac:	df 93       	push	r29
     3ae:	dc 01       	movw	r26, r24
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/SoftwareSerial_tx.cpp:140
  if (_tx_delay == 0) {
     3b0:	1f 96       	adiw	r26, 0x0f	; 15
     3b2:	ed 90       	ld	r14, X+
     3b4:	fc 90       	ld	r15, X
     3b6:	50 97       	sbiw	r26, 0x10	; 16
     3b8:	e1 14       	cp	r14, r1
     3ba:	f1 04       	cpc	r15, r1
     3bc:	79 f4       	brne	.+30     	; 0x3dc <SoftwareSerialTX::write(unsigned char)+0x3a>
_ZN5Print13setWriteErrorEi():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/Print.h:73
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	13 96       	adiw	r26, 0x03	; 3
     3c4:	9c 93       	st	X, r25
     3c6:	8e 93       	st	-X, r24
     3c8:	12 97       	sbiw	r26, 0x02	; 2
_ZN16SoftwareSerialTX5writeEh():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/SoftwareSerial_tx.cpp:142
    setWriteError();
    return 0;
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/SoftwareSerial_tx.cpp:191

  SREG = oldSREG; // turn interrupts back on
  tunedDelay(_tx_delay);
  
  return 1;
}
     3ce:	df 91       	pop	r29
     3d0:	cf 91       	pop	r28
     3d2:	1f 91       	pop	r17
     3d4:	0f 91       	pop	r16
     3d6:	ff 90       	pop	r15
     3d8:	ef 90       	pop	r14
     3da:	08 95       	ret
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/SoftwareSerial_tx.cpp:149

  // By declaring these as local variables, the compiler will put them
  // in registers _before_ disabling interrupts and entering the
  // critical timing sections below, which makes it a lot easier to
  // verify the cycle timings
  volatile uint8_t *reg = _transmitPortRegister;
     3dc:	1d 96       	adiw	r26, 0x0d	; 13
     3de:	ed 91       	ld	r30, X+
     3e0:	fc 91       	ld	r31, X
     3e2:	1e 97       	sbiw	r26, 0x0e	; 14
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/SoftwareSerial_tx.cpp:150
  uint8_t reg_mask = _transmitBitMask;
     3e4:	1c 96       	adiw	r26, 0x0c	; 12
     3e6:	8c 91       	ld	r24, X
     3e8:	1c 97       	sbiw	r26, 0x0c	; 12
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/SoftwareSerial_tx.cpp:151
  uint8_t inv_mask = ~_transmitBitMask;
     3ea:	98 2f       	mov	r25, r24
     3ec:	90 95       	com	r25
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/SoftwareSerial_tx.cpp:152
  uint8_t oldSREG = SREG;
     3ee:	0f b7       	in	r16, 0x3f	; 63
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/SoftwareSerial_tx.cpp:153
  bool inv = _inverse_logic;
     3f0:	51 96       	adiw	r26, 0x11	; 17
     3f2:	2c 91       	ld	r18, X
     3f4:	51 97       	sbiw	r26, 0x11	; 17
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/SoftwareSerial_tx.cpp:156
  uint16_t delay = _tx_delay;

  if (inv)
     3f6:	12 2f       	mov	r17, r18
     3f8:	11 70       	andi	r17, 0x01	; 1
     3fa:	20 fd       	sbrc	r18, 0
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/SoftwareSerial_tx.cpp:157
    b = ~b;
     3fc:	60 95       	com	r22
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/SoftwareSerial_tx.cpp:159

  cli();  // turn off interrupts for a clean txmit
     3fe:	f8 94       	cli
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/SoftwareSerial_tx.cpp:163

  // Write the start bit
  if (inv)
    *reg |= reg_mask;
     400:	20 81       	ld	r18, Z
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/SoftwareSerial_tx.cpp:162
    b = ~b;

  cli();  // turn off interrupts for a clean txmit

  // Write the start bit
  if (inv)
     402:	11 23       	and	r17, r17
     404:	19 f1       	breq	.+70     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/SoftwareSerial_tx.cpp:163
    *reg |= reg_mask;
     406:	28 2b       	or	r18, r24
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/SoftwareSerial_tx.cpp:165
  else
    *reg &= inv_mask;
     408:	20 83       	st	Z, r18
_delay_loop_2():
c:\users\ericw\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     40a:	e7 01       	movw	r28, r14
     40c:	21 97       	sbiw	r28, 0x01	; 1
     40e:	f1 f7       	brne	.-4      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     410:	28 e0       	ldi	r18, 0x08	; 8
_ZN16SoftwareSerialTX5writeEh():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/SoftwareSerial_tx.cpp:172
  tunedDelay(delay);

  // Write each of the 8 bits
  for (uint8_t i = 8; i > 0; --i)
  {
    if (b & 1) // choose bit
     412:	46 2f       	mov	r20, r22
     414:	50 e0       	ldi	r21, 0x00	; 0
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/SoftwareSerial_tx.cpp:173
      *reg |= reg_mask; // send 1
     416:	30 81       	ld	r19, Z
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/SoftwareSerial_tx.cpp:172
  tunedDelay(delay);

  // Write each of the 8 bits
  for (uint8_t i = 8; i > 0; --i)
  {
    if (b & 1) // choose bit
     418:	60 ff       	sbrs	r22, 0
     41a:	1a c0       	rjmp	.+52     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/SoftwareSerial_tx.cpp:173
      *reg |= reg_mask; // send 1
     41c:	38 2b       	or	r19, r24
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/SoftwareSerial_tx.cpp:175
    else
      *reg &= inv_mask; // send 0
     41e:	30 83       	st	Z, r19
_delay_loop_2():
c:\users\ericw\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
     420:	e7 01       	movw	r28, r14
     422:	21 97       	sbiw	r28, 0x01	; 1
     424:	f1 f7       	brne	.-4      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
_ZN16SoftwareSerialTX5writeEh():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/SoftwareSerial_tx.cpp:178

    tunedDelay(delay);
    b >>= 1;
     426:	ba 01       	movw	r22, r20
     428:	75 95       	asr	r23
     42a:	67 95       	ror	r22
     42c:	21 50       	subi	r18, 0x01	; 1
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/SoftwareSerial_tx.cpp:170
    *reg &= inv_mask;

  tunedDelay(delay);

  // Write each of the 8 bits
  for (uint8_t i = 8; i > 0; --i)
     42e:	89 f7       	brne	.-30     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/SoftwareSerial_tx.cpp:182
    tunedDelay(delay);
    b >>= 1;
  }

  // restore pin to natural state
  if (inv)
     430:	11 23       	and	r17, r17
     432:	81 f0       	breq	.+32     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/SoftwareSerial_tx.cpp:183
    *reg &= inv_mask;
     434:	80 81       	ld	r24, Z
     436:	89 23       	and	r24, r25
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/SoftwareSerial_tx.cpp:185
  else
    *reg |= reg_mask;
     438:	80 83       	st	Z, r24
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/SoftwareSerial_tx.cpp:187

  SREG = oldSREG; // turn interrupts back on
     43a:	0f bf       	out	0x3f, r16	; 63
_delay_loop_2():
c:\users\ericw\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
     43c:	1f 96       	adiw	r26, 0x0f	; 15
     43e:	8d 91       	ld	r24, X+
     440:	9c 91       	ld	r25, X
     442:	01 97       	sbiw	r24, 0x01	; 1
     444:	f1 f7       	brne	.-4      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
_ZN16SoftwareSerialTX5writeEh():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/SoftwareSerial_tx.cpp:190
  tunedDelay(_tx_delay);
  
  return 1;
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	c1 cf       	rjmp	.-126    	; 0x3ce <SoftwareSerialTX::write(unsigned char)+0x2c>
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/SoftwareSerial_tx.cpp:165

  // Write the start bit
  if (inv)
    *reg |= reg_mask;
  else
    *reg &= inv_mask;
     44c:	29 23       	and	r18, r25
     44e:	dc cf       	rjmp	.-72     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/SoftwareSerial_tx.cpp:175
  for (uint8_t i = 8; i > 0; --i)
  {
    if (b & 1) // choose bit
      *reg |= reg_mask; // send 1
    else
      *reg &= inv_mask; // send 0
     450:	39 23       	and	r19, r25
     452:	e5 cf       	rjmp	.-54     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/SoftwareSerial_tx.cpp:185

  // restore pin to natural state
  if (inv)
    *reg &= inv_mask;
  else
    *reg |= reg_mask;
     454:	90 81       	ld	r25, Z
     456:	89 2b       	or	r24, r25
     458:	ef cf       	rjmp	.-34     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>

0000045a <SoftwareSerialTX::flush()>:
_ZN16SoftwareSerialTX5flushEv():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/SoftwareSerial_tx.h:51
  int peek() { return 0; };
  virtual int read() { return 0; };
  virtual int available() { return 0; };

  virtual size_t write(uint8_t byte);
  virtual void flush() {};
     45a:	08 95       	ret

0000045c <SoftwareSerialTX::peek()>:
_ZN16SoftwareSerialTX4peekEv():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/SoftwareSerial_tx.h:46
  SoftwareSerialTX(uint8_t transmitPin, bool inverse_logic = false);
  ~SoftwareSerialTX();
  void begin(long speed);
  void end();
  bool overflow() { return false; };
  int peek() { return 0; };
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	80 e0       	ldi	r24, 0x00	; 0
     460:	08 95       	ret

00000462 <Print::write(char const*)>:
_ZN5Print5writeEPKc():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/Print.h:81

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
     462:	fb 01       	movw	r30, r22
     464:	01 90       	ld	r0, Z+
     466:	00 20       	and	r0, r0
     468:	e9 f7       	brne	.-6      	; 0x464 <Print::write(char const*)+0x2>
     46a:	31 97       	sbiw	r30, 0x01	; 1
     46c:	af 01       	movw	r20, r30
     46e:	46 1b       	sub	r20, r22
     470:	57 0b       	sbc	r21, r23
     472:	dc 01       	movw	r26, r24
     474:	ed 91       	ld	r30, X+
     476:	fc 91       	ld	r31, X
     478:	02 80       	ldd	r0, Z+2	; 0x02
     47a:	f3 81       	ldd	r31, Z+3	; 0x03
     47c:	e0 2d       	mov	r30, r0
     47e:	09 94       	ijmp

00000480 <Print::printNumber(unsigned long, unsigned char)>:
_ZN5Print11printNumberEmh():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/Print.cpp:257

#endif

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
     480:	8f 92       	push	r8
     482:	9f 92       	push	r9
     484:	af 92       	push	r10
     486:	bf 92       	push	r11
     488:	cf 92       	push	r12
     48a:	df 92       	push	r13
     48c:	ef 92       	push	r14
     48e:	ff 92       	push	r15
     490:	0f 93       	push	r16
     492:	1f 93       	push	r17
     494:	cf 93       	push	r28
     496:	df 93       	push	r29
     498:	cd b7       	in	r28, 0x3d	; 61
     49a:	de b7       	in	r29, 0x3e	; 62
     49c:	a1 97       	sbiw	r28, 0x21	; 33
     49e:	0f b6       	in	r0, 0x3f	; 63
     4a0:	f8 94       	cli
     4a2:	de bf       	out	0x3e, r29	; 62
     4a4:	0f be       	out	0x3f, r0	; 63
     4a6:	cd bf       	out	0x3d, r28	; 61
     4a8:	6c 01       	movw	r12, r24
     4aa:	14 2f       	mov	r17, r20
     4ac:	e5 2f       	mov	r30, r21
     4ae:	cb 01       	movw	r24, r22
     4b0:	02 2f       	mov	r16, r18
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/Print.cpp:261
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     4b2:	19 a2       	std	Y+33, r1	; 0x21
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/Print.cpp:264

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     4b4:	22 30       	cpi	r18, 0x02	; 2
     4b6:	08 f4       	brcc	.+2      	; 0x4ba <Print::printNumber(unsigned long, unsigned char)+0x3a>
     4b8:	0a e0       	ldi	r16, 0x0A	; 10
     4ba:	7e 01       	movw	r14, r28
     4bc:	21 e2       	ldi	r18, 0x21	; 33
     4be:	e2 0e       	add	r14, r18
     4c0:	f1 1c       	adc	r15, r1
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/Print.cpp:268

  do {
    unsigned long m = n;
    n /= base;
     4c2:	80 2e       	mov	r8, r16
     4c4:	91 2c       	mov	r9, r1
     4c6:	b1 2c       	mov	r11, r1
     4c8:	a1 2c       	mov	r10, r1
     4ca:	61 2f       	mov	r22, r17
     4cc:	7e 2f       	mov	r23, r30
     4ce:	a5 01       	movw	r20, r10
     4d0:	94 01       	movw	r18, r8
     4d2:	af d5       	rcall	.+2910   	; 0x1032 <__udivmodsi4>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/Print.cpp:269
    char c = m - base * n;
     4d4:	80 2f       	mov	r24, r16
     4d6:	62 2f       	mov	r22, r18
     4d8:	97 d5       	rcall	.+2862   	; 0x1008 <__mulqi3>
     4da:	18 1b       	sub	r17, r24
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/Print.cpp:270
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     4dc:	1a 30       	cpi	r17, 0x0A	; 10
     4de:	0c f5       	brge	.+66     	; 0x522 <Print::printNumber(unsigned long, unsigned char)+0xa2>
     4e0:	10 5d       	subi	r17, 0xD0	; 208
     4e2:	f7 01       	movw	r30, r14
     4e4:	12 93       	st	-Z, r17
     4e6:	7f 01       	movw	r14, r30
     4e8:	12 2f       	mov	r17, r18
     4ea:	e3 2f       	mov	r30, r19
     4ec:	ca 01       	movw	r24, r20
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/Print.cpp:271
  } while(n);
     4ee:	23 2b       	or	r18, r19
     4f0:	24 2b       	or	r18, r20
     4f2:	25 2b       	or	r18, r21
     4f4:	51 f7       	brne	.-44     	; 0x4ca <Print::printNumber(unsigned long, unsigned char)+0x4a>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/Print.cpp:273

  return write(str);
     4f6:	b7 01       	movw	r22, r14
     4f8:	c6 01       	movw	r24, r12
     4fa:	b3 df       	rcall	.-154    	; 0x462 <Print::write(char const*)>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/Print.cpp:274
}
     4fc:	a1 96       	adiw	r28, 0x21	; 33
     4fe:	0f b6       	in	r0, 0x3f	; 63
     500:	f8 94       	cli
     502:	de bf       	out	0x3e, r29	; 62
     504:	0f be       	out	0x3f, r0	; 63
     506:	cd bf       	out	0x3d, r28	; 61
     508:	df 91       	pop	r29
     50a:	cf 91       	pop	r28
     50c:	1f 91       	pop	r17
     50e:	0f 91       	pop	r16
     510:	ff 90       	pop	r15
     512:	ef 90       	pop	r14
     514:	df 90       	pop	r13
     516:	cf 90       	pop	r12
     518:	bf 90       	pop	r11
     51a:	af 90       	pop	r10
     51c:	9f 90       	pop	r9
     51e:	8f 90       	pop	r8
     520:	08 95       	ret
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/Print.cpp:270

  do {
    unsigned long m = n;
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     522:	19 5c       	subi	r17, 0xC9	; 201
     524:	de cf       	rjmp	.-68     	; 0x4e2 <Print::printNumber(unsigned long, unsigned char)+0x62>

00000526 <Print::println(char const*)>:
_ZN5Print7printlnEPKc():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/Print.cpp:134
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
     526:	ef 92       	push	r14
     528:	ff 92       	push	r15
     52a:	0f 93       	push	r16
     52c:	1f 93       	push	r17
     52e:	cf 93       	push	r28
     530:	df 93       	push	r29
     532:	ec 01       	movw	r28, r24
print():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/Print.cpp:53
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
     534:	96 df       	rcall	.-212    	; 0x462 <Print::write(char const*)>
     536:	8c 01       	movw	r16, r24
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/Print.cpp:58
}

size_t Print::print(char c)
{
  return write(c);
     538:	e8 81       	ld	r30, Y
     53a:	f9 81       	ldd	r31, Y+1	; 0x01
     53c:	01 90       	ld	r0, Z+
     53e:	f0 81       	ld	r31, Z
     540:	e0 2d       	mov	r30, r0
     542:	6d e0       	ldi	r22, 0x0D	; 13
     544:	ce 01       	movw	r24, r28
     546:	09 95       	icall
     548:	7c 01       	movw	r14, r24
     54a:	e8 81       	ld	r30, Y
     54c:	f9 81       	ldd	r31, Y+1	; 0x01
     54e:	01 90       	ld	r0, Z+
     550:	f0 81       	ld	r31, Z
     552:	e0 2d       	mov	r30, r0
     554:	6a e0       	ldi	r22, 0x0A	; 10
     556:	ce 01       	movw	r24, r28
     558:	09 95       	icall
_ZN5Print7printlnEPKc():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/Print.cpp:136
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
     55a:	0e 0d       	add	r16, r14
     55c:	1f 1d       	adc	r17, r15
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/Print.cpp:138
  return n;
}
     55e:	80 0f       	add	r24, r16
     560:	91 1f       	adc	r25, r17
     562:	df 91       	pop	r29
     564:	cf 91       	pop	r28
     566:	1f 91       	pop	r17
     568:	0f 91       	pop	r16
     56a:	ff 90       	pop	r15
     56c:	ef 90       	pop	r14
     56e:	08 95       	ret

00000570 <doTickWork()>:
_Z10doTickWorkv():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:177

const uint8_t TICKS_PER_SECOND = 4;
const uint32_t MILLIS_PER_TICK = (1e3 / TICKS_PER_SECOND);
uint32_t next_tick;

void doTickWork() {
     570:	4f 92       	push	r4
     572:	5f 92       	push	r5
     574:	6f 92       	push	r6
     576:	7f 92       	push	r7
     578:	8f 92       	push	r8
     57a:	9f 92       	push	r9
     57c:	af 92       	push	r10
     57e:	bf 92       	push	r11
     580:	cf 92       	push	r12
     582:	df 92       	push	r13
     584:	ef 92       	push	r14
     586:	ff 92       	push	r15
     588:	0f 93       	push	r16
     58a:	1f 93       	push	r17
     58c:	cf 93       	push	r28
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:179
    static uint8_t tick_count;
    bool second = ! (tick_count % TICKS_PER_SECOND);
     58e:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <doTickWork()::tick_count>
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:180
    tick_count += 1;
     592:	91 e0       	ldi	r25, 0x01	; 1
     594:	98 0f       	add	r25, r24
     596:	90 93 df 00 	sts	0x00DF, r25	; 0x8000df <doTickWork()::tick_count>
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:182

    if (second) { 
     59a:	83 70       	andi	r24, 0x03	; 3
     59c:	09 f0       	breq	.+2      	; 0x5a0 <doTickWork()+0x30>
     59e:	d8 c1       	rjmp	.+944    	; 0x950 <doTickWork()+0x3e0>
_ZN9regfile_cImLj12EE3getEh():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:87
            v &= halfmask;
            return v;
        }

        REGW get(uint8_t addr) { 
            return registers[addr % REG_COUNT];
     5a0:	c0 90 19 01 	lds	r12, 0x0119	; 0x800119 <rf>
     5a4:	d0 90 1a 01 	lds	r13, 0x011A	; 0x80011a <rf+0x1>
     5a8:	e0 90 1b 01 	lds	r14, 0x011B	; 0x80011b <rf+0x2>
     5ac:	f0 90 1c 01 	lds	r15, 0x011C	; 0x80011c <rf+0x3>
doSecondWork():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:92



void doSecondWork() {
    uint32_t s = rf.get(REG_STATUS);
    if ((s & _BV(STAT_WDOG_EN)) && (s & _BV(STAT_PWR_ON))) {
     5b0:	d7 01       	movw	r26, r14
     5b2:	c6 01       	movw	r24, r12
     5b4:	81 72       	andi	r24, 0x21	; 33
     5b6:	99 27       	eor	r25, r25
     5b8:	aa 27       	eor	r26, r26
     5ba:	bb 27       	eor	r27, r27
     5bc:	81 97       	sbiw	r24, 0x21	; 33
     5be:	a1 05       	cpc	r26, r1
     5c0:	b1 05       	cpc	r27, r1
     5c2:	09 f0       	breq	.+2      	; 0x5c6 <doTickWork()+0x56>
     5c4:	8e c0       	rjmp	.+284    	; 0x6e2 <doTickWork()+0x172>
_ZN9regfile_cImLj12EE3getEh():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:87
     5c6:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <rf+0x4>
     5ca:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <rf+0x5>
     5ce:	a0 91 1f 01 	lds	r26, 0x011F	; 0x80011f <rf+0x6>
     5d2:	b0 91 20 01 	lds	r27, 0x0120	; 0x800120 <rf+0x7>
_ZN9regfile_cImLj12EE5gethlEh15register_half_t():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:75
            registers[addr % REG_COUNT] = o;
            return o;
        }

        REGW gethl(uint8_t addr, register_half_t half) {
            REGW v = registers[addr % REG_COUNT];
     5d6:	40 91 41 01 	lds	r20, 0x0141	; 0x800141 <rf+0x28>
     5da:	50 91 42 01 	lds	r21, 0x0142	; 0x800142 <rf+0x29>
     5de:	60 91 43 01 	lds	r22, 0x0143	; 0x800143 <rf+0x2a>
     5e2:	70 91 44 01 	lds	r23, 0x0144	; 0x800144 <rf+0x2b>
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:78
            size_t sz = sizeof(REGW);
            if (half != register_bottom) {
                v >>= (sz * 4);
     5e6:	4b 01       	movw	r8, r22
     5e8:	aa 24       	eor	r10, r10
     5ea:	bb 24       	eor	r11, r11
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:82
            }
            REGW halfmask = ~(0x0);
            halfmask >>= (sz * 4);
            v &= halfmask;
     5ec:	66 27       	eor	r22, r22
     5ee:	77 27       	eor	r23, r23
doSecondWork():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:96
        reg_t on_rem = rf.get(REG_ON_REMAINING);
        reg_t a_off_thresh = rf.gethl(REG_VSENSE_OFF_THRESHOLD,register_top);
        reg_t b_off_thresh = rf.gethl(REG_VSENSE_OFF_THRESHOLD,register_bottom);
        bool a_under = a_off_thresh && (rf.gethl(REG_VSENSA_VSENSB,register_top) < a_off_thresh);
     5f0:	81 14       	cp	r8, r1
     5f2:	91 04       	cpc	r9, r1
     5f4:	a1 04       	cpc	r10, r1
     5f6:	b1 04       	cpc	r11, r1
     5f8:	89 f0       	breq	.+34     	; 0x61c <doTickWork()+0xac>
_ZN9regfile_cImLj12EE5gethlEh15register_half_t():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:75
            registers[addr % REG_COUNT] = o;
            return o;
        }

        REGW gethl(uint8_t addr, register_half_t half) {
            REGW v = registers[addr % REG_COUNT];
     5fa:	40 90 31 01 	lds	r4, 0x0131	; 0x800131 <rf+0x18>
     5fe:	50 90 32 01 	lds	r5, 0x0132	; 0x800132 <rf+0x19>
     602:	60 90 33 01 	lds	r6, 0x0133	; 0x800133 <rf+0x1a>
     606:	70 90 34 01 	lds	r7, 0x0134	; 0x800134 <rf+0x1b>
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:78
            size_t sz = sizeof(REGW);
            if (half != register_bottom) {
                v >>= (sz * 4);
     60a:	23 01       	movw	r4, r6
     60c:	66 24       	eor	r6, r6
     60e:	77 24       	eor	r7, r7
doSecondWork():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:96
     610:	11 e0       	ldi	r17, 0x01	; 1
     612:	48 14       	cp	r4, r8
     614:	59 04       	cpc	r5, r9
     616:	6a 04       	cpc	r6, r10
     618:	7b 04       	cpc	r7, r11
     61a:	08 f0       	brcs	.+2      	; 0x61e <doTickWork()+0xae>
_Z10doTickWorkv():
     61c:	10 e0       	ldi	r17, 0x00	; 0
doSecondWork():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:97
        bool b_under = b_off_thresh && (rf.gethl(REG_VSENSA_VSENSB,register_bottom) < b_off_thresh);
     61e:	41 15       	cp	r20, r1
     620:	51 05       	cpc	r21, r1
     622:	61 05       	cpc	r22, r1
     624:	71 05       	cpc	r23, r1
     626:	81 f0       	breq	.+32     	; 0x648 <doTickWork()+0xd8>
_ZN9regfile_cImLj12EE5gethlEh15register_half_t():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:75
            registers[addr % REG_COUNT] = o;
            return o;
        }

        REGW gethl(uint8_t addr, register_half_t half) {
            REGW v = registers[addr % REG_COUNT];
     628:	40 90 31 01 	lds	r4, 0x0131	; 0x800131 <rf+0x18>
     62c:	50 90 32 01 	lds	r5, 0x0132	; 0x800132 <rf+0x19>
     630:	60 90 33 01 	lds	r6, 0x0133	; 0x800133 <rf+0x1a>
     634:	70 90 34 01 	lds	r7, 0x0134	; 0x800134 <rf+0x1b>
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:82
            if (half != register_bottom) {
                v >>= (sz * 4);
            }
            REGW halfmask = ~(0x0);
            halfmask >>= (sz * 4);
            v &= halfmask;
     638:	66 24       	eor	r6, r6
     63a:	77 24       	eor	r7, r7
doSecondWork():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:97
     63c:	c1 e0       	ldi	r28, 0x01	; 1
     63e:	44 16       	cp	r4, r20
     640:	55 06       	cpc	r5, r21
     642:	66 06       	cpc	r6, r22
     644:	77 06       	cpc	r7, r23
     646:	08 f0       	brcs	.+2      	; 0x64a <doTickWork()+0xda>
_Z10doTickWorkv():
     648:	c0 e0       	ldi	r28, 0x00	; 0
doSecondWork():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:98
        if ( !on_rem || a_under || b_under) {
     64a:	00 97       	sbiw	r24, 0x00	; 0
     64c:	a1 05       	cpc	r26, r1
     64e:	b1 05       	cpc	r27, r1
     650:	29 f0       	breq	.+10     	; 0x65c <doTickWork()+0xec>
     652:	11 11       	cpse	r17, r1
     654:	03 c0       	rjmp	.+6      	; 0x65c <doTickWork()+0xec>
     656:	cc 23       	and	r28, r28
     658:	09 f4       	brne	.+2      	; 0x65c <doTickWork()+0xec>
     65a:	33 c1       	rjmp	.+614    	; 0x8c2 <doTickWork()+0x352>
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:100
            #ifdef SERIAL_DEBUG
            srl.println("Powering off pi.");
     65c:	60 e7       	ldi	r22, 0x70	; 112
     65e:	70 e0       	ldi	r23, 0x00	; 0
     660:	8f ef       	ldi	r24, 0xFF	; 255
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	60 df       	rcall	.-320    	; 0x526 <Print::println(char const*)>
     666:	e8 94       	clt
     668:	c7 f8       	bld	r12, 7
     66a:	d0 f8       	bld	r13, 0
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:104
            #endif
            s |=  _BV(STAT_WDOG_FIRED);
            s &= ~(_BV(STAT_WDOG_FIRE_CODE) | _BV(STAT_WDOG_FIRE_CODE+1));                        //00b - on-remaining timer expired 
            if (a_under && b_under) s |= (_BV(STAT_WDOG_FIRE_CODE) | _BV(STAT_WDOG_FIRE_CODE+1)); //11b - vsensb & vsensb dropped below threshold 
     66c:	11 23       	and	r17, r17
     66e:	09 f4       	brne	.+2      	; 0x672 <doTickWork()+0x102>
     670:	1f c1       	rjmp	.+574    	; 0x8b0 <doTickWork()+0x340>
     672:	cc 23       	and	r28, r28
     674:	09 f4       	brne	.+2      	; 0x678 <doTickWork()+0x108>
     676:	19 c1       	rjmp	.+562    	; 0x8aa <doTickWork()+0x33a>
     678:	22 e8       	ldi	r18, 0x82	; 130
     67a:	c2 2a       	or	r12, r18
     67c:	68 94       	set
     67e:	d0 f8       	bld	r13, 0
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:109
            else if (a_under)       s |= _BV(STAT_WDOG_FIRE_CODE);                                //01b - vsensa dropped below threshold
            else if (b_under)       s |= _BV(STAT_WDOG_FIRE_CODE+1);                              //10b - vsensb dropped below threshold
            s &= ~_BV(STAT_WAKE_FIRED);
            s &= ~_BV(STAT_PWR_ON);
            s &= ~_BV(STAT_LED_WARN);
     680:	ef e8       	ldi	r30, 0x8F	; 143
     682:	ce 22       	and	r12, r30
_ZN9regfile_cImLj12EE3setEhm():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:99
        REGW setAnd(uint8_t addr, REGW val) {
            registers[addr % REG_COUNT] &= val;
            return get(addr);
        }
        REGW set(uint8_t addr, REGW val) {
            registers[addr % REG_COUNT] = val;
     684:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <rf+0x10>
     688:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <rf+0x11>
     68c:	a0 91 2b 01 	lds	r26, 0x012B	; 0x80012b <rf+0x12>
     690:	b0 91 2c 01 	lds	r27, 0x012C	; 0x80012c <rf+0x13>
     694:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <rf+0x8>
     698:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <rf+0x9>
     69c:	a0 93 23 01 	sts	0x0123, r26	; 0x800123 <rf+0xa>
     6a0:	b0 93 24 01 	sts	0x0124, r27	; 0x800124 <rf+0xb>
_ZN9regfile_cImLj12EE5gethlEh15register_half_t():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:75
            registers[addr % REG_COUNT] = o;
            return o;
        }

        REGW gethl(uint8_t addr, register_half_t half) {
            REGW v = registers[addr % REG_COUNT];
     6a4:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <rf+0x20>
     6a8:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <rf+0x21>
     6ac:	a0 91 3b 01 	lds	r26, 0x013B	; 0x80013b <rf+0x22>
     6b0:	b0 91 3c 01 	lds	r27, 0x013C	; 0x80013c <rf+0x23>
sethl():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:67
            } else {
                i <<= (sz * 4);
            }
            REGW o = registers[addr % REG_COUNT];

            o &= mask;
     6b4:	ac 01       	movw	r20, r24
     6b6:	bd 01       	movw	r22, r26
     6b8:	44 27       	eor	r20, r20
     6ba:	55 27       	eor	r21, r21
_ZN9regfile_cImLj12EE5gethlEh15register_half_t():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:82
            if (half != register_bottom) {
                v >>= (sz * 4);
            }
            REGW halfmask = ~(0x0);
            halfmask >>= (sz * 4);
            v &= halfmask;
     6bc:	aa 27       	eor	r26, r26
     6be:	bb 27       	eor	r27, r27
doSecondWork():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:111
            rf.set(REG_OFF_REMAINING,rf.get(REG_OFF_REM_RESETVAL));
            rf.sethl(REG_FIRECOUNTS,rf.gethl(REG_FIRECOUNTS,register_bottom)+1,register_bottom);
     6c0:	01 96       	adiw	r24, 0x01	; 1
     6c2:	a1 1d       	adc	r26, r1
     6c4:	b1 1d       	adc	r27, r1
sethl():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:59

        REGW sethl(uint8_t addr, REGW i, register_half_t half) {
            size_t sz = sizeof(REGW);
            REGW mask = ~0; // all ones
            mask >>= (sz * 4);
            i &= mask;
     6c6:	aa 27       	eor	r26, r26
     6c8:	bb 27       	eor	r27, r27
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:68
                i <<= (sz * 4);
            }
            REGW o = registers[addr % REG_COUNT];

            o &= mask;
            o |= i;
     6ca:	84 2b       	or	r24, r20
     6cc:	95 2b       	or	r25, r21
     6ce:	a6 2b       	or	r26, r22
     6d0:	b7 2b       	or	r27, r23
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:70

            registers[addr % REG_COUNT] = o;
     6d2:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <rf+0x20>
     6d6:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <rf+0x21>
     6da:	a0 93 3b 01 	sts	0x013B, r26	; 0x80013b <rf+0x22>
     6de:	b0 93 3c 01 	sts	0x013C, r27	; 0x80013c <rf+0x23>
doSecondWork():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:117
        } else {
            if (on_rem < WARN_SECS) s |= _BV(STAT_LED_WARN);
            rf.set(REG_ON_REMAINING,on_rem-1);
        }
    }
    if ((s & _BV(STAT_WAKE_EN)) && (~s & _BV(STAT_PWR_ON))) {
     6e2:	c3 fe       	sbrs	r12, 3
     6e4:	6c c0       	rjmp	.+216    	; 0x7be <doTickWork()+0x24e>
     6e6:	c5 fc       	sbrc	r12, 5
     6e8:	6a c0       	rjmp	.+212    	; 0x7be <doTickWork()+0x24e>
_ZN9regfile_cImLj12EE3getEh():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:87
            v &= halfmask;
            return v;
        }

        REGW get(uint8_t addr) { 
            return registers[addr % REG_COUNT];
     6ea:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <rf+0x8>
     6ee:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <rf+0x9>
     6f2:	a0 91 23 01 	lds	r26, 0x0123	; 0x800123 <rf+0xa>
     6f6:	b0 91 24 01 	lds	r27, 0x0124	; 0x800124 <rf+0xb>
doSecondWork():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:119
        reg_t off_rem = rf.get(REG_OFF_REMAINING);
        if (!off_rem) {
     6fa:	00 97       	sbiw	r24, 0x00	; 0
     6fc:	a1 05       	cpc	r26, r1
     6fe:	b1 05       	cpc	r27, r1
     700:	09 f0       	breq	.+2      	; 0x704 <doTickWork()+0x194>
     702:	0e c1       	rjmp	.+540    	; 0x920 <doTickWork()+0x3b0>
_ZN9regfile_cImLj12EE5gethlEh15register_half_t():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:75
            registers[addr % REG_COUNT] = o;
            return o;
        }

        REGW gethl(uint8_t addr, register_half_t half) {
            REGW v = registers[addr % REG_COUNT];
     704:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <rf+0x24>
     708:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <rf+0x25>
     70c:	a0 91 3f 01 	lds	r26, 0x013F	; 0x80013f <rf+0x26>
     710:	b0 91 40 01 	lds	r27, 0x0140	; 0x800140 <rf+0x27>
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:78
            size_t sz = sizeof(REGW);
            if (half != register_bottom) {
                v >>= (sz * 4);
     714:	8d 01       	movw	r16, r26
     716:	22 27       	eor	r18, r18
     718:	33 27       	eor	r19, r19
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:82
            }
            REGW halfmask = ~(0x0);
            halfmask >>= (sz * 4);
            v &= halfmask;
     71a:	aa 27       	eor	r26, r26
     71c:	bb 27       	eor	r27, r27
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:75
            registers[addr % REG_COUNT] = o;
            return o;
        }

        REGW gethl(uint8_t addr, register_half_t half) {
            REGW v = registers[addr % REG_COUNT];
     71e:	40 91 31 01 	lds	r20, 0x0131	; 0x800131 <rf+0x18>
     722:	50 91 32 01 	lds	r21, 0x0132	; 0x800132 <rf+0x19>
     726:	60 91 33 01 	lds	r22, 0x0133	; 0x800133 <rf+0x1a>
     72a:	70 91 34 01 	lds	r23, 0x0134	; 0x800134 <rf+0x1b>
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:82
            if (half != register_bottom) {
                v >>= (sz * 4);
            }
            REGW halfmask = ~(0x0);
            halfmask >>= (sz * 4);
            v &= halfmask;
     72e:	2a 01       	movw	r4, r20
     730:	3b 01       	movw	r6, r22
     732:	66 24       	eor	r6, r6
     734:	77 24       	eor	r7, r7
doSecondWork():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:126
            reg_t b_on_thresh = rf.gethl(REG_VSENSE_ON_THRESHOLD,register_bottom); 
            bool a_over = rf.gethl(REG_VSENSA_VSENSB,register_top) >= a_on_thresh;
            bool b_over = rf.gethl(REG_VSENSA_VSENSB,register_bottom) >= b_on_thresh;
            bool enable = (!a_on_thresh && !b_on_thresh)                   || 
                          (a_on_thresh && a_over && b_on_thresh && b_over) || 
                          (a_on_thresh && a_over && !b_on_thresh)          || 
     736:	01 15       	cp	r16, r1
     738:	11 05       	cpc	r17, r1
     73a:	21 05       	cpc	r18, r1
     73c:	31 05       	cpc	r19, r1
     73e:	09 f0       	breq	.+2      	; 0x742 <doTickWork()+0x1d2>
     740:	d3 c0       	rjmp	.+422    	; 0x8e8 <doTickWork()+0x378>
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:125
            reg_t a_on_thresh = rf.gethl(REG_VSENSE_ON_THRESHOLD,register_top);
            reg_t b_on_thresh = rf.gethl(REG_VSENSE_ON_THRESHOLD,register_bottom); 
            bool a_over = rf.gethl(REG_VSENSA_VSENSB,register_top) >= a_on_thresh;
            bool b_over = rf.gethl(REG_VSENSA_VSENSB,register_bottom) >= b_on_thresh;
            bool enable = (!a_on_thresh && !b_on_thresh)                   || 
                          (a_on_thresh && a_over && b_on_thresh && b_over) || 
     742:	00 97       	sbiw	r24, 0x00	; 0
     744:	a1 05       	cpc	r26, r1
     746:	b1 05       	cpc	r27, r1
     748:	31 f0       	breq	.+12     	; 0x756 <doTickWork()+0x1e6>
     74a:	48 16       	cp	r4, r24
     74c:	59 06       	cpc	r5, r25
     74e:	6a 06       	cpc	r6, r26
     750:	7b 06       	cpc	r7, r27
     752:	08 f4       	brcc	.+2      	; 0x756 <doTickWork()+0x1e6>
     754:	d2 c0       	rjmp	.+420    	; 0x8fa <doTickWork()+0x38a>
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:130
                          (a_on_thresh && a_over && !b_on_thresh)          || 
                          (b_on_thresh && b_over && !a_on_thresh);
            if (enable == true) {
                #ifdef SERIAL_DEBUG
                srl.println("Powering on pi.");
     756:	61 e8       	ldi	r22, 0x81	; 129
     758:	70 e0       	ldi	r23, 0x00	; 0
     75a:	8f ef       	ldi	r24, 0xFF	; 255
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	e3 de       	rcall	.-570    	; 0x526 <Print::println(char const*)>
     760:	fd eb       	ldi	r31, 0xBD	; 189
     762:	cf 22       	and	r12, r31
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:135
                #endif
                s |= _BV(STAT_WAKE_FIRED);
                s |= _BV(STAT_PWR_ON);
                s &= ~_BV(STAT_LED_WARN);
                s &= ~_BV(STAT_WDOG_FIRED);
     764:	20 e3       	ldi	r18, 0x30	; 48
     766:	c2 2a       	or	r12, r18
_ZN9regfile_cImLj12EE3setEhm():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:99
        REGW setAnd(uint8_t addr, REGW val) {
            registers[addr % REG_COUNT] &= val;
            return get(addr);
        }
        REGW set(uint8_t addr, REGW val) {
            registers[addr % REG_COUNT] = val;
     768:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <rf+0xc>
     76c:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <rf+0xd>
     770:	a0 91 27 01 	lds	r26, 0x0127	; 0x800127 <rf+0xe>
     774:	b0 91 28 01 	lds	r27, 0x0128	; 0x800128 <rf+0xf>
     778:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <rf+0x4>
     77c:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <rf+0x5>
     780:	a0 93 1f 01 	sts	0x011F, r26	; 0x80011f <rf+0x6>
     784:	b0 93 20 01 	sts	0x0120, r27	; 0x800120 <rf+0x7>
_ZN9regfile_cImLj12EE5gethlEh15register_half_t():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:75
            registers[addr % REG_COUNT] = o;
            return o;
        }

        REGW gethl(uint8_t addr, register_half_t half) {
            REGW v = registers[addr % REG_COUNT];
     788:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <rf+0x20>
     78c:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <rf+0x21>
     790:	a0 91 3b 01 	lds	r26, 0x013B	; 0x80013b <rf+0x22>
     794:	b0 91 3c 01 	lds	r27, 0x013C	; 0x80013c <rf+0x23>
sethl():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:67
            } else {
                i <<= (sz * 4);
            }
            REGW o = registers[addr % REG_COUNT];

            o &= mask;
     798:	ac 01       	movw	r20, r24
     79a:	bd 01       	movw	r22, r26
     79c:	66 27       	eor	r22, r22
     79e:	77 27       	eor	r23, r23
doSecondWork():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:137
                rf.set(REG_ON_REMAINING,rf.get(REG_ON_REM_RESETVAL));
                rf.sethl(REG_FIRECOUNTS,rf.gethl(REG_FIRECOUNTS,register_top)+1,register_top);
     7a0:	88 27       	eor	r24, r24
     7a2:	99 27       	eor	r25, r25
sethl():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:68
            o |= i;
     7a4:	11 96       	adiw	r26, 0x01	; 1
     7a6:	84 2b       	or	r24, r20
     7a8:	95 2b       	or	r25, r21
     7aa:	a6 2b       	or	r26, r22
     7ac:	b7 2b       	or	r27, r23
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:70

            registers[addr % REG_COUNT] = o;
     7ae:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <rf+0x20>
     7b2:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <rf+0x21>
     7b6:	a0 93 3b 01 	sts	0x013B, r26	; 0x80013b <rf+0x22>
     7ba:	b0 93 3c 01 	sts	0x013C, r27	; 0x80013c <rf+0x23>
_ZN9regfile_cImLj12EE3setEhm():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:99
        REGW setAnd(uint8_t addr, REGW val) {
            registers[addr % REG_COUNT] &= val;
            return get(addr);
        }
        REGW set(uint8_t addr, REGW val) {
            registers[addr % REG_COUNT] = val;
     7be:	c0 92 19 01 	sts	0x0119, r12	; 0x800119 <rf>
     7c2:	d0 92 1a 01 	sts	0x011A, r13	; 0x80011a <rf+0x1>
     7c6:	e0 92 1b 01 	sts	0x011B, r14	; 0x80011b <rf+0x2>
     7ca:	f0 92 1c 01 	sts	0x011C, r15	; 0x80011c <rf+0x3>
doSecondWork():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:153
    rf.set(REG_STATUS,s);

    if (true) {
          // NB the power pin has negative polarity
          ////digitalWrite(PIN_PWR,      !(s & _BV(STAT_PWR_ON)));
          if (~s & _BV(STAT_PWR_ON)) { digitalWrite(PIN_PWR, 1); } //Turn power off
     7ce:	8f ef       	ldi	r24, 0xFF	; 255
     7d0:	c5 fc       	sbrc	r12, 5
     7d2:	b9 c0       	rjmp	.+370    	; 0x946 <doTickWork()+0x3d6>
     7d4:	61 e0       	ldi	r22, 0x01	; 1
     7d6:	83 e0       	ldi	r24, 0x03	; 3
     7d8:	f4 dc       	rcall	.-1560   	; 0x1c2 <digitalWrite>
dump():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:44
        void clear() {
          for (uint8_t i=0;i<REG_COUNT;i++) registers[i] = 0;
        };

        void dump() {
            if (ser) {
     7da:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <rf+0x30>
     7de:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <rf+0x31>
     7e2:	00 97       	sbiw	r24, 0x00	; 0
     7e4:	09 f4       	brne	.+2      	; 0x7e8 <doTickWork()+0x278>
     7e6:	76 c1       	rjmp	.+748    	; 0xad4 <doTickWork()+0x564>
print():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/Print.cpp:53
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
     7e8:	61 e9       	ldi	r22, 0x91	; 145
     7ea:	70 e0       	ldi	r23, 0x00	; 0
     7ec:	3a de       	rcall	.-908    	; 0x462 <Print::write(char const*)>
     7ee:	59 e1       	ldi	r21, 0x19	; 25
     7f0:	a5 2e       	mov	r10, r21
     7f2:	51 e0       	ldi	r21, 0x01	; 1
     7f4:	b5 2e       	mov	r11, r21
_Z10doTickWorkv():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:46
                ser->print("[ ");
                for (uint8_t i=0; i< REG_COUNT; i++) {
     7f6:	c0 e0       	ldi	r28, 0x00	; 0
print():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/Print.cpp:53
     7f8:	64 e9       	ldi	r22, 0x94	; 148
     7fa:	70 e0       	ldi	r23, 0x00	; 0
     7fc:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <rf+0x30>
     800:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <rf+0x31>
     804:	2e de       	rcall	.-932    	; 0x462 <Print::write(char const*)>
dump():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:48
                    ser->print("0x");
                    pp32hex(registers[i]);
     806:	f5 01       	movw	r30, r10
     808:	41 90       	ld	r4, Z+
     80a:	51 90       	ld	r5, Z+
     80c:	61 90       	ld	r6, Z+
     80e:	71 90       	ld	r7, Z+
     810:	5f 01       	movw	r10, r30
     812:	08 e1       	ldi	r16, 0x18	; 24
     814:	10 e0       	ldi	r17, 0x00	; 0
_ZN9regfile_cImLj12EE6pp8hexEh.isra.7():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:19
class regfile_c {
    private:
        REGW registers[REG_COUNT];
        Stream *ser;
        void pp8hex(uint8_t i) {
            if (ser) {
     816:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <rf+0x30>
     81a:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <rf+0x31>
     81e:	00 97       	sbiw	r24, 0x00	; 0
     820:	d9 f0       	breq	.+54     	; 0x858 <doTickWork()+0x2e8>
pp32hex():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:27
            }
        }
        void pp32hex(REGW i) {
            uint8_t j = sizeof(REGW);
            while (j) {
                pp8hex((uint8_t)((i >> ((j-1)*8)) & 0xff));
     822:	73 01       	movw	r14, r6
     824:	62 01       	movw	r12, r4
     826:	00 2e       	mov	r0, r16
     828:	04 c0       	rjmp	.+8      	; 0x832 <doTickWork()+0x2c2>
     82a:	f6 94       	lsr	r15
     82c:	e7 94       	ror	r14
     82e:	d7 94       	ror	r13
     830:	c7 94       	ror	r12
     832:	0a 94       	dec	r0
     834:	d2 f7       	brpl	.-12     	; 0x82a <doTickWork()+0x2ba>
_ZN9regfile_cImLj12EE6pp8hexEh.isra.7():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:20
    private:
        REGW registers[REG_COUNT];
        Stream *ser;
        void pp8hex(uint8_t i) {
            if (ser) {
                if (i < 16) ser->print("0");
     836:	ff e0       	ldi	r31, 0x0F	; 15
     838:	fc 15       	cp	r31, r12
     83a:	18 f0       	brcs	.+6      	; 0x842 <doTickWork()+0x2d2>
print():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/Print.cpp:53
     83c:	67 e9       	ldi	r22, 0x97	; 151
     83e:	70 e0       	ldi	r23, 0x00	; 0
     840:	10 de       	rcall	.-992    	; 0x462 <Print::write(char const*)>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/Print.cpp:95
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
     842:	b7 01       	movw	r22, r14
     844:	a6 01       	movw	r20, r12
     846:	55 27       	eor	r21, r21
     848:	66 27       	eor	r22, r22
     84a:	77 27       	eor	r23, r23
     84c:	20 e1       	ldi	r18, 0x10	; 16
     84e:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <rf+0x30>
     852:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <rf+0x31>
     856:	14 de       	rcall	.-984    	; 0x480 <Print::printNumber(unsigned long, unsigned char)>
     858:	08 50       	subi	r16, 0x08	; 8
     85a:	11 09       	sbc	r17, r1
pp32hex():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:26
                ser->print(i,HEX);
            }
        }
        void pp32hex(REGW i) {
            uint8_t j = sizeof(REGW);
            while (j) {
     85c:	08 3f       	cpi	r16, 0xF8	; 248
     85e:	2f ef       	ldi	r18, 0xFF	; 255
     860:	12 07       	cpc	r17, r18
     862:	c9 f6       	brne	.-78     	; 0x816 <doTickWork()+0x2a6>
     864:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <rf+0x30>
     868:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <rf+0x31>
dump():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:49
            if (ser) {
                ser->print("[ ");
                for (uint8_t i=0; i< REG_COUNT; i++) {
                    ser->print("0x");
                    pp32hex(registers[i]);
                    if (i < (REG_COUNT-1)) ser->print(", ");
     86c:	cb 30       	cpi	r28, 0x0B	; 11
     86e:	19 f0       	breq	.+6      	; 0x876 <doTickWork()+0x306>
print():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/Print.cpp:53
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
     870:	69 e9       	ldi	r22, 0x99	; 153
     872:	70 e0       	ldi	r23, 0x00	; 0
     874:	f6 dd       	rcall	.-1044   	; 0x462 <Print::write(char const*)>
dump():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:46
        };

        void dump() {
            if (ser) {
                ser->print("[ ");
                for (uint8_t i=0; i< REG_COUNT; i++) {
     876:	cf 5f       	subi	r28, 0xFF	; 255
     878:	cc 30       	cpi	r28, 0x0C	; 12
     87a:	09 f0       	breq	.+2      	; 0x87e <doTickWork()+0x30e>
     87c:	bd cf       	rjmp	.-134    	; 0x7f8 <doTickWork()+0x288>
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:51
                    ser->print("0x");
                    pp32hex(registers[i]);
                    if (i < (REG_COUNT-1)) ser->print(", ");
                }
                ser->println(" ]");
     87e:	6c e9       	ldi	r22, 0x9C	; 156
     880:	70 e0       	ldi	r23, 0x00	; 0
     882:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <rf+0x30>
     886:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <rf+0x31>
_Z10doTickWorkv():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:190
    }
   
    adcreader.doRead();
    return;

}
     88a:	cf 91       	pop	r28
     88c:	1f 91       	pop	r17
     88e:	0f 91       	pop	r16
     890:	ff 90       	pop	r15
     892:	ef 90       	pop	r14
     894:	df 90       	pop	r13
     896:	cf 90       	pop	r12
     898:	bf 90       	pop	r11
     89a:	af 90       	pop	r10
     89c:	9f 90       	pop	r9
     89e:	8f 90       	pop	r8
     8a0:	7f 90       	pop	r7
     8a2:	6f 90       	pop	r6
     8a4:	5f 90       	pop	r5
     8a6:	4f 90       	pop	r4
dump():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:51
     8a8:	3e ce       	rjmp	.-900    	; 0x526 <Print::println(char const*)>
doSecondWork():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:105
            srl.println("Powering off pi.");
            #endif
            s |=  _BV(STAT_WDOG_FIRED);
            s &= ~(_BV(STAT_WDOG_FIRE_CODE) | _BV(STAT_WDOG_FIRE_CODE+1));                        //00b - on-remaining timer expired 
            if (a_under && b_under) s |= (_BV(STAT_WDOG_FIRE_CODE) | _BV(STAT_WDOG_FIRE_CODE+1)); //11b - vsensb & vsensb dropped below threshold 
            else if (a_under)       s |= _BV(STAT_WDOG_FIRE_CODE);                                //01b - vsensa dropped below threshold
     8aa:	82 e8       	ldi	r24, 0x82	; 130
     8ac:	c8 2a       	or	r12, r24
     8ae:	e8 ce       	rjmp	.-560    	; 0x680 <doTickWork()+0x110>
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:106
            else if (b_under)       s |= _BV(STAT_WDOG_FIRE_CODE+1);                              //10b - vsensb dropped below threshold
     8b0:	c1 11       	cpse	r28, r1
     8b2:	03 c0       	rjmp	.+6      	; 0x8ba <doTickWork()+0x34a>
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:103
        if ( !on_rem || a_under || b_under) {
            #ifdef SERIAL_DEBUG
            srl.println("Powering off pi.");
            #endif
            s |=  _BV(STAT_WDOG_FIRED);
            s &= ~(_BV(STAT_WDOG_FIRE_CODE) | _BV(STAT_WDOG_FIRE_CODE+1));                        //00b - on-remaining timer expired 
     8b4:	68 94       	set
     8b6:	c1 f8       	bld	r12, 1
     8b8:	e3 ce       	rjmp	.-570    	; 0x680 <doTickWork()+0x110>
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:106
            if (a_under && b_under) s |= (_BV(STAT_WDOG_FIRE_CODE) | _BV(STAT_WDOG_FIRE_CODE+1)); //11b - vsensb & vsensb dropped below threshold 
            else if (a_under)       s |= _BV(STAT_WDOG_FIRE_CODE);                                //01b - vsensa dropped below threshold
            else if (b_under)       s |= _BV(STAT_WDOG_FIRE_CODE+1);                              //10b - vsensb dropped below threshold
     8ba:	68 94       	set
     8bc:	c1 f8       	bld	r12, 1
     8be:	d0 f8       	bld	r13, 0
     8c0:	df ce       	rjmp	.-578    	; 0x680 <doTickWork()+0x110>
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:113
            s &= ~_BV(STAT_PWR_ON);
            s &= ~_BV(STAT_LED_WARN);
            rf.set(REG_OFF_REMAINING,rf.get(REG_OFF_REM_RESETVAL));
            rf.sethl(REG_FIRECOUNTS,rf.gethl(REG_FIRECOUNTS,register_bottom)+1,register_bottom);
        } else {
            if (on_rem < WARN_SECS) s |= _BV(STAT_LED_WARN);
     8c2:	8e 31       	cpi	r24, 0x1E	; 30
     8c4:	91 05       	cpc	r25, r1
     8c6:	a1 05       	cpc	r26, r1
     8c8:	b1 05       	cpc	r27, r1
     8ca:	10 f4       	brcc	.+4      	; 0x8d0 <doTickWork()+0x360>
     8cc:	68 94       	set
     8ce:	c6 f8       	bld	r12, 6
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:114
            rf.set(REG_ON_REMAINING,on_rem-1);
     8d0:	01 97       	sbiw	r24, 0x01	; 1
     8d2:	a1 09       	sbc	r26, r1
     8d4:	b1 09       	sbc	r27, r1
_ZN9regfile_cImLj12EE3setEhm():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:99
        REGW setAnd(uint8_t addr, REGW val) {
            registers[addr % REG_COUNT] &= val;
            return get(addr);
        }
        REGW set(uint8_t addr, REGW val) {
            registers[addr % REG_COUNT] = val;
     8d6:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <rf+0x4>
     8da:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <rf+0x5>
     8de:	a0 93 1f 01 	sts	0x011F, r26	; 0x80011f <rf+0x6>
     8e2:	b0 93 20 01 	sts	0x0120, r27	; 0x800120 <rf+0x7>
     8e6:	fd ce       	rjmp	.-518    	; 0x6e2 <doTickWork()+0x172>
_ZN9regfile_cImLj12EE5gethlEh15register_half_t():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:78

        REGW gethl(uint8_t addr, register_half_t half) {
            REGW v = registers[addr % REG_COUNT];
            size_t sz = sizeof(REGW);
            if (half != register_bottom) {
                v >>= (sz * 4);
     8e8:	ab 01       	movw	r20, r22
     8ea:	66 27       	eor	r22, r22
     8ec:	77 27       	eor	r23, r23
doSecondWork():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:125
            reg_t a_on_thresh = rf.gethl(REG_VSENSE_ON_THRESHOLD,register_top);
            reg_t b_on_thresh = rf.gethl(REG_VSENSE_ON_THRESHOLD,register_bottom); 
            bool a_over = rf.gethl(REG_VSENSA_VSENSB,register_top) >= a_on_thresh;
            bool b_over = rf.gethl(REG_VSENSA_VSENSB,register_bottom) >= b_on_thresh;
            bool enable = (!a_on_thresh && !b_on_thresh)                   || 
                          (a_on_thresh && a_over && b_on_thresh && b_over) || 
     8ee:	40 17       	cp	r20, r16
     8f0:	51 07       	cpc	r21, r17
     8f2:	62 07       	cpc	r22, r18
     8f4:	73 07       	cpc	r23, r19
     8f6:	08 f0       	brcs	.+2      	; 0x8fa <doTickWork()+0x38a>
     8f8:	24 cf       	rjmp	.-440    	; 0x742 <doTickWork()+0x1d2>
_ZN9regfile_cImLj12EE3setEhm():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:99
        REGW setAnd(uint8_t addr, REGW val) {
            registers[addr % REG_COUNT] &= val;
            return get(addr);
        }
        REGW set(uint8_t addr, REGW val) {
            registers[addr % REG_COUNT] = val;
     8fa:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <rf+0x10>
     8fe:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <rf+0x11>
     902:	a0 91 2b 01 	lds	r26, 0x012B	; 0x80012b <rf+0x12>
     906:	b0 91 2c 01 	lds	r27, 0x012C	; 0x80012c <rf+0x13>
     90a:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <rf+0x8>
     90e:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <rf+0x9>
     912:	a0 93 23 01 	sts	0x0123, r26	; 0x800123 <rf+0xa>
     916:	b0 93 24 01 	sts	0x0124, r27	; 0x800124 <rf+0xb>
doSecondWork():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:140
                s &= ~_BV(STAT_WDOG_FIRED);
                rf.set(REG_ON_REMAINING,rf.get(REG_ON_REM_RESETVAL));
                rf.sethl(REG_FIRECOUNTS,rf.gethl(REG_FIRECOUNTS,register_top)+1,register_top);
            } else if ( a_on_thresh || b_on_thresh ) {
              rf.set(REG_OFF_REMAINING,rf.get(REG_OFF_REM_RESETVAL));
              s &= ~_BV(STAT_LED_WARN);
     91a:	e8 94       	clt
     91c:	c6 f8       	bld	r12, 6
     91e:	4f cf       	rjmp	.-354    	; 0x7be <doTickWork()+0x24e>
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:143
            }
        } else {
            if (off_rem < WARN_SECS) s |= _BV(STAT_LED_WARN);
     920:	8e 31       	cpi	r24, 0x1E	; 30
     922:	91 05       	cpc	r25, r1
     924:	a1 05       	cpc	r26, r1
     926:	b1 05       	cpc	r27, r1
     928:	10 f4       	brcc	.+4      	; 0x92e <doTickWork()+0x3be>
     92a:	68 94       	set
     92c:	c6 f8       	bld	r12, 6
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:144
            rf.set(REG_OFF_REMAINING,off_rem-1);
     92e:	01 97       	sbiw	r24, 0x01	; 1
     930:	a1 09       	sbc	r26, r1
     932:	b1 09       	sbc	r27, r1
_ZN9regfile_cImLj12EE3setEhm():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:99
     934:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <rf+0x8>
     938:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <rf+0x9>
     93c:	a0 93 23 01 	sts	0x0123, r26	; 0x800123 <rf+0xa>
     940:	b0 93 24 01 	sts	0x0124, r27	; 0x800124 <rf+0xb>
     944:	3c cf       	rjmp	.-392    	; 0x7be <doTickWork()+0x24e>
doSecondWork():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:157
          ////digitalWrite(PIN_PWR,      !(s & _BV(STAT_PWR_ON)));
          if (~s & _BV(STAT_PWR_ON)) { digitalWrite(PIN_PWR, 1); } //Turn power off
          else { //Feather the power pin on
            uint32_t dummy = 0;
            for (uint8_t i=0;i<255;i++) {
                PORTA |= B10000000; //OFF
     946:	df 9a       	sbi	0x1b, 7	; 27
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:159
                for (uint8_t j=0;j<i;j++) { dummy++; } //Increasing delay
                PORTA &= B01111111; //ON
     948:	df 98       	cbi	0x1b, 7	; 27
     94a:	81 50       	subi	r24, 0x01	; 1
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:156
          // NB the power pin has negative polarity
          ////digitalWrite(PIN_PWR,      !(s & _BV(STAT_PWR_ON)));
          if (~s & _BV(STAT_PWR_ON)) { digitalWrite(PIN_PWR, 1); } //Turn power off
          else { //Feather the power pin on
            uint32_t dummy = 0;
            for (uint8_t i=0;i<255;i++) {
     94c:	e1 f7       	brne	.-8      	; 0x946 <doTickWork()+0x3d6>
     94e:	45 cf       	rjmp	.-374    	; 0x7da <doTickWork()+0x26a>
doRead():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/adcReader.h:37
        //
        uint8_t doRead() {
            reg_names_t r = _REG_INVALID;
            reg_t v       = 0xdeadbeef;
            register_half_t h = register_bottom;
            switch (next % 6) {
     950:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <adcreader>
     954:	66 e0       	ldi	r22, 0x06	; 6
     956:	61 d3       	rcall	.+1730   	; 0x101a <__udivmodqi4>
     958:	93 30       	cpi	r25, 0x03	; 3
     95a:	09 f4       	brne	.+2      	; 0x95e <doTickWork()+0x3ee>
     95c:	61 c0       	rjmp	.+194    	; 0xa20 <doTickWork()+0x4b0>
     95e:	78 f5       	brcc	.+94     	; 0x9be <doTickWork()+0x44e>
     960:	91 30       	cpi	r25, 0x01	; 1
     962:	e9 f1       	breq	.+122    	; 0x9de <doTickWork()+0x46e>
     964:	92 30       	cpi	r25, 0x02	; 2
     966:	09 f4       	brne	.+2      	; 0x96a <doTickWork()+0x3fa>
     968:	45 c0       	rjmp	.+138    	; 0x9f4 <doTickWork()+0x484>
_ZN11adcReader_cI9regfile_cImLj12EELh1ELh16EE11readOwnTempEv.isra.4():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/adcReader.h:87
            next += 1;
            return next;
        };

        uint16_t readOwnTemp() {
            ADMUX   = B100010; // select temp sensor
     96a:	82 e2       	ldi	r24, 0x22	; 34
     96c:	87 b9       	out	0x07, r24	; 7
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/adcReader.h:90
            // ADMUX  &= ~_BV(ADLAR);
            // select 1.1 volt reference
            ADMUX  |=  _BV(REFS1); 
     96e:	3f 9a       	sbi	0x07, 7	; 7
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/adcReader.h:91
            ADMUX  &= ~_BV(REFS0);
     970:	3e 98       	cbi	0x07, 6	; 7
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/adcReader.h:92
            delay(2);
     972:	62 e0       	ldi	r22, 0x02	; 2
     974:	70 e0       	ldi	r23, 0x00	; 0
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	c4 dc       	rcall	.-1656   	; 0x304 <delay>
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/adcReader.h:94
            // no interrupts and no auto-trigger
            ADCSRA &= ~(_BV(ADATE) | _BV(ADIE));
     97c:	86 b1       	in	r24, 0x06	; 6
     97e:	87 7d       	andi	r24, 0xD7	; 215
     980:	86 b9       	out	0x06, r24	; 6
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/adcReader.h:96
            // turn her on and start a conversion
            ADCSRA |= _BV(ADEN);
     982:	37 9a       	sbi	0x06, 7	; 6
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/adcReader.h:97
            ADCSRA |= _BV(ADSC);
     984:	36 9a       	sbi	0x06, 6	; 6
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/adcReader.h:98
            delay(2);
     986:	62 e0       	ldi	r22, 0x02	; 2
     988:	70 e0       	ldi	r23, 0x00	; 0
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	ba dc       	rcall	.-1676   	; 0x304 <delay>
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/adcReader.h:99
            while (bit_is_set(ADCSRA,ADSC));
     990:	36 99       	sbic	0x06, 6	; 6
     992:	fe cf       	rjmp	.-4      	; 0x990 <doTickWork()+0x420>
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/adcReader.h:101
            // supposed to read ADCL first, then ADCH
            uint16_t ov = ADCL;
     994:	c4 b0       	in	r12, 0x04	; 4
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/adcReader.h:102
            ov |= (ADCH << 8);
     996:	85 b1       	in	r24, 0x05	; 5
     998:	d8 2e       	mov	r13, r24
doRead():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/adcReader.h:42
            switch (next % 6) {
                 
                case 0 :
                    r = REG_TEMP_V33;
                    h = register_top;
                    v = avg_temp.update(readOwnTemp());
     99a:	f1 2c       	mov	r15, r1
     99c:	e1 2c       	mov	r14, r1
_Z10doTickWorkv():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/adcReader.h:41
            register_half_t h = register_bottom;
            switch (next % 6) {
                 
                case 0 :
                    r = REG_TEMP_V33;
                    h = register_top;
     99e:	81 e0       	ldi	r24, 0x01	; 1
     9a0:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/adcReader.h:45
                    v = avg_temp.update(readOwnTemp());
                    break;
                case 1 :
                    r = REG_TEMP_V33;
     9a2:	45 e0       	ldi	r20, 0x05	; 5
     9a4:	50 e0       	ldi	r21, 0x00	; 0
doRead():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/adcReader.h:81
                    analogReference(INTERNAL1V1);
                    v = avg_vcc_sw.update(analogRead(A2));
                    break;
            } 
            
            if (r != _REG_INVALID) rf.sethl(r,v,h);
     9a6:	60 91 e1 00 	lds	r22, 0x00E1	; 0x8000e1 <adcreader+0x1>
     9aa:	70 91 e2 00 	lds	r23, 0x00E2	; 0x8000e2 <adcreader+0x2>
sethl():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:60
        REGW sethl(uint8_t addr, REGW i, register_half_t half) {
            size_t sz = sizeof(REGW);
            REGW mask = ~0; // all ones
            mask >>= (sz * 4);
            i &= mask;
            if (half == register_bottom) {
     9ae:	89 2b       	or	r24, r25
     9b0:	09 f0       	breq	.+2      	; 0x9b4 <doTickWork()+0x444>
     9b2:	6d c0       	rjmp	.+218    	; 0xa8e <doTickWork()+0x51e>
_Z10doTickWorkv():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:61
                mask <<= (sz * 4);
     9b4:	00 e0       	ldi	r16, 0x00	; 0
     9b6:	10 e0       	ldi	r17, 0x00	; 0
     9b8:	2f ef       	ldi	r18, 0xFF	; 255
     9ba:	3f ef       	ldi	r19, 0xFF	; 255
     9bc:	6f c0       	rjmp	.+222    	; 0xa9c <doTickWork()+0x52c>
doRead():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/adcReader.h:37
        //
        uint8_t doRead() {
            reg_names_t r = _REG_INVALID;
            reg_t v       = 0xdeadbeef;
            register_half_t h = register_bottom;
            switch (next % 6) {
     9be:	94 30       	cpi	r25, 0x04	; 4
     9c0:	09 f4       	brne	.+2      	; 0x9c4 <doTickWork()+0x454>
     9c2:	43 c0       	rjmp	.+134    	; 0xa4a <doTickWork()+0x4da>
     9c4:	95 30       	cpi	r25, 0x05	; 5
     9c6:	89 f6       	brne	.-94     	; 0x96a <doTickWork()+0x3fa>
analogReference():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_analog.c:45
{
  // can't actually set the register here because the default setting
  // will connect AVCC and the AREF pin, which would cause a short if
  // there's something connected to AREF.
  // fix? Validate the mode?
  analog_reference = mode;
     9c8:	82 e0       	ldi	r24, 0x02	; 2
     9ca:	80 93 fe 00 	sts	0x00FE, r24	; 0x8000fe <analog_reference>
doRead():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/adcReader.h:77
                    break;
                case 5 :
                    r = REG_V5_V5SWTCH;
                    h = register_bottom;
                    analogReference(INTERNAL1V1);
                    v = avg_vcc_sw.update(analogRead(A2));
     9ce:	82 e8       	ldi	r24, 0x82	; 130
     9d0:	64 dc       	rcall	.-1848   	; 0x29a <analogRead>
     9d2:	6c 01       	movw	r12, r24
     9d4:	f1 2c       	mov	r15, r1
     9d6:	e1 2c       	mov	r14, r1
_Z10doTickWorkv():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/adcReader.h:75
                    h = register_top;
                    v = avg_vcc.update(readOwnVCC());
                    break;
                case 5 :
                    r = REG_V5_V5SWTCH;
                    h = register_bottom;
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	80 e0       	ldi	r24, 0x00	; 0
     9dc:	55 c0       	rjmp	.+170    	; 0xa88 <doTickWork()+0x518>
analogReference():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_analog.c:45
     9de:	82 e0       	ldi	r24, 0x02	; 2
     9e0:	80 93 fe 00 	sts	0x00FE, r24	; 0x8000fe <analog_reference>
doRead():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/adcReader.h:48
                    break;
                case 1 :
                    r = REG_TEMP_V33;
                    h = register_bottom;
                    analogReference(INTERNAL1V1);
                    v = avg_vcc_sw.update(analogRead(A3));
     9e4:	83 e8       	ldi	r24, 0x83	; 131
     9e6:	59 dc       	rcall	.-1870   	; 0x29a <analogRead>
     9e8:	6c 01       	movw	r12, r24
     9ea:	f1 2c       	mov	r15, r1
     9ec:	e1 2c       	mov	r14, r1
_Z10doTickWorkv():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/adcReader.h:46
                    h = register_top;
                    v = avg_temp.update(readOwnTemp());
                    break;
                case 1 :
                    r = REG_TEMP_V33;
                    h = register_bottom;
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	d7 cf       	rjmp	.-82     	; 0x9a2 <doTickWork()+0x432>
analogReference():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_analog.c:45
     9f4:	90 93 fe 00 	sts	0x00FE, r25	; 0x8000fe <analog_reference>
doRead():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/adcReader.h:54
                    break;
                case 2 :
                    r = REG_VSENSA_VSENSB;
                    h = register_top;
                    analogReference(INTERNAL1V1);
                    v = avg_vbat.update(analogRead(A0));
     9f8:	80 e8       	ldi	r24, 0x80	; 128
     9fa:	4f dc       	rcall	.-1890   	; 0x29a <analogRead>
     9fc:	6c 01       	movw	r12, r24
     9fe:	f1 2c       	mov	r15, r1
     a00:	e1 2c       	mov	r14, r1
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/adcReader.h:56
                    //
                    if (ser) { ser->print(v,DEC); }
     a02:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <adcreader+0x3>
     a06:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <adcreader+0x4>
     a0a:	00 97       	sbiw	r24, 0x00	; 0
     a0c:	21 f0       	breq	.+8      	; 0xa16 <doTickWork()+0x4a6>
print():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/Print.cpp:95
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
     a0e:	2a e0       	ldi	r18, 0x0A	; 10
     a10:	b7 01       	movw	r22, r14
     a12:	a6 01       	movw	r20, r12
     a14:	35 dd       	rcall	.-1430   	; 0x480 <Print::printNumber(unsigned long, unsigned char)>
_Z10doTickWorkv():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/adcReader.h:52
                    analogReference(INTERNAL1V1);
                    v = avg_vcc_sw.update(analogRead(A3));
                    break;
                case 2 :
                    r = REG_VSENSA_VSENSB;
                    h = register_top;
     a16:	81 e0       	ldi	r24, 0x01	; 1
     a18:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/adcReader.h:60
                    //
                    if (ser) { ser->print(v,DEC); }
                    //
                    break;
                case 3 :
                    r = REG_VSENSA_VSENSB;
     a1a:	46 e0       	ldi	r20, 0x06	; 6
     a1c:	50 e0       	ldi	r21, 0x00	; 0
     a1e:	c3 cf       	rjmp	.-122    	; 0x9a6 <doTickWork()+0x436>
analogReference():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_analog.c:45
     a20:	82 e0       	ldi	r24, 0x02	; 2
     a22:	80 93 fe 00 	sts	0x00FE, r24	; 0x8000fe <analog_reference>
doRead():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/adcReader.h:63
                    h = register_bottom;
                    analogReference(INTERNAL1V1);
                    v = avg_vbat.update(analogRead(A1));
     a26:	81 e8       	ldi	r24, 0x81	; 129
     a28:	38 dc       	rcall	.-1936   	; 0x29a <analogRead>
     a2a:	6c 01       	movw	r12, r24
     a2c:	f1 2c       	mov	r15, r1
     a2e:	e1 2c       	mov	r14, r1
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/adcReader.h:65
                    //
                    if (ser) { ser->print(v,DEC); }
     a30:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <adcreader+0x3>
     a34:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <adcreader+0x4>
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	21 f0       	breq	.+8      	; 0xa44 <doTickWork()+0x4d4>
print():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/Print.cpp:95
     a3c:	2a e0       	ldi	r18, 0x0A	; 10
     a3e:	b7 01       	movw	r22, r14
     a40:	a6 01       	movw	r20, r12
     a42:	1e dd       	rcall	.-1476   	; 0x480 <Print::printNumber(unsigned long, unsigned char)>
_Z10doTickWorkv():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/adcReader.h:61
                    if (ser) { ser->print(v,DEC); }
                    //
                    break;
                case 3 :
                    r = REG_VSENSA_VSENSB;
                    h = register_bottom;
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	e8 cf       	rjmp	.-48     	; 0xa1a <doTickWork()+0x4aa>
_ZN11adcReader_cI9regfile_cImLj12EELh1ELh16EE10readOwnVCCEv.isra.6():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/adcReader.h:108
            return ov;
        }

        uint16_t readOwnVCC() {
            uint32_t result;
            ADMUX = _BV(MUX5) | _BV(MUX0);
     a4a:	81 e2       	ldi	r24, 0x21	; 33
     a4c:	87 b9       	out	0x07, r24	; 7
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/adcReader.h:109
            delay(2);
     a4e:	62 e0       	ldi	r22, 0x02	; 2
     a50:	70 e0       	ldi	r23, 0x00	; 0
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	56 dc       	rcall	.-1876   	; 0x304 <delay>
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/adcReader.h:110
            ADCSRA |= _BV(ADSC);
     a58:	36 9a       	sbi	0x06, 6	; 6
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/adcReader.h:111
            while (bit_is_set(ADCSRA,ADSC));
     a5a:	36 99       	sbic	0x06, 6	; 6
     a5c:	fe cf       	rjmp	.-4      	; 0xa5a <doTickWork()+0x4ea>
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/adcReader.h:112
            result = ADCL;
     a5e:	84 b1       	in	r24, 0x04	; 4
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/adcReader.h:113
            result |= ADCH << 8;
     a60:	25 b1       	in	r18, 0x05	; 5
     a62:	30 e0       	ldi	r19, 0x00	; 0
     a64:	32 2f       	mov	r19, r18
     a66:	22 27       	eor	r18, r18
     a68:	03 2e       	mov	r0, r19
     a6a:	00 0c       	add	r0, r0
     a6c:	44 0b       	sbc	r20, r20
     a6e:	55 0b       	sbc	r21, r21
     a70:	28 2b       	or	r18, r24
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/adcReader.h:115
            // reading directly in mV
            result = 1126400L / result;
     a72:	60 e0       	ldi	r22, 0x00	; 0
     a74:	70 e3       	ldi	r23, 0x30	; 48
     a76:	81 e1       	ldi	r24, 0x11	; 17
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	db d2       	rcall	.+1462   	; 0x1032 <__udivmodsi4>
     a7c:	69 01       	movw	r12, r18
     a7e:	7a 01       	movw	r14, r20
     a80:	ee 24       	eor	r14, r14
     a82:	ff 24       	eor	r15, r15
_Z10doTickWorkv():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/adcReader.h:70
                    if (ser) { ser->print(v,DEC); }
                    //
                    break;
                case 4 :
                    r = REG_V5_V5SWTCH;
                    h = register_top;
     a84:	81 e0       	ldi	r24, 0x01	; 1
     a86:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/adcReader.h:74
                    v = avg_vcc.update(readOwnVCC());
                    break;
                case 5 :
                    r = REG_V5_V5SWTCH;
     a88:	47 e0       	ldi	r20, 0x07	; 7
     a8a:	50 e0       	ldi	r21, 0x00	; 0
     a8c:	8c cf       	rjmp	.-232    	; 0x9a6 <doTickWork()+0x436>
sethl():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:63
            } else {
                i <<= (sz * 4);
     a8e:	76 01       	movw	r14, r12
     a90:	dd 24       	eor	r13, r13
     a92:	cc 24       	eor	r12, r12
_Z10doTickWorkv():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:58
        }

        REGW sethl(uint8_t addr, REGW i, register_half_t half) {
            size_t sz = sizeof(REGW);
            REGW mask = ~0; // all ones
            mask >>= (sz * 4);
     a94:	0f ef       	ldi	r16, 0xFF	; 255
     a96:	1f ef       	ldi	r17, 0xFF	; 255
     a98:	20 e0       	ldi	r18, 0x00	; 0
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	44 0f       	add	r20, r20
     a9e:	55 1f       	adc	r21, r21
     aa0:	44 0f       	add	r20, r20
     aa2:	55 1f       	adc	r21, r21
     aa4:	fb 01       	movw	r30, r22
     aa6:	e4 0f       	add	r30, r20
     aa8:	f5 1f       	adc	r31, r21
sethl():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:65
            if (half == register_bottom) {
                mask <<= (sz * 4);
            } else {
                i <<= (sz * 4);
            }
            REGW o = registers[addr % REG_COUNT];
     aaa:	80 81       	ld	r24, Z
     aac:	91 81       	ldd	r25, Z+1	; 0x01
     aae:	a2 81       	ldd	r26, Z+2	; 0x02
     ab0:	b3 81       	ldd	r27, Z+3	; 0x03
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:67

            o &= mask;
     ab2:	80 23       	and	r24, r16
     ab4:	91 23       	and	r25, r17
     ab6:	a2 23       	and	r26, r18
     ab8:	b3 23       	and	r27, r19
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:68
            o |= i;
     aba:	8c 29       	or	r24, r12
     abc:	9d 29       	or	r25, r13
     abe:	ae 29       	or	r26, r14
     ac0:	bf 29       	or	r27, r15
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:70

            registers[addr % REG_COUNT] = o;
     ac2:	80 83       	st	Z, r24
     ac4:	91 83       	std	Z+1, r25	; 0x01
     ac6:	a2 83       	std	Z+2, r26	; 0x02
     ac8:	b3 83       	std	Z+3, r27	; 0x03
doRead():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/adcReader.h:82
                    v = avg_vcc_sw.update(analogRead(A2));
                    break;
            } 
            
            if (r != _REG_INVALID) rf.sethl(r,v,h);
            next += 1;
     aca:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <adcreader>
     ace:	8f 5f       	subi	r24, 0xFF	; 255
     ad0:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <adcreader>
_Z10doTickWorkv():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:190
    }
   
    adcreader.doRead();
    return;

}
     ad4:	cf 91       	pop	r28
     ad6:	1f 91       	pop	r17
     ad8:	0f 91       	pop	r16
     ada:	ff 90       	pop	r15
     adc:	ef 90       	pop	r14
     ade:	df 90       	pop	r13
     ae0:	cf 90       	pop	r12
     ae2:	bf 90       	pop	r11
     ae4:	af 90       	pop	r10
     ae6:	9f 90       	pop	r9
     ae8:	8f 90       	pop	r8
     aea:	7f 90       	pop	r7
     aec:	6f 90       	pop	r6
     aee:	5f 90       	pop	r5
     af0:	4f 90       	pop	r4
     af2:	08 95       	ret

00000af4 <__vector_11>:
__vector_11():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:139
      #error "cannot find Millis() timer overflow vector"
    #endif
  #else
    #error "Millis() timer not defined!"
  #endif
  {
     af4:	1f 92       	push	r1
     af6:	0f 92       	push	r0
     af8:	0f b6       	in	r0, 0x3f	; 63
     afa:	0f 92       	push	r0
     afc:	11 24       	eor	r1, r1
     afe:	2f 93       	push	r18
     b00:	3f 93       	push	r19
     b02:	8f 93       	push	r24
     b04:	9f 93       	push	r25
     b06:	af 93       	push	r26
     b08:	bf 93       	push	r27
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:142
    // copy these to local variables so they can be stored in registers
    // (volatile variables must be read from memory on every access)
    unsigned long m = millis_timer_millis;
     b0a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <millis_timer_millis>
     b0e:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <millis_timer_millis+0x1>
     b12:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <millis_timer_millis+0x2>
     b16:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <millis_timer_millis+0x3>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:143
    unsigned char f = millis_timer_fract;
     b1a:	30 91 f9 00 	lds	r19, 0x00F9	; 0x8000f9 <millis_timer_fract>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:145

    f += FRACT_INC;
     b1e:	26 e0       	ldi	r18, 0x06	; 6
     b20:	23 0f       	add	r18, r19
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:147

    if (f >= FRACT_MAX)
     b22:	2d 37       	cpi	r18, 0x7D	; 125
     b24:	68 f1       	brcs	.+90     	; 0xb80 <__vector_11+0x8c>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:149
    {
      f -= FRACT_MAX;
     b26:	29 e8       	ldi	r18, 0x89	; 137
     b28:	23 0f       	add	r18, r19
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:151
    m += 1;
      m += MILLIS_INC;
     b2a:	03 96       	adiw	r24, 0x03	; 3
     b2c:	a1 1d       	adc	r26, r1
     b2e:	b1 1d       	adc	r27, r1
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:158
    else
    {
      m += MILLIS_INC;
    }

    millis_timer_fract = f;
     b30:	20 93 f9 00 	sts	0x00F9, r18	; 0x8000f9 <millis_timer_fract>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:159
    millis_timer_millis = m;
     b34:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <millis_timer_millis>
     b38:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <millis_timer_millis+0x1>
     b3c:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <millis_timer_millis+0x2>
     b40:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <millis_timer_millis+0x3>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:160
    millis_timer_overflow_count++;
     b44:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <millis_timer_overflow_count>
     b48:	90 91 fb 00 	lds	r25, 0x00FB	; 0x8000fb <millis_timer_overflow_count+0x1>
     b4c:	a0 91 fc 00 	lds	r26, 0x00FC	; 0x8000fc <millis_timer_overflow_count+0x2>
     b50:	b0 91 fd 00 	lds	r27, 0x00FD	; 0x8000fd <millis_timer_overflow_count+0x3>
     b54:	01 96       	adiw	r24, 0x01	; 1
     b56:	a1 1d       	adc	r26, r1
     b58:	b1 1d       	adc	r27, r1
     b5a:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <millis_timer_overflow_count>
     b5e:	90 93 fb 00 	sts	0x00FB, r25	; 0x8000fb <millis_timer_overflow_count+0x1>
     b62:	a0 93 fc 00 	sts	0x00FC, r26	; 0x8000fc <millis_timer_overflow_count+0x2>
     b66:	b0 93 fd 00 	sts	0x00FD, r27	; 0x8000fd <millis_timer_overflow_count+0x3>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:162

  }
     b6a:	bf 91       	pop	r27
     b6c:	af 91       	pop	r26
     b6e:	9f 91       	pop	r25
     b70:	8f 91       	pop	r24
     b72:	3f 91       	pop	r19
     b74:	2f 91       	pop	r18
     b76:	0f 90       	pop	r0
     b78:	0f be       	out	0x3f, r0	; 63
     b7a:	0f 90       	pop	r0
     b7c:	1f 90       	pop	r1
     b7e:	18 95       	reti
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:155
    m += 1;
      m += MILLIS_INC;
    }
    else
    {
      m += MILLIS_INC;
     b80:	02 96       	adiw	r24, 0x02	; 2
     b82:	a1 1d       	adc	r26, r1
     b84:	b1 1d       	adc	r27, r1
     b86:	d4 cf       	rjmp	.-88     	; 0xb30 <__vector_11+0x3c>

00000b88 <__vector_16>:
__vector_16():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/spislave.cpp:10

ISR(PCINT1_vect)  { 
    spislave_c::getInstance()->_ss_int();
}

ISR(USI_OVF_vect) { 
     b88:	1f 92       	push	r1
     b8a:	0f 92       	push	r0
     b8c:	0f b6       	in	r0, 0x3f	; 63
     b8e:	0f 92       	push	r0
     b90:	11 24       	eor	r1, r1
     b92:	1f 93       	push	r17
     b94:	2f 93       	push	r18
     b96:	3f 93       	push	r19
     b98:	4f 93       	push	r20
     b9a:	5f 93       	push	r21
     b9c:	6f 93       	push	r22
     b9e:	7f 93       	push	r23
     ba0:	8f 93       	push	r24
     ba2:	9f 93       	push	r25
     ba4:	af 93       	push	r26
     ba6:	bf 93       	push	r27
     ba8:	cf 93       	push	r28
     baa:	df 93       	push	r29
     bac:	ef 93       	push	r30
     bae:	ff 93       	push	r31
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/spislave.cpp:11
    spislave_c::getInstance()->_byte_int();
     bb0:	d3 db       	rcall	.-2138   	; 0x358 <spislave_c::getInstance()>
     bb2:	ec 01       	movw	r28, r24
_byte_int():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/spislave.cpp:61

};

void 
spislave_c::_byte_int() {
    uint8_t newbyte = USIDR;
     bb4:	1f b1       	in	r17, 0x0f	; 15
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/spislave.cpp:63

    USISR = _BV(USIOIF);
     bb6:	80 e4       	ldi	r24, 0x40	; 64
     bb8:	8e b9       	out	0x0e, r24	; 14
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/spislave.cpp:64
    USIDR = 0xff & (dv_out >> 24);
     bba:	89 85       	ldd	r24, Y+9	; 0x09
     bbc:	9a 85       	ldd	r25, Y+10	; 0x0a
     bbe:	ab 85       	ldd	r26, Y+11	; 0x0b
     bc0:	bc 85       	ldd	r27, Y+12	; 0x0c
     bc2:	8b 2f       	mov	r24, r27
     bc4:	99 27       	eor	r25, r25
     bc6:	aa 27       	eor	r26, r26
     bc8:	bb 27       	eor	r27, r27
     bca:	8f b9       	out	0x0f, r24	; 15
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/spislave.cpp:67

    // do not do anythign at all if the SS is not low
    if (digitalRead(PIN_SS) || (bctr < 0)) return; 
     bcc:	6d da       	rcall	.-2854   	; 0xa8 <digitalRead.constprop.0>
     bce:	89 2b       	or	r24, r25
     bd0:	41 f5       	brne	.+80     	; 0xc22 <__vector_16+0x9a>
     bd2:	2c 81       	ldd	r18, Y+4	; 0x04
     bd4:	27 fd       	sbrc	r18, 7
     bd6:	25 c0       	rjmp	.+74     	; 0xc22 <__vector_16+0x9a>
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/spislave.cpp:69

    if (!bctr) {
     bd8:	21 11       	cpse	r18, r1
     bda:	37 c0       	rjmp	.+110    	; 0xc4a <__vector_16+0xc2>
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/spislave.cpp:70
        cmd_in = newbyte;
     bdc:	1d 87       	std	Y+13, r17	; 0x0d
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/spislave.cpp:88
        psrl->print(cmd_out,HEX);
        psrl->print(" dv_out: ");
        psrl->println(dv_out,HEX);
    }

    dv_out <<= 8;
     bde:	89 85       	ldd	r24, Y+9	; 0x09
     be0:	9a 85       	ldd	r25, Y+10	; 0x0a
     be2:	ab 85       	ldd	r26, Y+11	; 0x0b
     be4:	bc 85       	ldd	r27, Y+12	; 0x0c
     be6:	ba 2f       	mov	r27, r26
     be8:	a9 2f       	mov	r26, r25
     bea:	98 2f       	mov	r25, r24
     bec:	88 27       	eor	r24, r24
     bee:	89 87       	std	Y+9, r24	; 0x09
     bf0:	9a 87       	std	Y+10, r25	; 0x0a
     bf2:	ab 87       	std	Y+11, r26	; 0x0b
     bf4:	bc 87       	std	Y+12, r27	; 0x0c
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/spislave.cpp:90
  
    if (bctr == 4) {
     bf6:	24 30       	cpi	r18, 0x04	; 4
     bf8:	89 f4       	brne	.+34     	; 0xc1c <__vector_16+0x94>
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/spislave.cpp:91
        reg_t rv = ch(cmd_in, dv_in);
     bfa:	4d 81       	ldd	r20, Y+5	; 0x05
     bfc:	5e 81       	ldd	r21, Y+6	; 0x06
     bfe:	6f 81       	ldd	r22, Y+7	; 0x07
     c00:	78 85       	ldd	r23, Y+8	; 0x08
     c02:	e8 81       	ld	r30, Y
     c04:	f9 81       	ldd	r31, Y+1	; 0x01
     c06:	8d 85       	ldd	r24, Y+13	; 0x0d
     c08:	09 95       	icall
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/spislave.cpp:92
        dv_out = rv;
     c0a:	69 87       	std	Y+9, r22	; 0x09
     c0c:	7a 87       	std	Y+10, r23	; 0x0a
     c0e:	8b 87       	std	Y+11, r24	; 0x0b
     c10:	9c 87       	std	Y+12, r25	; 0x0c
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/spislave.cpp:93
        cmd_out = cmd_in | 0x40;
     c12:	8d 85       	ldd	r24, Y+13	; 0x0d
     c14:	80 64       	ori	r24, 0x40	; 64
     c16:	8e 87       	std	Y+14, r24	; 0x0e
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/spislave.cpp:94
        bctr = -1;
     c18:	8f ef       	ldi	r24, 0xFF	; 255
     c1a:	8c 83       	std	Y+4, r24	; 0x04
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/spislave.cpp:97
    }

    bctr += 1;
     c1c:	8c 81       	ldd	r24, Y+4	; 0x04
     c1e:	8f 5f       	subi	r24, 0xFF	; 255
     c20:	8c 83       	std	Y+4, r24	; 0x04
__vector_16():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/spislave.cpp:12
    spislave_c::getInstance()->_ss_int();
}

ISR(USI_OVF_vect) { 
    spislave_c::getInstance()->_byte_int();
}
     c22:	ff 91       	pop	r31
     c24:	ef 91       	pop	r30
     c26:	df 91       	pop	r29
     c28:	cf 91       	pop	r28
     c2a:	bf 91       	pop	r27
     c2c:	af 91       	pop	r26
     c2e:	9f 91       	pop	r25
     c30:	8f 91       	pop	r24
     c32:	7f 91       	pop	r23
     c34:	6f 91       	pop	r22
     c36:	5f 91       	pop	r21
     c38:	4f 91       	pop	r20
     c3a:	3f 91       	pop	r19
     c3c:	2f 91       	pop	r18
     c3e:	1f 91       	pop	r17
     c40:	0f 90       	pop	r0
     c42:	0f be       	out	0x3f, r0	; 63
     c44:	0f 90       	pop	r0
     c46:	1f 90       	pop	r1
     c48:	18 95       	reti
_byte_int():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/spislave.cpp:72
    if (digitalRead(PIN_SS) || (bctr < 0)) return; 

    if (!bctr) {
        cmd_in = newbyte;
    } else {
        dv_in = (dv_in << 8) | newbyte;
     c4a:	8d 81       	ldd	r24, Y+5	; 0x05
     c4c:	9e 81       	ldd	r25, Y+6	; 0x06
     c4e:	af 81       	ldd	r26, Y+7	; 0x07
     c50:	b8 85       	ldd	r27, Y+8	; 0x08
     c52:	ba 2f       	mov	r27, r26
     c54:	a9 2f       	mov	r26, r25
     c56:	98 2f       	mov	r25, r24
     c58:	88 27       	eor	r24, r24
     c5a:	81 2b       	or	r24, r17
     c5c:	8d 83       	std	Y+5, r24	; 0x05
     c5e:	9e 83       	std	Y+6, r25	; 0x06
     c60:	af 83       	std	Y+7, r26	; 0x07
     c62:	b8 87       	std	Y+8, r27	; 0x08
     c64:	bc cf       	rjmp	.-136    	; 0xbde <__vector_16+0x56>

00000c66 <__vector_3>:
__vector_3():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/spislave.cpp:6
#include <Arduino.h>
#include "spislave.h"
#include <avr/interrupt.h>
#include <avr/io.h>

ISR(PCINT1_vect)  { 
     c66:	1f 92       	push	r1
     c68:	0f 92       	push	r0
     c6a:	0f b6       	in	r0, 0x3f	; 63
     c6c:	0f 92       	push	r0
     c6e:	11 24       	eor	r1, r1
     c70:	2f 93       	push	r18
     c72:	3f 93       	push	r19
     c74:	4f 93       	push	r20
     c76:	5f 93       	push	r21
     c78:	6f 93       	push	r22
     c7a:	7f 93       	push	r23
     c7c:	8f 93       	push	r24
     c7e:	9f 93       	push	r25
     c80:	af 93       	push	r26
     c82:	bf 93       	push	r27
     c84:	cf 93       	push	r28
     c86:	df 93       	push	r29
     c88:	ef 93       	push	r30
     c8a:	ff 93       	push	r31
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/spislave.cpp:7
    spislave_c::getInstance()->_ss_int();
     c8c:	65 db       	rcall	.-2358   	; 0x358 <spislave_c::getInstance()>
     c8e:	ec 01       	movw	r28, r24
_ss_int():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/spislave.cpp:37
    GIMSK  = _BV(PCIE1);
}

void
spislave_c::_ss_int() {
    if (!digitalRead(PIN_SS)) {
     c90:	0b da       	rcall	.-3050   	; 0xa8 <digitalRead.constprop.0>
     c92:	89 2b       	or	r24, r25
     c94:	e1 f4       	brne	.+56     	; 0xcce <__vector_3+0x68>
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/spislave.cpp:38
        pinMode(PIN_MISO, OUTPUT);
     c96:	61 e0       	ldi	r22, 0x01	; 1
     c98:	85 e0       	ldi	r24, 0x05	; 5
     c9a:	ce da       	rcall	.-2660   	; 0x238 <pinMode>
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/spislave.cpp:44
        if (false && psrl) {
            psrl->println("T_start");
            // psrl->print("last USIDR ");
            // psrl->println(USIDR,HEX);
        }
        bctr = 0;
     c9c:	1c 82       	std	Y+4, r1	; 0x04
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/spislave.cpp:45
        USICR |= _BV(USIOIE);
     c9e:	6e 9a       	sbi	0x0d, 6	; 13
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/spislave.cpp:46
        USISR = _BV(USIOIF);
     ca0:	80 e4       	ldi	r24, 0x40	; 64
     ca2:	8e b9       	out	0x0e, r24	; 14
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/spislave.cpp:47
        USIDR = cmd_out;
     ca4:	8e 85       	ldd	r24, Y+14	; 0x0e
     ca6:	8f b9       	out	0x0f, r24	; 15
__vector_3():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/spislave.cpp:8
#include <avr/interrupt.h>
#include <avr/io.h>

ISR(PCINT1_vect)  { 
    spislave_c::getInstance()->_ss_int();
}
     ca8:	ff 91       	pop	r31
     caa:	ef 91       	pop	r30
     cac:	df 91       	pop	r29
     cae:	cf 91       	pop	r28
     cb0:	bf 91       	pop	r27
     cb2:	af 91       	pop	r26
     cb4:	9f 91       	pop	r25
     cb6:	8f 91       	pop	r24
     cb8:	7f 91       	pop	r23
     cba:	6f 91       	pop	r22
     cbc:	5f 91       	pop	r21
     cbe:	4f 91       	pop	r20
     cc0:	3f 91       	pop	r19
     cc2:	2f 91       	pop	r18
     cc4:	0f 90       	pop	r0
     cc6:	0f be       	out	0x3f, r0	; 63
     cc8:	0f 90       	pop	r0
     cca:	1f 90       	pop	r1
     ccc:	18 95       	reti
_ss_int():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/spislave.cpp:49
        bctr = 0;
        USICR |= _BV(USIOIE);
        USISR = _BV(USIOIF);
        USIDR = cmd_out;
    } else {
        USICR &= ~_BV(USIOIE);
     cce:	6e 98       	cbi	0x0d, 6	; 13
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/spislave.cpp:50
        USISR = 0;
     cd0:	1e b8       	out	0x0e, r1	; 14
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/spislave.cpp:51
        bctr = -1;
     cd2:	8f ef       	ldi	r24, 0xFF	; 255
     cd4:	8c 83       	std	Y+4, r24	; 0x04
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/spislave.cpp:52
        pinMode(PIN_MISO, INPUT);
     cd6:	60 e0       	ldi	r22, 0x00	; 0
     cd8:	85 e0       	ldi	r24, 0x05	; 5
     cda:	ae da       	rcall	.-2724   	; 0x238 <pinMode>
     cdc:	e5 cf       	rjmp	.-54     	; 0xca8 <__vector_3+0x42>

00000cde <__vector_default>:
__vector_default():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:294
        delay(MILLIS_PER_TICK / 10);
    }
}


ISR(BADISR_vect)  { }
     cde:	1f 92       	push	r1
     ce0:	0f 92       	push	r0
     ce2:	0f b6       	in	r0, 0x3f	; 63
     ce4:	0f 92       	push	r0
     ce6:	11 24       	eor	r1, r1
     ce8:	0f 90       	pop	r0
     cea:	0f be       	out	0x3f, r0	; 63
     cec:	0f 90       	pop	r0
     cee:	1f 90       	pop	r1
     cf0:	18 95       	reti

00000cf2 <__vector_4>:
__vector_4():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:26
const uint8_t PIN_LED_0    = 1;
const uint8_t PIN_LED_1    = 2;
const uint8_t PIN_PWR      = 3;

uint32_t vhits;
ISR(WDT_vect) { 
     cf2:	1f 92       	push	r1
     cf4:	0f 92       	push	r0
     cf6:	0f b6       	in	r0, 0x3f	; 63
     cf8:	0f 92       	push	r0
     cfa:	11 24       	eor	r1, r1
     cfc:	8f 93       	push	r24
     cfe:	9f 93       	push	r25
     d00:	af 93       	push	r26
     d02:	bf 93       	push	r27
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:27
    vhits++;
     d04:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <vhits>
     d08:	90 91 dc 00 	lds	r25, 0x00DC	; 0x8000dc <vhits+0x1>
     d0c:	a0 91 dd 00 	lds	r26, 0x00DD	; 0x8000dd <vhits+0x2>
     d10:	b0 91 de 00 	lds	r27, 0x00DE	; 0x8000de <vhits+0x3>
     d14:	01 96       	adiw	r24, 0x01	; 1
     d16:	a1 1d       	adc	r26, r1
     d18:	b1 1d       	adc	r27, r1
     d1a:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <vhits>
     d1e:	90 93 dc 00 	sts	0x00DC, r25	; 0x8000dc <vhits+0x1>
     d22:	a0 93 dd 00 	sts	0x00DD, r26	; 0x8000dd <vhits+0x2>
     d26:	b0 93 de 00 	sts	0x00DE, r27	; 0x8000de <vhits+0x3>
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:28
}
     d2a:	bf 91       	pop	r27
     d2c:	af 91       	pop	r26
     d2e:	9f 91       	pop	r25
     d30:	8f 91       	pop	r24
     d32:	0f 90       	pop	r0
     d34:	0f be       	out	0x3f, r0	; 63
     d36:	0f 90       	pop	r0
     d38:	1f 90       	pop	r1
     d3a:	18 95       	reti

00000d3c <main>:
main():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:904
  */

  // Use the Millis Timer for fast PWM (unless it doesn't have an output).
  #if (TIMER_TO_USE_FOR_MILLIS == 0)
    #if defined(WGM01) // if Timer0 has PWM
      TCCR0A = (1<<WGM01) | (1<<WGM00);
     d3c:	83 e0       	ldi	r24, 0x03	; 3
     d3e:	80 bf       	out	0x30, r24	; 48
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:907
    #endif
    #if defined(TCCR0B) //The x61 has a wacky Timer0!
      TCCR0B = (MillisTimer_Prescale_Index << CS00);
     d40:	83 bf       	out	0x33, r24	; 51
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:928
    TCCR1A = 1<<WGM10;
    TCCR1B = (1<<WGM12) | (MillisTimer_Prescale_Index << CS10);
  #endif

  // this needs to be called before setup() or some functions won't work there
  sei();
     d42:	78 94       	sei
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:935
  #ifndef DISABLEMILLIS
    // Enable the overflow interrupt (this is the basic system tic-toc for millis)
    #if defined(TIMSK) && defined(TOIE0) && (TIMER_TO_USE_FOR_MILLIS == 0)
      sbi(TIMSK, TOIE0);
    #elif defined(TIMSK0) && defined(TOIE0) && (TIMER_TO_USE_FOR_MILLIS == 0)
      sbi(TIMSK0, TOIE0);
     d44:	99 b7       	in	r25, 0x39	; 57
     d46:	91 60       	ori	r25, 0x01	; 1
     d48:	99 bf       	out	0x39, r25	; 57
initToneTimerInternal():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:608
    #elif (TIMER_TO_USE_FOR_TONE == 1 ) && defined(__AVR_ATtinyX7__)
      TCCR1A = (1<<COM1A1)|(1<<COM1B1)|(1<<WGM10);
      TCCR1B = (ToneTimer_Prescale_Index << CS10)|(1<<WGM12);
    #elif (TIMER_TO_USE_FOR_TONE == 1) // x4, x8, x313,
      // Use the Tone Timer for phase correct PWM
      TCCR1A = (1<<WGM10) | (1<<WGM11);
     d4a:	8f bd       	out	0x2f, r24	; 47
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:609
      TCCR1B = (0<<WGM12) | (0<<WGM13) | (ToneTimer_Prescale_Index << CS10); //set the clock
     d4c:	8e bd       	out	0x2e, r24	; 46
main():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:972

  // Initialize the ADC
  #if defined( INITIALIZE_ANALOG_TO_DIGITAL_CONVERTER ) && INITIALIZE_ANALOG_TO_DIGITAL_CONVERTER
    #if defined(ADCSRA)
      // set a2d prescale factor
      ADCSRA = (ADCSRA & ~((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0))) | (ADC_ARDUINO_PRESCALER << ADPS0) | (1<<ADEN);
     d4e:	86 b1       	in	r24, 0x06	; 6
     d50:	88 77       	andi	r24, 0x78	; 120
     d52:	86 68       	ori	r24, 0x86	; 134
     d54:	86 b9       	out	0x06, r24	; 6
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:974
      // enable a2d conversions
      sbi(ADCSRA, ADEN);
     d56:	37 9a       	sbi	0x06, 7	; 6
setup():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:195
}


void setup() {

    uint8_t mcusrwas = MCUSR;
     d58:	14 b7       	in	r17, 0x34	; 52
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:197
    // disable the watchdog
    MCUSR = 0;
     d5a:	14 be       	out	0x34, r1	; 52
wdt_enable():
c:\users\ericw\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\avr/wdt.h:469
				: "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
     d5c:	88 e1       	ldi	r24, 0x18	; 24
     d5e:	9f e0       	ldi	r25, 0x0F	; 15
     d60:	0f b6       	in	r0, 0x3f	; 63
     d62:	f8 94       	cli
     d64:	a8 95       	wdr
     d66:	81 bd       	out	0x21, r24	; 33
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	91 bd       	out	0x21, r25	; 33
setup():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:199
    wdt_enable(WDTO_2S);
    wdt_reset();
     d6c:	a8 95       	wdr
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:202
    // WDTCSR = _BV(WDCE) | _BV(WDIE);

    pinMode(PIN_PWR,      OUTPUT);
     d6e:	61 e0       	ldi	r22, 0x01	; 1
     d70:	83 e0       	ldi	r24, 0x03	; 3
     d72:	62 da       	rcall	.-2876   	; 0x238 <pinMode>
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:203
    pinMode(PIN_LED_0,    OUTPUT);
     d74:	61 e0       	ldi	r22, 0x01	; 1
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	5f da       	rcall	.-2882   	; 0x238 <pinMode>
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:214
        for (uint8_t i=0;i<11;i++) {
            digitalWrite(PIN_LED_1,i&0x1);
            delay(i & 0x1 ? 10 : 20);
        }
    }
    noInterrupts();
     d7a:	f8 94       	cli
     d7c:	e9 e1       	ldi	r30, 0x19	; 25
     d7e:	f1 e0       	ldi	r31, 0x01	; 1
     d80:	89 e4       	ldi	r24, 0x49	; 73
     d82:	91 e0       	ldi	r25, 0x01	; 1
clear():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:40
        }
        void set_debug(Stream *nser) {
          ser = nser;
        }
        void clear() {
          for (uint8_t i=0;i<REG_COUNT;i++) registers[i] = 0;
     d84:	11 92       	st	Z+, r1
     d86:	11 92       	st	Z+, r1
     d88:	11 92       	st	Z+, r1
     d8a:	11 92       	st	Z+, r1
     d8c:	8e 17       	cp	r24, r30
     d8e:	9f 07       	cpc	r25, r31
     d90:	c9 f7       	brne	.-14     	; 0xd84 <main+0x48>
begin():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/SoftwareSerial_tx.cpp:124
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
     d92:	cf ef       	ldi	r28, 0xFF	; 255
     d94:	d0 e0       	ldi	r29, 0x00	; 0
     d96:	81 e3       	ldi	r24, 0x31	; 49
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <srl+0x10>
     d9e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <srl+0xf>
setup():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:221
    // initialize the register file, start
    // in shutdon mode
    rf.clear();
#ifdef SERIAL_DEBUG
    srl.begin(38400);
    srl.println("hello!");
     da2:	6f e9       	ldi	r22, 0x9F	; 159
     da4:	70 e0       	ldi	r23, 0x00	; 0
     da6:	ce 01       	movw	r24, r28
     da8:	be db       	rcall	.-2180   	; 0x526 <Print::println(char const*)>
print():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/Print.cpp:53
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
     daa:	66 ea       	ldi	r22, 0xA6	; 166
     dac:	70 e0       	ldi	r23, 0x00	; 0
     dae:	ce 01       	movw	r24, r28
     db0:	58 db       	rcall	.-2384   	; 0x462 <Print::write(char const*)>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/Print.cpp:63
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
     db2:	41 2f       	mov	r20, r17
     db4:	50 e0       	ldi	r21, 0x00	; 0
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/Print.cpp:95
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
     dba:	22 e0       	ldi	r18, 0x02	; 2
     dbc:	ce 01       	movw	r24, r28
     dbe:	60 db       	rcall	.-2368   	; 0x480 <Print::printNumber(unsigned long, unsigned char)>
setup():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:224
    srl.print("MCUSR was: ");
    srl.print(mcusrwas, BIN);
    srl.println("b.");
     dc0:	62 eb       	ldi	r22, 0xB2	; 178
     dc2:	70 e0       	ldi	r23, 0x00	; 0
     dc4:	ce 01       	movw	r24, r28
     dc6:	af db       	rcall	.-2210   	; 0x526 <Print::println(char const*)>
_ZN9regfile_cImLj12EE9set_debugEP6Stream():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:37
    public:
        regfile_c() {
          ser = 0;
        }
        void set_debug(Stream *nser) {
          ser = nser;
     dc8:	d0 93 4a 01 	sts	0x014A, r29	; 0x80014a <rf+0x31>
     dcc:	c0 93 49 01 	sts	0x0149, r28	; 0x800149 <rf+0x30>
_ZN9regfile_cImLj12EE3setEhm():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:99
        REGW setAnd(uint8_t addr, REGW val) {
            registers[addr % REG_COUNT] &= val;
            return get(addr);
        }
        REGW set(uint8_t addr, REGW val) {
            registers[addr % REG_COUNT] = val;
     dd0:	86 e0       	ldi	r24, 0x06	; 6
     dd2:	92 e0       	ldi	r25, 0x02	; 2
     dd4:	a4 e6       	ldi	r26, 0x64	; 100
     dd6:	b0 e7       	ldi	r27, 0x70	; 112
     dd8:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <rf+0x2c>
     ddc:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <rf+0x2d>
     de0:	a0 93 47 01 	sts	0x0147, r26	; 0x800147 <rf+0x2e>
     de4:	b0 93 48 01 	sts	0x0148, r27	; 0x800148 <rf+0x2f>
     de8:	84 e8       	ldi	r24, 0x84	; 132
     dea:	93 e0       	ldi	r25, 0x03	; 3
     dec:	a0 e0       	ldi	r26, 0x00	; 0
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <rf+0x4>
     df4:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <rf+0x5>
     df8:	a0 93 1f 01 	sts	0x011F, r26	; 0x80011f <rf+0x6>
     dfc:	b0 93 20 01 	sts	0x0120, r27	; 0x800120 <rf+0x7>
     e00:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <rf+0x8>
     e04:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <rf+0x9>
     e08:	a0 93 23 01 	sts	0x0123, r26	; 0x800123 <rf+0xa>
     e0c:	b0 93 24 01 	sts	0x0124, r27	; 0x800124 <rf+0xb>
     e10:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <rf+0x10>
     e14:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <rf+0x11>
     e18:	a0 93 2b 01 	sts	0x012B, r26	; 0x80012b <rf+0x12>
     e1c:	b0 93 2c 01 	sts	0x012C, r27	; 0x80012c <rf+0x13>
     e20:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <rf+0xc>
     e24:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <rf+0xd>
     e28:	a0 93 27 01 	sts	0x0127, r26	; 0x800127 <rf+0xe>
     e2c:	b0 93 28 01 	sts	0x0128, r27	; 0x800128 <rf+0xf>
     e30:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rf+0x20>
     e34:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <rf+0x21>
     e38:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <rf+0x22>
     e3c:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <rf+0x23>
     e40:	89 e2       	ldi	r24, 0x29	; 41
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	a0 e0       	ldi	r26, 0x00	; 0
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <rf>
     e4c:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <rf+0x1>
     e50:	a0 93 1b 01 	sts	0x011B, r26	; 0x80011b <rf+0x2>
     e54:	b0 93 1c 01 	sts	0x011C, r27	; 0x80011c <rf+0x3>
     e58:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <rf+0x24>
     e5c:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <rf+0x25>
     e60:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <rf+0x26>
     e64:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <rf+0x27>
     e68:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <rf+0x28>
     e6c:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <rf+0x29>
     e70:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <rf+0x2a>
     e74:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <rf+0x2b>
setup():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:244
        _BV(STAT_PWR_ON)
    );
    rf.set(REG_VSENSE_ON_THRESHOLD,VSENSE_ON_THRESHOLD);
    rf.set(REG_VSENSE_OFF_THRESHOLD,VSENSE_OFF_THRESHOLD);

    spislave_c *spi = spislave_c::getInstance();
     e78:	6f da       	rcall	.-2850   	; 0x358 <spislave_c::getInstance()>
     e7a:	8c 01       	movw	r16, r24
_ZN10spislave_c13setCmdHandlerEPFmhmE():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/spislave.h:31
        void setCmdHandler(cmdhandler_t ich) { ch = ich; }
     e7c:	8d e6       	ldi	r24, 0x6D	; 109
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	f8 01       	movw	r30, r16
     e82:	91 83       	std	Z+1, r25	; 0x01
     e84:	80 83       	st	Z, r24
init():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/spislave.cpp:22
 * USISR == status register
 */

void
spislave_c::init() {
    pinMode(PIN_MISO, INPUT); // do not switch to output unless /CS
     e86:	60 e0       	ldi	r22, 0x00	; 0
     e88:	85 e0       	ldi	r24, 0x05	; 5
     e8a:	d6 d9       	rcall	.-3156   	; 0x238 <pinMode>
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/spislave.cpp:23
    pinMode(PIN_MOSI, INPUT);
     e8c:	60 e0       	ldi	r22, 0x00	; 0
     e8e:	84 e0       	ldi	r24, 0x04	; 4
     e90:	d3 d9       	rcall	.-3162   	; 0x238 <pinMode>
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/spislave.cpp:24
    pinMode(PIN_SCK,  INPUT);
     e92:	60 e0       	ldi	r22, 0x00	; 0
     e94:	86 e0       	ldi	r24, 0x06	; 6
     e96:	d0 d9       	rcall	.-3168   	; 0x238 <pinMode>
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/spislave.cpp:25
    pinMode(PIN_SS ,  INPUT);
     e98:	60 e0       	ldi	r22, 0x00	; 0
     e9a:	80 e0       	ldi	r24, 0x00	; 0
     e9c:	cd d9       	rcall	.-3174   	; 0x238 <pinMode>
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/spislave.cpp:28

    // three wire mode
    USICR = _BV(USIWM0) | _BV(USICS1);
     e9e:	88 e1       	ldi	r24, 0x18	; 24
     ea0:	8d b9       	out	0x0d, r24	; 13
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/spislave.cpp:31

    // enable interrupts on SS only
    PCMSK1 = _BV(PCINT8);
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	80 bd       	out	0x20, r24	; 32
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/spislave.cpp:32
    GIMSK  = _BV(PCIE1);
     ea6:	80 e2       	ldi	r24, 0x20	; 32
     ea8:	8b bf       	out	0x3b, r24	; 59
_ZN10spislave_c8setDebugEP6Stream():
        void setDebug(Stream *s) { psrl = s; };
     eaa:	f8 01       	movw	r30, r16
     eac:	d3 83       	std	Z+3, r29	; 0x03
     eae:	c2 83       	std	Z+2, r28	; 0x02
setup():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:251
    spi->init();
#ifdef SERIAL_DEBUG
    spi->setDebug(&srl);
#endif

    interrupts();
     eb0:	78 94       	sei
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:253
#ifdef SERIAL_DEBUG
    srl.println("setup complete");
     eb2:	65 eb       	ldi	r22, 0xB5	; 181
     eb4:	70 e0       	ldi	r23, 0x00	; 0
     eb6:	ce 01       	movw	r24, r28
     eb8:	36 db       	rcall	.-2452   	; 0x526 <Print::println(char const*)>
millis():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:167
  }

  unsigned long millis()
  {
    unsigned long m;
    uint8_t oldSREG = SREG;
     eba:	2f b7       	in	r18, 0x3f	; 63
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:171

    // disable interrupts while we read millis_timer_millis or we might get an
    // inconsistent value (e.g. in the middle of a write to millis_timer_millis)
    cli();
     ebc:	f8 94       	cli
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:172
    m = millis_timer_millis;
     ebe:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <millis_timer_millis>
     ec2:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <millis_timer_millis+0x1>
     ec6:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <millis_timer_millis+0x2>
     eca:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <millis_timer_millis+0x3>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:173
    SREG = oldSREG;
     ece:	2f bf       	out	0x3f, r18	; 63
setup():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:255
#endif
    next_tick = millis();
     ed0:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <next_tick>
     ed4:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <next_tick+0x1>
     ed8:	a0 93 17 01 	sts	0x0117, r26	; 0x800117 <next_tick+0x2>
     edc:	b0 93 18 01 	sts	0x0118, r27	; 0x800118 <next_tick+0x3>
wdt_enable():
c:\users\ericw\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\avr/wdt.h:469
     ee0:	c8 e1       	ldi	r28, 0x18	; 24
     ee2:	dc e0       	ldi	r29, 0x0C	; 12
loop():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:278
    ADCSRA = adcsra_was;
}


void loop() {
    bool use_sleep = !(rf.get(REG_STATUS) & _BV(STAT_PWR_ON));
     ee4:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <rf>
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:279
    if (use_sleep) {
     ee8:	85 fd       	sbrc	r24, 5
     eea:	1a c0       	rjmp	.+52     	; 0xf20 <main+0x1e4>
sleep250():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:261
}



void sleep250() {
    uint8_t adcsra_was = ADCSRA;
     eec:	96 b1       	in	r25, 0x06	; 6
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:262
    ADCSRA = 0;
     eee:	16 b8       	out	0x06, r1	; 6
wdt_enable():
c:\users\ericw\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\avr/wdt.h:469
     ef0:	0f b6       	in	r0, 0x3f	; 63
     ef2:	f8 94       	cli
     ef4:	a8 95       	wdr
     ef6:	c1 bd       	out	0x21, r28	; 33
     ef8:	0f be       	out	0x3f, r0	; 63
     efa:	d1 bd       	out	0x21, r29	; 33
sleep250():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:265

    wdt_enable(WDTO_250MS);
    wdt_reset();
     efc:	a8 95       	wdr
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:266
    WDTCSR |= _BV(WDIE);
     efe:	81 b5       	in	r24, 0x21	; 33
     f00:	80 64       	ori	r24, 0x40	; 64
     f02:	81 bd       	out	0x21, r24	; 33
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:268

    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     f04:	85 b7       	in	r24, 0x35	; 53
     f06:	87 7e       	andi	r24, 0xE7	; 231
     f08:	80 61       	ori	r24, 0x10	; 16
     f0a:	85 bf       	out	0x35, r24	; 53
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:270

    sleep_mode();
     f0c:	85 b7       	in	r24, 0x35	; 53
     f0e:	80 62       	ori	r24, 0x20	; 32
     f10:	85 bf       	out	0x35, r24	; 53
     f12:	88 95       	sleep
     f14:	85 b7       	in	r24, 0x35	; 53
     f16:	8f 7d       	andi	r24, 0xDF	; 223
     f18:	85 bf       	out	0x35, r24	; 53
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:273
    
    // and now we are awake again
    ADCSRA = adcsra_was;
     f1a:	96 b9       	out	0x06, r25	; 6
loop():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:281

void loop() {
    bool use_sleep = !(rf.get(REG_STATUS) & _BV(STAT_PWR_ON));
    if (use_sleep) {
        sleep250();
        doTickWork();      
     f1c:	29 db       	rcall	.-2478   	; 0x570 <doTickWork()>
     f1e:	e2 cf       	rjmp	.-60     	; 0xee4 <main+0x1a8>
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:283
    } else {
        wdt_reset();
     f20:	a8 95       	wdr
millis():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:167
  }

  unsigned long millis()
  {
    unsigned long m;
    uint8_t oldSREG = SREG;
     f22:	2f b7       	in	r18, 0x3f	; 63
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:171

    // disable interrupts while we read millis_timer_millis or we might get an
    // inconsistent value (e.g. in the middle of a write to millis_timer_millis)
    cli();
     f24:	f8 94       	cli
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:172
    m = millis_timer_millis;
     f26:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <millis_timer_millis>
     f2a:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <millis_timer_millis+0x1>
     f2e:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <millis_timer_millis+0x2>
     f32:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <millis_timer_millis+0x3>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:173
    SREG = oldSREG;
     f36:	2f bf       	out	0x3f, r18	; 63
loop():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:285
        bool new_tick = (millis() >= next_tick);
        if (new_tick) {
     f38:	40 91 15 01 	lds	r20, 0x0115	; 0x800115 <next_tick>
     f3c:	50 91 16 01 	lds	r21, 0x0116	; 0x800116 <next_tick+0x1>
     f40:	60 91 17 01 	lds	r22, 0x0117	; 0x800117 <next_tick+0x2>
     f44:	70 91 18 01 	lds	r23, 0x0118	; 0x800118 <next_tick+0x3>
     f48:	84 17       	cp	r24, r20
     f4a:	95 07       	cpc	r25, r21
     f4c:	a6 07       	cpc	r26, r22
     f4e:	b7 07       	cpc	r27, r23
     f50:	a8 f0       	brcs	.+42     	; 0xf7c <main+0x240>
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:286
            doTickWork();
     f52:	0e db       	rcall	.-2532   	; 0x570 <doTickWork()>
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:287
            next_tick += MILLIS_PER_TICK;
     f54:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <next_tick>
     f58:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <next_tick+0x1>
     f5c:	a0 91 17 01 	lds	r26, 0x0117	; 0x800117 <next_tick+0x2>
     f60:	b0 91 18 01 	lds	r27, 0x0118	; 0x800118 <next_tick+0x3>
     f64:	86 50       	subi	r24, 0x06	; 6
     f66:	9f 4f       	sbci	r25, 0xFF	; 255
     f68:	af 4f       	sbci	r26, 0xFF	; 255
     f6a:	bf 4f       	sbci	r27, 0xFF	; 255
     f6c:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <next_tick>
     f70:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <next_tick+0x1>
     f74:	a0 93 17 01 	sts	0x0117, r26	; 0x800117 <next_tick+0x2>
     f78:	b0 93 18 01 	sts	0x0118, r27	; 0x800118 <next_tick+0x3>
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:289
        }
        delay(MILLIS_PER_TICK / 10);
     f7c:	69 e1       	ldi	r22, 0x19	; 25
     f7e:	70 e0       	ldi	r23, 0x00	; 0
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	bf d9       	rcall	.-3202   	; 0x304 <delay>
     f86:	ae cf       	rjmp	.-164    	; 0xee4 <main+0x1a8>

00000f88 <_GLOBAL__sub_I_vhits>:
_GLOBAL__sub_I_vhits():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:294
    }
}


ISR(BADISR_vect)  { }
     f88:	cf 93       	push	r28
     f8a:	df 93       	push	r29
_ZN5PrintC2Ev():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/Print.h:75
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     f8c:	cf ef       	ldi	r28, 0xFF	; 255
     f8e:	d0 e0       	ldi	r29, 0x00	; 0
     f90:	1b 82       	std	Y+3, r1	; 0x03
     f92:	1a 82       	std	Y+2, r1	; 0x02
_ZN6StreamC2Ev():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/Stream.h:64
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     f94:	88 ee       	ldi	r24, 0xE8	; 232
     f96:	93 e0       	ldi	r25, 0x03	; 3
     f98:	a0 e0       	ldi	r26, 0x00	; 0
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	8c 83       	std	Y+4, r24	; 0x04
     f9e:	9d 83       	std	Y+5, r25	; 0x05
     fa0:	ae 83       	std	Y+6, r26	; 0x06
     fa2:	bf 83       	std	Y+7, r27	; 0x07
__base_ctor ():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/SoftwareSerial_tx.cpp:75
//
// Constructor
//
SoftwareSerialTX::SoftwareSerialTX(uint8_t transmitPin, bool inverse_logic /* = false */) : 
  _tx_delay(0),
  _inverse_logic(inverse_logic)
     fa4:	84 e6       	ldi	r24, 0x64	; 100
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	99 83       	std	Y+1, r25	; 0x01
     faa:	88 83       	st	Y, r24
     fac:	18 8a       	std	Y+16, r1	; 0x10
     fae:	1f 86       	std	Y+15, r1	; 0x0f
     fb0:	e0 e1       	ldi	r30, 0x10	; 16
     fb2:	f1 e0       	ldi	r31, 0x01	; 1
     fb4:	60 81       	ld	r22, Z
     fb6:	6e 7f       	andi	r22, 0xFE	; 254
     fb8:	60 83       	st	Z, r22
setTX():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/SoftwareSerial_tx.cpp:94
{
  // First write, then set output. If we do this the other way around,
  // the pin would be output low for a short while before switching to
  // output hihg. Now, it is input with pullup for a short while, which
  // is fine. With inverse logic, either order is fine.
  digitalWrite(tx, _inverse_logic ? LOW : HIGH);
     fba:	60 95       	com	r22
     fbc:	61 70       	andi	r22, 0x01	; 1
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	00 d9       	rcall	.-3584   	; 0x1c2 <digitalWrite>
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/SoftwareSerial_tx.cpp:95
  pinMode(tx, OUTPUT);
     fc2:	61 e0       	ldi	r22, 0x01	; 1
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	38 d9       	rcall	.-3472   	; 0x238 <pinMode>
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/SoftwareSerial_tx.cpp:96
  _transmitBitMask = digitalPinToBitMask(tx);
     fc8:	ee e4       	ldi	r30, 0x4E	; 78
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	e4 91       	lpm	r30, Z
     fce:	ec 87       	std	Y+12, r30	; 0x0c
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/SoftwareSerial_tx.cpp:97
  uint8_t port = digitalPinToPort(tx);
     fd0:	e2 e4       	ldi	r30, 0x42	; 66
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	e4 91       	lpm	r30, Z
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/SoftwareSerial_tx.cpp:98
  _transmitPortRegister = portOutputRegister(port);
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	ee 0f       	add	r30, r30
     fda:	ff 1f       	adc	r31, r31
     fdc:	e8 5d       	subi	r30, 0xD8	; 216
     fde:	ff 4f       	sbci	r31, 0xFF	; 255
     fe0:	85 91       	lpm	r24, Z+
     fe2:	94 91       	lpm	r25, Z
     fe4:	9e 87       	std	Y+14, r25	; 0x0e
     fe6:	8d 87       	std	Y+13, r24	; 0x0d
_ZN9regfile_cImLj12EEC2Ev():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/regfile.h:34
            }
        }

    public:
        regfile_c() {
          ser = 0;
     fe8:	a9 e1       	ldi	r26, 0x19	; 25
     fea:	b1 e0       	ldi	r27, 0x01	; 1
     fec:	d1 96       	adiw	r26, 0x31	; 49
     fee:	1c 92       	st	X, r1
     ff0:	1e 92       	st	-X, r1
     ff2:	d0 97       	sbiw	r26, 0x30	; 48
_ZN11adcReader_cI9regfile_cImLj12EELh1ELh16EEC2ERS1_():
C:\Users\ericw\AppData\Local\Temp\arduino_build_7714\sketch/adcReader.h:27
        ema_c <uint16_t, uint32_t, EMA_ALPHA, EMA_DENOM> avg_vcc_sw;
        ema_c <uint16_t, uint32_t, EMA_ALPHA, EMA_DENOM> avg_vcc33;
        ema_c <uint16_t, uint32_t, EMA_ALPHA, EMA_DENOM> avg_vbat;
        ema_c <uint16_t, uint32_t, EMA_ALPHA, EMA_DENOM> avg_temp;
    public:
        adcReader_c(RF_TYPE &irf) : next(0), rf(irf) { ser = 0; };
     ff4:	e0 ee       	ldi	r30, 0xE0	; 224
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	10 82       	st	Z, r1
     ffa:	b2 83       	std	Z+2, r27	; 0x02
     ffc:	a1 83       	std	Z+1, r26	; 0x01
     ffe:	14 82       	std	Z+4, r1	; 0x04
    1000:	13 82       	std	Z+3, r1	; 0x03
_GLOBAL__sub_I_vhits():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:294
    1002:	df 91       	pop	r29
    1004:	cf 91       	pop	r28
    1006:	08 95       	ret

00001008 <__mulqi3>:
__mulqi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:224
    1008:	00 24       	eor	r0, r0

0000100a <__mulqi3_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:226
    100a:	80 fd       	sbrc	r24, 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:227
    100c:	06 0e       	add	r0, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:228
    100e:	66 0f       	add	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:229
    1010:	11 f0       	breq	.+4      	; 0x1016 <__mulqi3_exit>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:230
    1012:	86 95       	lsr	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:231
    1014:	d1 f7       	brne	.-12     	; 0x100a <__mulqi3_loop>

00001016 <__mulqi3_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:233
    1016:	80 2d       	mov	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:234
    1018:	08 95       	ret

0000101a <__udivmodqi4>:
__udivmodqi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1346
    101a:	99 1b       	sub	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1347
    101c:	79 e0       	ldi	r23, 0x09	; 9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1348
    101e:	04 c0       	rjmp	.+8      	; 0x1028 <__udivmodqi4_ep>

00001020 <__udivmodqi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1350
    1020:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1351
    1022:	96 17       	cp	r25, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1352
    1024:	08 f0       	brcs	.+2      	; 0x1028 <__udivmodqi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1353
    1026:	96 1b       	sub	r25, r22

00001028 <__udivmodqi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1355
    1028:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1356
    102a:	7a 95       	dec	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1357
    102c:	c9 f7       	brne	.-14     	; 0x1020 <__udivmodqi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1358
    102e:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1360
    1030:	08 95       	ret

00001032 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    1032:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    1034:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    1036:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    1038:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    103a:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    103c:	0d c0       	rjmp	.+26     	; 0x1058 <__udivmodsi4_ep>

0000103e <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    103e:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    1040:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    1042:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    1044:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    1046:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    1048:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    104a:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    104c:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    104e:	20 f0       	brcs	.+8      	; 0x1058 <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    1050:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    1052:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    1054:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    1056:	f5 0b       	sbc	r31, r21

00001058 <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    1058:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    105a:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    105c:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    105e:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    1060:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    1062:	69 f7       	brne	.-38     	; 0x103e <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    1064:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    1066:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    1068:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    106a:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    106c:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    106e:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    1070:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    1072:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    1074:	08 95       	ret

00001076 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    1076:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    1078:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    107a:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    107c:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    107e:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    1080:	09 94       	ijmp

00001082 <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    1082:	f8 94       	cli

00001084 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    1084:	ff cf       	rjmp	.-2      	; 0x1084 <__stop_program>
