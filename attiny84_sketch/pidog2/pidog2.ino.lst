
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670/pidog2.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
   0:	2d c0       	rjmp	.+90     	; 0x5c <__ctors_end>
   2:	51 c0       	rjmp	.+162    	; 0xa6 <__bad_interrupt>
   4:	50 c0       	rjmp	.+160    	; 0xa6 <__bad_interrupt>
   6:	68 c5       	rjmp	.+2768   	; 0xad8 <__vector_3>
   8:	ad c5       	rjmp	.+2906   	; 0xb64 <__vector_4>
   a:	4d c0       	rjmp	.+154    	; 0xa6 <__bad_interrupt>
   c:	4c c0       	rjmp	.+152    	; 0xa6 <__bad_interrupt>
   e:	4b c0       	rjmp	.+150    	; 0xa6 <__bad_interrupt>
  10:	4a c0       	rjmp	.+148    	; 0xa6 <__bad_interrupt>
  12:	49 c0       	rjmp	.+146    	; 0xa6 <__bad_interrupt>
  14:	48 c0       	rjmp	.+144    	; 0xa6 <__bad_interrupt>
  16:	a7 c4       	rjmp	.+2382   	; 0x966 <__vector_11>
  18:	46 c0       	rjmp	.+140    	; 0xa6 <__bad_interrupt>
  1a:	45 c0       	rjmp	.+138    	; 0xa6 <__bad_interrupt>
  1c:	44 c0       	rjmp	.+136    	; 0xa6 <__bad_interrupt>
  1e:	43 c0       	rjmp	.+134    	; 0xa6 <__bad_interrupt>
  20:	ec c4       	rjmp	.+2520   	; 0x9fa <__vector_16>

00000022 <__trampolines_end>:
__trampolines_start():
  22:	00 00       	nop
  24:	3a 00       	.word	0x003a	; ????
  26:	37 00       	.word	0x0037	; ????

00000028 <port_to_output_PGM>:
  28:	00 00 3b 00 38 00                                   ..;.8.

0000002e <digital_pin_to_timer_PGM>:
  2e:	00 00 01 02 03 04 00 00 00 00 00 00 00              .............

0000003b <port_to_input_PGM>:
  3b:	00 00 39 00 36 00                                   ..9.6.

00000041 <digital_pin_to_port_PGM>:
  41:	02 02 02 01 01 01 01 01 01 01 01 02                 ............

0000004d <digital_pin_to_bit_mask_PGM>:
  4d:	01 02 04 80 40 20 10 08 04 02 01 08 00              ....@ .......

0000005a <__ctors_start>:
__ctors_start():
  5a:	d7 06       	cpc	r13, r23

0000005c <__ctors_end>:
__dtors_end():
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf e5       	ldi	r28, 0x5F	; 95
  62:	d2 e0       	ldi	r29, 0x02	; 2
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
  68:	20 e0       	ldi	r18, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
  6a:	ae e6       	ldi	r26, 0x6E	; 110
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
  6c:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
  6e:	01 c0       	rjmp	.+2      	; 0x72 <.do_clear_bss_start>

00000070 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
  70:	1d 92       	st	X+, r1

00000072 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
  72:	a1 3e       	cpi	r26, 0xE1	; 225
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
  74:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
  76:	e1 f7       	brne	.-8      	; 0x70 <.do_clear_bss_loop>

00000078 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
  78:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
  7a:	a0 e6       	ldi	r26, 0x60	; 96
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
  7c:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
  7e:	e2 e3       	ldi	r30, 0x32	; 50
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
  80:	fe e0       	ldi	r31, 0x0E	; 14
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
  82:	02 c0       	rjmp	.+4      	; 0x88 <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
  84:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
  86:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
  88:	ae 36       	cpi	r26, 0x6E	; 110
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
  8a:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
  8c:	d9 f7       	brne	.-10     	; 0x84 <__do_copy_data+0xc>

0000008e <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
  8e:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
  90:	ce e2       	ldi	r28, 0x2E	; 46
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
  92:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
  94:	03 c0       	rjmp	.+6      	; 0x9c <__do_global_ctors+0xe>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
  96:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
  98:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
  9a:	c3 d6       	rcall	.+3462   	; 0xe22 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
  9c:	cd 32       	cpi	r28, 0x2D	; 45
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
  9e:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
  a0:	d1 f7       	brne	.-12     	; 0x96 <__do_global_ctors+0x8>
  a2:	85 d5       	rcall	.+2826   	; 0xbae <main>
  a4:	c4 c6       	rjmp	.+3464   	; 0xe2e <_exit>

000000a6 <__bad_interrupt>:
__vector_1():
  a6:	54 c5       	rjmp	.+2728   	; 0xb50 <__vector_default>

000000a8 <digitalRead.constprop.0>:
digitalRead.constprop.0():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:168

int digitalRead(uint8_t pin)
{
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
  //uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  a8:	ed e4       	ldi	r30, 0x4D	; 77
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	84 91       	lpm	r24, Z
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:169
  uint8_t port = digitalPinToPort(pin);
  ae:	e1 e4       	ldi	r30, 0x41	; 65
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	e4 91       	lpm	r30, Z
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:171

  if (port == NOT_A_PIN) return LOW;
  b4:	ee 23       	and	r30, r30
  b6:	71 f0       	breq	.+28     	; 0xd4 <digitalRead.constprop.0+0x2c>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:179
  // "read" should *NEVER* change the behavior of the thing you're using it on.
  // That's why it's called "read" not "write". As an added bonus, sets the
  // stage for auto-fast-digitalRead() for compile time known pins.
  // if (timer != NOT_ON_TIMER) turnOffPWM(timer);

  if (*portInputRegister(port) & bit) return HIGH;
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	ee 0f       	add	r30, r30
  bc:	ff 1f       	adc	r31, r31
  be:	e5 5c       	subi	r30, 0xC5	; 197
  c0:	ff 4f       	sbci	r31, 0xFF	; 255
  c2:	a5 91       	lpm	r26, Z+
  c4:	b4 91       	lpm	r27, Z
  c6:	ec 91       	ld	r30, X
  c8:	e8 23       	and	r30, r24
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	21 f4       	brne	.+8      	; 0xd8 <digitalRead.constprop.0+0x30>
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	08 95       	ret
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:171
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
  //uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:181
  // stage for auto-fast-digitalRead() for compile time known pins.
  // if (timer != NOT_ON_TIMER) turnOffPWM(timer);

  if (*portInputRegister(port) & bit) return HIGH;
  return LOW;
}
  d8:	08 95       	ret

000000da <handleCommand(unsigned char, unsigned long)>:
_Z13handleCommandhm():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:64
typedef regfile_c<reg_t, rf_size> myregfile_c;

myregfile_c rf;
adcReader_c <myregfile_c, 1, 16> adcreader(rf);

reg_t handleCommand(uint8_t cmd, reg_t indata) {
  da:	e8 2f       	mov	r30, r24
  dc:	ef 70       	andi	r30, 0x0F	; 15
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:69
    reg_t odata = 0;
    uint8_t insn = (cmd & 0xc0) >> 6;
    reg_names_t reg = (reg_names_t)(cmd & 0xf);

    if (reg >= rf_size - 1) insn = 0;
  de:	eb 30       	cpi	r30, 0x0B	; 11
  e0:	50 f4       	brcc	.+20     	; 0xf6 <handleCommand(unsigned char, unsigned long)+0x1c>
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:66
myregfile_c rf;
adcReader_c <myregfile_c, 1, 16> adcreader(rf);

reg_t handleCommand(uint8_t cmd, reg_t indata) {
    reg_t odata = 0;
    uint8_t insn = (cmd & 0xc0) >> 6;
  e2:	82 95       	swap	r24
  e4:	86 95       	lsr	r24
  e6:	86 95       	lsr	r24
  e8:	83 70       	andi	r24, 0x03	; 3
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:70
    reg_names_t reg = (reg_names_t)(cmd & 0xf);

    if (reg >= rf_size - 1) insn = 0;
    switch (insn) {
  ea:	82 30       	cpi	r24, 0x02	; 2
  ec:	51 f1       	breq	.+84     	; 0x142 <handleCommand(unsigned char, unsigned long)+0x68>
  ee:	83 30       	cpi	r24, 0x03	; 3
  f0:	c1 f1       	breq	.+112    	; 0x162 <handleCommand(unsigned char, unsigned long)+0x88>
  f2:	81 30       	cpi	r24, 0x01	; 1
  f4:	91 f0       	breq	.+36     	; 0x11a <handleCommand(unsigned char, unsigned long)+0x40>
_ZN9regfile_cImLj12EE3getEh():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:87
            v &= halfmask;
            return v;
        }

        REGW get(uint8_t addr) { 
            return registers[addr % REG_COUNT];
  f6:	8e 2f       	mov	r24, r30
  f8:	6c e0       	ldi	r22, 0x0C	; 12
  fa:	65 d6       	rcall	.+3274   	; 0xdc6 <__udivmodqi4>
  fc:	e9 2f       	mov	r30, r25
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	ee 0f       	add	r30, r30
 102:	ff 1f       	adc	r31, r31
 104:	ee 0f       	add	r30, r30
 106:	ff 1f       	adc	r31, r31
 108:	e1 55       	subi	r30, 0x51	; 81
 10a:	ff 4f       	sbci	r31, 0xFF	; 255
 10c:	40 81       	ld	r20, Z
 10e:	51 81       	ldd	r21, Z+1	; 0x01
 110:	62 81       	ldd	r22, Z+2	; 0x02
 112:	73 81       	ldd	r23, Z+3	; 0x03
_Z13handleCommandhm():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:86
           odata = rf.set(reg, indata);
           break;
    }
    // rf.dump();
    return odata;
};
 114:	cb 01       	movw	r24, r22
 116:	ba 01       	movw	r22, r20
 118:	08 95       	ret
_ZN9regfile_cImLj12EE5setOrEhm():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:91
        }

        REGW setOr(uint8_t addr, REGW val) {
            registers[addr % REG_COUNT] |= val;
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	ee 0f       	add	r30, r30
 11e:	ff 1f       	adc	r31, r31
 120:	ee 0f       	add	r30, r30
 122:	ff 1f       	adc	r31, r31
 124:	e1 55       	subi	r30, 0x51	; 81
 126:	ff 4f       	sbci	r31, 0xFF	; 255
 128:	80 81       	ld	r24, Z
 12a:	91 81       	ldd	r25, Z+1	; 0x01
 12c:	a2 81       	ldd	r26, Z+2	; 0x02
 12e:	b3 81       	ldd	r27, Z+3	; 0x03
 130:	48 2b       	or	r20, r24
 132:	59 2b       	or	r21, r25
 134:	6a 2b       	or	r22, r26
 136:	7b 2b       	or	r23, r27
_ZN9regfile_cImLj12EE3setEhm():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:99
        REGW setAnd(uint8_t addr, REGW val) {
            registers[addr % REG_COUNT] &= val;
            return get(addr);
        }
        REGW set(uint8_t addr, REGW val) {
            registers[addr % REG_COUNT] = val;
 138:	40 83       	st	Z, r20
 13a:	51 83       	std	Z+1, r21	; 0x01
 13c:	62 83       	std	Z+2, r22	; 0x02
 13e:	73 83       	std	Z+3, r23	; 0x03
 140:	e9 cf       	rjmp	.-46     	; 0x114 <handleCommand(unsigned char, unsigned long)+0x3a>
_ZN9regfile_cImLj12EE6setAndEhm():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:95
        REGW setOr(uint8_t addr, REGW val) {
            registers[addr % REG_COUNT] |= val;
            return get(addr);
        }
        REGW setAnd(uint8_t addr, REGW val) {
            registers[addr % REG_COUNT] &= val;
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	ee 0f       	add	r30, r30
 146:	ff 1f       	adc	r31, r31
 148:	ee 0f       	add	r30, r30
 14a:	ff 1f       	adc	r31, r31
 14c:	e1 55       	subi	r30, 0x51	; 81
 14e:	ff 4f       	sbci	r31, 0xFF	; 255
 150:	80 81       	ld	r24, Z
 152:	91 81       	ldd	r25, Z+1	; 0x01
 154:	a2 81       	ldd	r26, Z+2	; 0x02
 156:	b3 81       	ldd	r27, Z+3	; 0x03
 158:	48 23       	and	r20, r24
 15a:	59 23       	and	r21, r25
 15c:	6a 23       	and	r22, r26
 15e:	7b 23       	and	r23, r27
 160:	eb cf       	rjmp	.-42     	; 0x138 <handleCommand(unsigned char, unsigned long)+0x5e>
_ZN9regfile_cImLj12EE3setEhm():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:99
            return get(addr);
        }
        REGW set(uint8_t addr, REGW val) {
            registers[addr % REG_COUNT] = val;
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	ee 0f       	add	r30, r30
 166:	ff 1f       	adc	r31, r31
 168:	ee 0f       	add	r30, r30
 16a:	ff 1f       	adc	r31, r31
 16c:	e1 55       	subi	r30, 0x51	; 81
 16e:	ff 4f       	sbci	r31, 0xFF	; 255
 170:	e3 cf       	rjmp	.-58     	; 0x138 <handleCommand(unsigned char, unsigned long)+0x5e>

00000172 <digitalWrite>:
digitalWrite():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:138
}

void digitalWrite(uint8_t pin, uint8_t val)
{
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
  uint8_t timer = digitalPinToTimer(pin);
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	fc 01       	movw	r30, r24
 176:	e2 5d       	subi	r30, 0xD2	; 210
 178:	ff 4f       	sbci	r31, 0xFF	; 255
 17a:	34 91       	lpm	r19, Z
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:139
  uint8_t bit = digitalPinToBitMask(pin);
 17c:	fc 01       	movw	r30, r24
 17e:	e3 5b       	subi	r30, 0xB3	; 179
 180:	ff 4f       	sbci	r31, 0xFF	; 255
 182:	24 91       	lpm	r18, Z
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:140
  uint8_t port = digitalPinToPort(pin);
 184:	fc 01       	movw	r30, r24
 186:	ef 5b       	subi	r30, 0xBF	; 191
 188:	ff 4f       	sbci	r31, 0xFF	; 255
 18a:	e4 91       	lpm	r30, Z
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:143
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
 18c:	ee 23       	and	r30, r30
 18e:	b9 f0       	breq	.+46     	; 0x1be <digitalWrite+0x4c>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:147

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 190:	33 23       	and	r19, r19
 192:	29 f0       	breq	.+10     	; 0x19e <digitalWrite+0x2c>
turnOffPWM():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:67
}

static void turnOffPWM(uint8_t timer)
{
  #if defined(TCCR0A) && defined(COM0A1)
  if( timer == TIMER0A){
 194:	31 30       	cpi	r19, 0x01	; 1
 196:	a1 f4       	brne	.+40     	; 0x1c0 <digitalWrite+0x4e>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:68
    cbi(TCCR0A, COM0A1);
 198:	80 b7       	in	r24, 0x30	; 48
 19a:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:75
  } else
  #endif

  #if defined(TCCR0A) && defined(COM0B1)
  if( timer == TIMER0B){
    cbi(TCCR0A, COM0B1);
 19c:	80 bf       	out	0x30, r24	; 48
digitalWrite():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:149

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);

  out = portOutputRegister(port);
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	ee 0f       	add	r30, r30
 1a2:	ff 1f       	adc	r31, r31
 1a4:	e8 5d       	subi	r30, 0xD8	; 216
 1a6:	ff 4f       	sbci	r31, 0xFF	; 255
 1a8:	a5 91       	lpm	r26, Z+
 1aa:	b4 91       	lpm	r27, Z
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:152

  if (val == LOW) {
    uint8_t oldSREG = SREG;
 1ac:	8f b7       	in	r24, 0x3f	; 63
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:151
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);

  out = portOutputRegister(port);

  if (val == LOW) {
 1ae:	61 11       	cpse	r22, r1
 1b0:	17 c0       	rjmp	.+46     	; 0x1e0 <digitalWrite+0x6e>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:153
    uint8_t oldSREG = SREG;
    cli();
 1b2:	f8 94       	cli
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:154
    *out &= ~bit;
 1b4:	ec 91       	ld	r30, X
 1b6:	20 95       	com	r18
 1b8:	2e 23       	and	r18, r30
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:159
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    cli();
    *out |= bit;
 1ba:	2c 93       	st	X, r18
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:160
    SREG = oldSREG;
 1bc:	8f bf       	out	0x3f, r24	; 63
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:162
  }
}
 1be:	08 95       	ret
turnOffPWM():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:74
    //cbi(TCCR0A, COM0A0);
  } else
  #endif

  #if defined(TCCR0A) && defined(COM0B1)
  if( timer == TIMER0B){
 1c0:	32 30       	cpi	r19, 0x02	; 2
 1c2:	19 f4       	brne	.+6      	; 0x1ca <digitalWrite+0x58>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:75
    cbi(TCCR0A, COM0B1);
 1c4:	80 b7       	in	r24, 0x30	; 48
 1c6:	8f 7d       	andi	r24, 0xDF	; 223
 1c8:	e9 cf       	rjmp	.-46     	; 0x19c <digitalWrite+0x2a>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:82
  } else
  #endif

  #ifndef __AVR_ATtinyX7__
  #if defined(TCCR1A) && defined(COM1A1)
  if( timer == TIMER1A){
 1ca:	33 30       	cpi	r19, 0x03	; 3
 1cc:	21 f4       	brne	.+8      	; 0x1d6 <digitalWrite+0x64>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:83
    cbi(TCCR1A, COM1A1);
 1ce:	8f b5       	in	r24, 0x2f	; 47
 1d0:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:114
  } else
  #endif

  #if defined(TCCR1A) && defined(COM1B1)
  if( timer == TIMER1B){
    cbi(TCCR1A, COM1B1);
 1d2:	8f bd       	out	0x2f, r24	; 47
 1d4:	e4 cf       	rjmp	.-56     	; 0x19e <digitalWrite+0x2c>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:113
    //cbi(TCCR1, COM1A0);
  } else
  #endif

  #if defined(TCCR1A) && defined(COM1B1)
  if( timer == TIMER1B){
 1d6:	34 30       	cpi	r19, 0x04	; 4
 1d8:	11 f7       	brne	.-60     	; 0x19e <digitalWrite+0x2c>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:114
    cbi(TCCR1A, COM1B1);
 1da:	8f b5       	in	r24, 0x2f	; 47
 1dc:	8f 7d       	andi	r24, 0xDF	; 223
 1de:	f9 cf       	rjmp	.-14     	; 0x1d2 <digitalWrite+0x60>
digitalWrite():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:158
    cli();
    *out &= ~bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    cli();
 1e0:	f8 94       	cli
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:159
    *out |= bit;
 1e2:	ec 91       	ld	r30, X
 1e4:	2e 2b       	or	r18, r30
 1e6:	e9 cf       	rjmp	.-46     	; 0x1ba <digitalWrite+0x48>

000001e8 <pinMode>:
pinMode():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:33
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 1e8:	cf 93       	push	r28
 1ea:	df 93       	push	r29
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:35
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
  uint8_t bit = digitalPinToBitMask(pin);
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	fc 01       	movw	r30, r24
 1f0:	e3 5b       	subi	r30, 0xB3	; 179
 1f2:	ff 4f       	sbci	r31, 0xFF	; 255
 1f4:	24 91       	lpm	r18, Z
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:36
  uint8_t port = digitalPinToPort(pin);
 1f6:	8f 5b       	subi	r24, 0xBF	; 191
 1f8:	9f 4f       	sbci	r25, 0xFF	; 255
 1fa:	fc 01       	movw	r30, r24
 1fc:	84 91       	lpm	r24, Z
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:39
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
 1fe:	88 23       	and	r24, r24
 200:	d1 f0       	breq	.+52     	; 0x236 <pinMode+0x4e>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:41

  reg = portModeRegister(port);
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	fc 01       	movw	r30, r24
 20a:	ee 5d       	subi	r30, 0xDE	; 222
 20c:	ff 4f       	sbci	r31, 0xFF	; 255
 20e:	a5 91       	lpm	r26, Z+
 210:	b4 91       	lpm	r27, Z
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:42
  out = portOutputRegister(port);
 212:	fc 01       	movw	r30, r24
 214:	e8 5d       	subi	r30, 0xD8	; 216
 216:	ff 4f       	sbci	r31, 0xFF	; 255
 218:	c5 91       	lpm	r28, Z+
 21a:	d4 91       	lpm	r29, Z
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:44

  if (mode == INPUT) {
 21c:	61 11       	cpse	r22, r1
 21e:	0e c0       	rjmp	.+28     	; 0x23c <pinMode+0x54>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:45
    uint8_t oldSREG = SREG;
 220:	9f b7       	in	r25, 0x3f	; 63
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:46
                cli();
 222:	f8 94       	cli
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:47
    *reg &= ~bit;
 224:	8c 91       	ld	r24, X
 226:	e2 2f       	mov	r30, r18
 228:	e0 95       	com	r30
 22a:	8e 23       	and	r24, r30
 22c:	8c 93       	st	X, r24
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:48
    *out &= ~bit;
 22e:	28 81       	ld	r18, Y
 230:	e2 23       	and	r30, r18
 232:	e8 83       	st	Y, r30
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:49
    SREG = oldSREG;
 234:	9f bf       	out	0x3f, r25	; 63
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:62
    uint8_t oldSREG = SREG;
                cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	08 95       	ret
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:57
                cli();
    *reg &= ~bit;
    *out |= bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
 23c:	8f b7       	in	r24, 0x3f	; 63
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:58
                cli();
 23e:	f8 94       	cli
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:59
    *reg |= bit;
 240:	ec 91       	ld	r30, X
 242:	e2 2b       	or	r30, r18
 244:	ec 93       	st	X, r30
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_digital.c:60
    SREG = oldSREG;
 246:	8f bf       	out	0x3f, r24	; 63
 248:	f6 cf       	rjmp	.-20     	; 0x236 <pinMode+0x4e>

0000024a <analogRead>:
analogRead():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_analog.c:72
  #ifndef ADCSRA
  return digitalRead(analogInputToDigitalPin(pin)) ? 1023 : 0; //No ADC, so read as a digital pin instead.
  #endif

  #if defined(ADMUX)
  ADMUX = ((analog_reference & ADMUX_REFS_MASK) << REFS0) | ((pin & ADMUX_MUX_MASK) << MUX0); //select the channel and reference
 24a:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <analog_reference>
 24e:	92 95       	swap	r25
 250:	99 0f       	add	r25, r25
 252:	99 0f       	add	r25, r25
 254:	90 7c       	andi	r25, 0xC0	; 192
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_analog.c:66
#define ADMUX_MUX_MASK (0x07)
#endif

int analogRead(uint8_t pin)
{
  pin &=127; //strip off the high bit of the A# constants
 256:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_analog.c:72
  #ifndef ADCSRA
  return digitalRead(analogInputToDigitalPin(pin)) ? 1023 : 0; //No ADC, so read as a digital pin instead.
  #endif

  #if defined(ADMUX)
  ADMUX = ((analog_reference & ADMUX_REFS_MASK) << REFS0) | ((pin & ADMUX_MUX_MASK) << MUX0); //select the channel and reference
 258:	98 2b       	or	r25, r24
 25a:	97 b9       	out	0x07, r25	; 7
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_analog.c:79
  ADMUX |= (((analog_reference & 0x04) >> 2) << REFS2); //some have an extra reference bit in a weird position.
  #endif
  #endif

  #if defined(HAVE_ADC) && HAVE_ADC
  sbi(ADCSRA, ADSC); //Start conversion
 25c:	36 9a       	sbi	0x06, 6	; 6
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_analog.c:81

  while(ADCSRA & (1<<ADSC)); //Wait for conversion to complete.
 25e:	36 99       	sbic	0x06, 6	; 6
 260:	fe cf       	rjmp	.-4      	; 0x25e <analogRead+0x14>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_analog.c:83

  uint8_t low = ADCL;
 262:	84 b1       	in	r24, 0x04	; 4
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_analog.c:84
  uint8_t high = ADCH;
 264:	95 b1       	in	r25, 0x05	; 5
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_analog.c:89
  return (high << 8) | low;
  #else
  return LOW;
  #endif
}
 266:	08 95       	ret

00000268 <micros>:
micros():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:181
  }

  unsigned long micros()
  {
    unsigned long m;
    uint8_t oldSREG = SREG, t;
 268:	3f b7       	in	r19, 0x3f	; 63
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:183

    cli();
 26a:	f8 94       	cli
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:184
    m = millis_timer_overflow_count;
 26c:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <millis_timer_overflow_count>
 270:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <millis_timer_overflow_count+0x1>
 274:	a0 91 a4 00 	lds	r26, 0x00A4	; 0x8000a4 <millis_timer_overflow_count+0x2>
 278:	b0 91 a5 00 	lds	r27, 0x00A5	; 0x8000a5 <millis_timer_overflow_count+0x3>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:186
  #if defined(TCNT0) && (TIMER_TO_USE_FOR_MILLIS == 0) && !defined(TCW0)
    t = TCNT0;
 27c:	22 b7       	in	r18, 0x32	; 50
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:198
  #else
    #error "Millis()/Micros() timer not defined"
  #endif

  #if defined(TIFR0) && (TIMER_TO_USE_FOR_MILLIS == 0)
    if ((TIFR0 & _BV(TOV0)) && (t < 255))
 27e:	08 b6       	in	r0, 0x38	; 56
 280:	00 fe       	sbrs	r0, 0
 282:	05 c0       	rjmp	.+10     	; 0x28e <micros+0x26>
 284:	2f 3f       	cpi	r18, 0xFF	; 255
 286:	19 f0       	breq	.+6      	; 0x28e <micros+0x26>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:199
      m++;
 288:	01 96       	adiw	r24, 0x01	; 1
 28a:	a1 1d       	adc	r26, r1
 28c:	b1 1d       	adc	r27, r1
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:211
  #elif defined(TIFR) && (TIMER_TO_USE_FOR_MILLIS == 1)
    if ((TIFR & _BV(TOV1)) && (t < 255))
      m++;
  #endif

    SREG = oldSREG;
 28e:	3f bf       	out	0x3f, r19	; 63
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:218

  #if F_CPU < 1000000L
    return ((m << 8) + t) * MillisTimer_Prescale_Value * (1000000L/F_CPU);
  #else
    #if (MillisTimer_Prescale_Value % clockCyclesPerMicrosecond() == 0 && (F_CPU % 1000000 == 0 )) // Can we just do it the naive way? If so great!
      return ((m << 8) + t) * (MillisTimer_Prescale_Value / clockCyclesPerMicrosecond());
 290:	ba 2f       	mov	r27, r26
 292:	a9 2f       	mov	r26, r25
 294:	98 2f       	mov	r25, r24
 296:	88 27       	eor	r24, r24
 298:	bc 01       	movw	r22, r24
 29a:	cd 01       	movw	r24, r26
 29c:	62 0f       	add	r22, r18
 29e:	71 1d       	adc	r23, r1
 2a0:	81 1d       	adc	r24, r1
 2a2:	91 1d       	adc	r25, r1
 2a4:	43 e0       	ldi	r20, 0x03	; 3
 2a6:	66 0f       	add	r22, r22
 2a8:	77 1f       	adc	r23, r23
 2aa:	88 1f       	adc	r24, r24
 2ac:	99 1f       	adc	r25, r25
 2ae:	4a 95       	dec	r20
 2b0:	d1 f7       	brne	.-12     	; 0x2a6 <micros+0x3e>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:266
      //the high part gets divided by cCPuS then multiplied by the prescaler. Then take the low 8 bits plus the high part modulo-cCPuS to correct for the division, then multiply that by the prescaler value first before dividing by cCPuS, and finally add the two together.
      //return ((m << 8 )/clockCyclesPerMicrosecond()* MillisTimer_Prescale_Value) + ((t+(((m<<8)%clockCyclesPerMicrosecond())) * MillisTimer_Prescale_Value / clockCyclesPerMicrosecond()));
      return ((m << 8 )/clockCyclesPerMicrosecond()* MillisTimer_Prescale_Value) + (t * MillisTimer_Prescale_Value / clockCyclesPerMicrosecond());
    #endif
  #endif
  }
 2b2:	08 95       	ret

000002b4 <delay>:
delay():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:276
    // Empty
  }
  void yield(void) __attribute__ ((weak, alias("__empty")));

  void delay(unsigned long ms)
  {
 2b4:	cf 92       	push	r12
 2b6:	df 92       	push	r13
 2b8:	ef 92       	push	r14
 2ba:	ff 92       	push	r15
 2bc:	cf 93       	push	r28
 2be:	df 93       	push	r29
 2c0:	6b 01       	movw	r12, r22
 2c2:	7c 01       	movw	r14, r24
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:278
    #if (F_CPU>=1000000L)
    uint16_t start = (uint16_t)micros();
 2c4:	d1 df       	rcall	.-94     	; 0x268 <micros>
 2c6:	eb 01       	movw	r28, r22
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:282

    while (ms > 0) {
      yield();
      while (((uint16_t)micros() - start) >= 1000 && ms) {
 2c8:	cf df       	rcall	.-98     	; 0x268 <micros>
 2ca:	6c 1b       	sub	r22, r28
 2cc:	7d 0b       	sbc	r23, r29
 2ce:	68 3e       	cpi	r22, 0xE8	; 232
 2d0:	73 40       	sbci	r23, 0x03	; 3
 2d2:	a0 f0       	brcs	.+40     	; 0x2fc <delay+0x48>
 2d4:	c1 14       	cp	r12, r1
 2d6:	d1 04       	cpc	r13, r1
 2d8:	e1 04       	cpc	r14, r1
 2da:	f1 04       	cpc	r15, r1
 2dc:	39 f4       	brne	.+14     	; 0x2ec <delay+0x38>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:292
    #else
    uint32_t start = millis();
    while((millis() - start) < ms)  /* NOP */yield();
    return;
    #endif
  }
 2de:	df 91       	pop	r29
 2e0:	cf 91       	pop	r28
 2e2:	ff 90       	pop	r15
 2e4:	ef 90       	pop	r14
 2e6:	df 90       	pop	r13
 2e8:	cf 90       	pop	r12
 2ea:	08 95       	ret
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:283
    uint16_t start = (uint16_t)micros();

    while (ms > 0) {
      yield();
      while (((uint16_t)micros() - start) >= 1000 && ms) {
        ms--;
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	c8 1a       	sub	r12, r24
 2f0:	d1 08       	sbc	r13, r1
 2f2:	e1 08       	sbc	r14, r1
 2f4:	f1 08       	sbc	r15, r1
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:284
        start += 1000;
 2f6:	c8 51       	subi	r28, 0x18	; 24
 2f8:	dc 4f       	sbci	r29, 0xFC	; 252
 2fa:	e6 cf       	rjmp	.-52     	; 0x2c8 <delay+0x14>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:280
  void delay(unsigned long ms)
  {
    #if (F_CPU>=1000000L)
    uint16_t start = (uint16_t)micros();

    while (ms > 0) {
 2fc:	c1 14       	cp	r12, r1
 2fe:	d1 04       	cpc	r13, r1
 300:	e1 04       	cpc	r14, r1
 302:	f1 04       	cpc	r15, r1
 304:	09 f7       	brne	.-62     	; 0x2c8 <delay+0x14>
 306:	eb cf       	rjmp	.-42     	; 0x2de <delay+0x2a>

00000308 <spislave_c::getInstance()>:
_ZN10spislave_c11getInstanceEv():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/spislave.h:28
        reg_t   dv_in, dv_out;
        uint8_t cmd_in, cmd_out;

    public:
        static spislave_c *getInstance() {
            static spislave_c instance;
 308:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <guard variable for spislave_c::getInstance()::instance>
 30c:	81 11       	cpse	r24, r1
 30e:	1e c0       	rjmp	.+60     	; 0x34c <spislave_c::getInstance()+0x44>
__base_ctor ():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/spislave.h:19
typedef uint32_t reg_t;
typedef reg_t (*cmdhandler_t)(uint8_t, reg_t);

class spislave_c {
    private:
        spislave_c() : psrl(0), bctr(-1), dv_in(0), dv_out(0), cmd_in(0), cmd_out(0) {};
 310:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__data_end+0x3>
 314:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__data_end+0x2>
 318:	8f ef       	ldi	r24, 0xFF	; 255
 31a:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__data_end+0x4>
 31e:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <__data_end+0x5>
 322:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__data_end+0x6>
 326:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <__data_end+0x7>
 32a:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <__data_end+0x8>
 32e:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <__data_end+0x9>
 332:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <__data_end+0xa>
 336:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <__data_end+0xb>
 33a:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__data_end+0xc>
 33e:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__data_end+0xd>
 342:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__data_end+0xe>
_ZN10spislave_c11getInstanceEv():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/spislave.h:28
        reg_t   dv_in, dv_out;
        uint8_t cmd_in, cmd_out;

    public:
        static spislave_c *getInstance() {
            static spislave_c instance;
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <guard variable for spislave_c::getInstance()::instance>
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/spislave.h:30
            return &instance;
        }
 34c:	8e e6       	ldi	r24, 0x6E	; 110
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	08 95       	ret

00000352 <Print::write(char const*)>:
_ZN5Print5writeEPKc():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/Print.h:81

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
 352:	fb 01       	movw	r30, r22
 354:	01 90       	ld	r0, Z+
 356:	00 20       	and	r0, r0
 358:	e9 f7       	brne	.-6      	; 0x354 <Print::write(char const*)+0x2>
 35a:	31 97       	sbiw	r30, 0x01	; 1
 35c:	af 01       	movw	r20, r30
 35e:	46 1b       	sub	r20, r22
 360:	57 0b       	sbc	r21, r23
 362:	dc 01       	movw	r26, r24
 364:	ed 91       	ld	r30, X+
 366:	fc 91       	ld	r31, X
 368:	02 80       	ldd	r0, Z+2	; 0x02
 36a:	f3 81       	ldd	r31, Z+3	; 0x03
 36c:	e0 2d       	mov	r30, r0
 36e:	09 94       	ijmp

00000370 <doTickWork()>:
_Z10doTickWorkv():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:167

const uint8_t TICKS_PER_SECOND = 4;
const uint32_t MILLIS_PER_TICK = (1e3 / TICKS_PER_SECOND);
uint32_t next_tick;

void doTickWork() {
 370:	4f 92       	push	r4
 372:	5f 92       	push	r5
 374:	6f 92       	push	r6
 376:	7f 92       	push	r7
 378:	8f 92       	push	r8
 37a:	9f 92       	push	r9
 37c:	af 92       	push	r10
 37e:	bf 92       	push	r11
 380:	cf 92       	push	r12
 382:	df 92       	push	r13
 384:	ef 92       	push	r14
 386:	ff 92       	push	r15
 388:	0f 93       	push	r16
 38a:	1f 93       	push	r17
 38c:	cf 93       	push	r28
 38e:	df 93       	push	r29
 390:	cd b7       	in	r28, 0x3d	; 61
 392:	de b7       	in	r29, 0x3e	; 62
 394:	a1 97       	sbiw	r28, 0x21	; 33
 396:	0f b6       	in	r0, 0x3f	; 63
 398:	f8 94       	cli
 39a:	de bf       	out	0x3e, r29	; 62
 39c:	0f be       	out	0x3f, r0	; 63
 39e:	cd bf       	out	0x3d, r28	; 61
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:169
    static uint8_t tick_count;
    bool second = ! (tick_count % TICKS_PER_SECOND);
 3a0:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <doTickWork()::tick_count>
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:170
    tick_count += 1;
 3a4:	91 e0       	ldi	r25, 0x01	; 1
 3a6:	98 0f       	add	r25, r24
 3a8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <doTickWork()::tick_count>
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:172

    if (second) { 
 3ac:	83 70       	andi	r24, 0x03	; 3
 3ae:	09 f0       	breq	.+2      	; 0x3b2 <doTickWork()+0x42>
 3b0:	28 c2       	rjmp	.+1104   	; 0x802 <__LOCK_REGION_LENGTH__+0x402>
_ZN9regfile_cImLj12EE3getEh():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:87
            v &= halfmask;
            return v;
        }

        REGW get(uint8_t addr) { 
            return registers[addr % REG_COUNT];
 3b2:	c0 90 af 00 	lds	r12, 0x00AF	; 0x8000af <rf>
 3b6:	d0 90 b0 00 	lds	r13, 0x00B0	; 0x8000b0 <rf+0x1>
 3ba:	e0 90 b1 00 	lds	r14, 0x00B1	; 0x8000b1 <rf+0x2>
 3be:	f0 90 b2 00 	lds	r15, 0x00B2	; 0x8000b2 <rf+0x3>
doSecondWork():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:92



void doSecondWork() {
    uint32_t s = rf.get(REG_STATUS);
    if ((s & _BV(STAT_WDOG_EN)) && (s & _BV(STAT_PWR_ON))) {
 3c2:	d7 01       	movw	r26, r14
 3c4:	c6 01       	movw	r24, r12
 3c6:	81 72       	andi	r24, 0x21	; 33
 3c8:	99 27       	eor	r25, r25
 3ca:	aa 27       	eor	r26, r26
 3cc:	bb 27       	eor	r27, r27
 3ce:	81 97       	sbiw	r24, 0x21	; 33
 3d0:	a1 05       	cpc	r26, r1
 3d2:	b1 05       	cpc	r27, r1
 3d4:	09 f0       	breq	.+2      	; 0x3d8 <doTickWork()+0x68>
 3d6:	89 c0       	rjmp	.+274    	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
_ZN9regfile_cImLj12EE3getEh():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:87
 3d8:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <rf+0x4>
 3dc:	90 91 b4 00 	lds	r25, 0x00B4	; 0x8000b4 <rf+0x5>
 3e0:	a0 91 b5 00 	lds	r26, 0x00B5	; 0x8000b5 <rf+0x6>
 3e4:	b0 91 b6 00 	lds	r27, 0x00B6	; 0x8000b6 <rf+0x7>
_ZN9regfile_cImLj12EE5gethlEh15register_half_t():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:75
            registers[addr % REG_COUNT] = o;
            return o;
        }

        REGW gethl(uint8_t addr, register_half_t half) {
            REGW v = registers[addr % REG_COUNT];
 3e8:	40 91 d7 00 	lds	r20, 0x00D7	; 0x8000d7 <rf+0x28>
 3ec:	50 91 d8 00 	lds	r21, 0x00D8	; 0x8000d8 <rf+0x29>
 3f0:	60 91 d9 00 	lds	r22, 0x00D9	; 0x8000d9 <rf+0x2a>
 3f4:	70 91 da 00 	lds	r23, 0x00DA	; 0x8000da <rf+0x2b>
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:78
            size_t sz = sizeof(REGW);
            if (half != register_bottom) {
                v >>= (sz * 4);
 3f8:	2b 01       	movw	r4, r22
 3fa:	66 24       	eor	r6, r6
 3fc:	77 24       	eor	r7, r7
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:82
            }
            REGW halfmask = ~(0x0);
            halfmask >>= (sz * 4);
            v &= halfmask;
 3fe:	66 27       	eor	r22, r22
 400:	77 27       	eor	r23, r23
doSecondWork():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:96
        reg_t on_rem = rf.get(REG_ON_REMAINING);
        reg_t a_off_thresh = rf.gethl(REG_VSENSE_OFF_THRESHOLD,register_top);
        reg_t b_off_thresh = rf.gethl(REG_VSENSE_OFF_THRESHOLD,register_bottom);
        bool a_under = a_off_thresh && (rf.gethl(REG_VSENSA_VSENSB,register_top) < a_off_thresh);
 402:	41 14       	cp	r4, r1
 404:	51 04       	cpc	r5, r1
 406:	61 04       	cpc	r6, r1
 408:	71 04       	cpc	r7, r1
 40a:	89 f0       	breq	.+34     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
_ZN9regfile_cImLj12EE5gethlEh15register_half_t():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:75
            registers[addr % REG_COUNT] = o;
            return o;
        }

        REGW gethl(uint8_t addr, register_half_t half) {
            REGW v = registers[addr % REG_COUNT];
 40c:	80 90 c7 00 	lds	r8, 0x00C7	; 0x8000c7 <rf+0x18>
 410:	90 90 c8 00 	lds	r9, 0x00C8	; 0x8000c8 <rf+0x19>
 414:	a0 90 c9 00 	lds	r10, 0x00C9	; 0x8000c9 <rf+0x1a>
 418:	b0 90 ca 00 	lds	r11, 0x00CA	; 0x8000ca <rf+0x1b>
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:78
            size_t sz = sizeof(REGW);
            if (half != register_bottom) {
                v >>= (sz * 4);
 41c:	45 01       	movw	r8, r10
 41e:	aa 24       	eor	r10, r10
 420:	bb 24       	eor	r11, r11
doSecondWork():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:96
 422:	31 e0       	ldi	r19, 0x01	; 1
 424:	84 14       	cp	r8, r4
 426:	95 04       	cpc	r9, r5
 428:	a6 04       	cpc	r10, r6
 42a:	b7 04       	cpc	r11, r7
 42c:	08 f0       	brcs	.+2      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
_Z10doTickWorkv():
 42e:	30 e0       	ldi	r19, 0x00	; 0
doSecondWork():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:97
        bool b_under = b_off_thresh && (rf.gethl(REG_VSENSA_VSENSB,register_bottom) < b_off_thresh);
 430:	41 15       	cp	r20, r1
 432:	51 05       	cpc	r21, r1
 434:	61 05       	cpc	r22, r1
 436:	71 05       	cpc	r23, r1
 438:	81 f0       	breq	.+32     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
_ZN9regfile_cImLj12EE5gethlEh15register_half_t():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:75
            registers[addr % REG_COUNT] = o;
            return o;
        }

        REGW gethl(uint8_t addr, register_half_t half) {
            REGW v = registers[addr % REG_COUNT];
 43a:	80 90 c7 00 	lds	r8, 0x00C7	; 0x8000c7 <rf+0x18>
 43e:	90 90 c8 00 	lds	r9, 0x00C8	; 0x8000c8 <rf+0x19>
 442:	a0 90 c9 00 	lds	r10, 0x00C9	; 0x8000c9 <rf+0x1a>
 446:	b0 90 ca 00 	lds	r11, 0x00CA	; 0x8000ca <rf+0x1b>
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:82
            if (half != register_bottom) {
                v >>= (sz * 4);
            }
            REGW halfmask = ~(0x0);
            halfmask >>= (sz * 4);
            v &= halfmask;
 44a:	aa 24       	eor	r10, r10
 44c:	bb 24       	eor	r11, r11
doSecondWork():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:97
 44e:	21 e0       	ldi	r18, 0x01	; 1
 450:	84 16       	cp	r8, r20
 452:	95 06       	cpc	r9, r21
 454:	a6 06       	cpc	r10, r22
 456:	b7 06       	cpc	r11, r23
 458:	08 f0       	brcs	.+2      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
_Z10doTickWorkv():
 45a:	20 e0       	ldi	r18, 0x00	; 0
doSecondWork():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:98
        if ( !on_rem || a_under || b_under) {
 45c:	00 97       	sbiw	r24, 0x00	; 0
 45e:	a1 05       	cpc	r26, r1
 460:	b1 05       	cpc	r27, r1
 462:	29 f0       	breq	.+10     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 464:	31 11       	cpse	r19, r1
 466:	03 c0       	rjmp	.+6      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 468:	22 23       	and	r18, r18
 46a:	09 f4       	brne	.+2      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 46c:	86 c1       	rjmp	.+780    	; 0x77a <__LOCK_REGION_LENGTH__+0x37a>
 46e:	e8 94       	clt
 470:	c7 f8       	bld	r12, 7
 472:	d0 f8       	bld	r13, 0
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:104
            #ifdef SERIAL_DEBUG
            srl.println("Powering off pi.");
            #endif
            s |=  _BV(STAT_WDOG_FIRED);
            s &= ~(_BV(STAT_WDOG_FIRE_CODE) | _BV(STAT_WDOG_FIRE_CODE+1));                        //00b - on-remaining timer expired 
            if (a_under && b_under) s |= (_BV(STAT_WDOG_FIRE_CODE) | _BV(STAT_WDOG_FIRE_CODE+1)); //11b - vsensb & vsensb dropped below threshold 
 474:	33 23       	and	r19, r19
 476:	09 f4       	brne	.+2      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 478:	77 c1       	rjmp	.+750    	; 0x768 <__LOCK_REGION_LENGTH__+0x368>
 47a:	22 23       	and	r18, r18
 47c:	09 f4       	brne	.+2      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 47e:	71 c1       	rjmp	.+738    	; 0x762 <__LOCK_REGION_LENGTH__+0x362>
 480:	22 e8       	ldi	r18, 0x82	; 130
 482:	c2 2a       	or	r12, r18
 484:	68 94       	set
 486:	d0 f8       	bld	r13, 0
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:109
            else if (a_under)       s |= _BV(STAT_WDOG_FIRE_CODE);                                //01b - vsensa dropped below threshold
            else if (b_under)       s |= _BV(STAT_WDOG_FIRE_CODE+1);                              //10b - vsensb dropped below threshold
            s &= ~_BV(STAT_WAKE_FIRED);
            s &= ~_BV(STAT_PWR_ON);
            s &= ~_BV(STAT_LED_WARN);
 488:	8f e8       	ldi	r24, 0x8F	; 143
 48a:	c8 22       	and	r12, r24
_ZN9regfile_cImLj12EE3setEhm():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:99
        REGW setAnd(uint8_t addr, REGW val) {
            registers[addr % REG_COUNT] &= val;
            return get(addr);
        }
        REGW set(uint8_t addr, REGW val) {
            registers[addr % REG_COUNT] = val;
 48c:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <rf+0x10>
 490:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <rf+0x11>
 494:	a0 91 c1 00 	lds	r26, 0x00C1	; 0x8000c1 <rf+0x12>
 498:	b0 91 c2 00 	lds	r27, 0x00C2	; 0x8000c2 <rf+0x13>
 49c:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <rf+0x8>
 4a0:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <rf+0x9>
 4a4:	a0 93 b9 00 	sts	0x00B9, r26	; 0x8000b9 <rf+0xa>
 4a8:	b0 93 ba 00 	sts	0x00BA, r27	; 0x8000ba <rf+0xb>
_ZN9regfile_cImLj12EE5gethlEh15register_half_t():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:75
            registers[addr % REG_COUNT] = o;
            return o;
        }

        REGW gethl(uint8_t addr, register_half_t half) {
            REGW v = registers[addr % REG_COUNT];
 4ac:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <rf+0x20>
 4b0:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <rf+0x21>
 4b4:	a0 91 d1 00 	lds	r26, 0x00D1	; 0x8000d1 <rf+0x22>
 4b8:	b0 91 d2 00 	lds	r27, 0x00D2	; 0x8000d2 <rf+0x23>
sethl():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:67
            } else {
                i <<= (sz * 4);
            }
            REGW o = registers[addr % REG_COUNT];

            o &= mask;
 4bc:	ac 01       	movw	r20, r24
 4be:	bd 01       	movw	r22, r26
 4c0:	44 27       	eor	r20, r20
 4c2:	55 27       	eor	r21, r21
_ZN9regfile_cImLj12EE5gethlEh15register_half_t():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:82
            if (half != register_bottom) {
                v >>= (sz * 4);
            }
            REGW halfmask = ~(0x0);
            halfmask >>= (sz * 4);
            v &= halfmask;
 4c4:	aa 27       	eor	r26, r26
 4c6:	bb 27       	eor	r27, r27
doSecondWork():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:111
            rf.set(REG_OFF_REMAINING,rf.get(REG_OFF_REM_RESETVAL));
            rf.sethl(REG_FIRECOUNTS,rf.gethl(REG_FIRECOUNTS,register_bottom)+1,register_bottom);
 4c8:	01 96       	adiw	r24, 0x01	; 1
 4ca:	a1 1d       	adc	r26, r1
 4cc:	b1 1d       	adc	r27, r1
sethl():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:59

        REGW sethl(uint8_t addr, REGW i, register_half_t half) {
            size_t sz = sizeof(REGW);
            REGW mask = ~0; // all ones
            mask >>= (sz * 4);
            i &= mask;
 4ce:	aa 27       	eor	r26, r26
 4d0:	bb 27       	eor	r27, r27
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:68
                i <<= (sz * 4);
            }
            REGW o = registers[addr % REG_COUNT];

            o &= mask;
            o |= i;
 4d2:	84 2b       	or	r24, r20
 4d4:	95 2b       	or	r25, r21
 4d6:	a6 2b       	or	r26, r22
 4d8:	b7 2b       	or	r27, r23
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:70

            registers[addr % REG_COUNT] = o;
 4da:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <rf+0x20>
 4de:	90 93 d0 00 	sts	0x00D0, r25	; 0x8000d0 <rf+0x21>
 4e2:	a0 93 d1 00 	sts	0x00D1, r26	; 0x8000d1 <rf+0x22>
 4e6:	b0 93 d2 00 	sts	0x00D2, r27	; 0x8000d2 <rf+0x23>
doSecondWork():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:117
        } else {
            if (on_rem < WARN_SECS) s |= _BV(STAT_LED_WARN);
            rf.set(REG_ON_REMAINING,on_rem-1);
        }
    }
    if ((s & _BV(STAT_WAKE_EN)) && (~s & _BV(STAT_PWR_ON))) {
 4ea:	c3 fe       	sbrs	r12, 3
 4ec:	67 c0       	rjmp	.+206    	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
 4ee:	c5 fc       	sbrc	r12, 5
 4f0:	65 c0       	rjmp	.+202    	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
_ZN9regfile_cImLj12EE3getEh():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:87
            v &= halfmask;
            return v;
        }

        REGW get(uint8_t addr) { 
            return registers[addr % REG_COUNT];
 4f2:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <rf+0x8>
 4f6:	90 91 b8 00 	lds	r25, 0x00B8	; 0x8000b8 <rf+0x9>
 4fa:	a0 91 b9 00 	lds	r26, 0x00B9	; 0x8000b9 <rf+0xa>
 4fe:	b0 91 ba 00 	lds	r27, 0x00BA	; 0x8000ba <rf+0xb>
doSecondWork():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:119
        reg_t off_rem = rf.get(REG_OFF_REMAINING);
        if (!off_rem) {
 502:	00 97       	sbiw	r24, 0x00	; 0
 504:	a1 05       	cpc	r26, r1
 506:	b1 05       	cpc	r27, r1
 508:	09 f0       	breq	.+2      	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
 50a:	66 c1       	rjmp	.+716    	; 0x7d8 <__LOCK_REGION_LENGTH__+0x3d8>
_ZN9regfile_cImLj12EE5gethlEh15register_half_t():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:75
            registers[addr % REG_COUNT] = o;
            return o;
        }

        REGW gethl(uint8_t addr, register_half_t half) {
            REGW v = registers[addr % REG_COUNT];
 50c:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <rf+0x24>
 510:	90 91 d4 00 	lds	r25, 0x00D4	; 0x8000d4 <rf+0x25>
 514:	a0 91 d5 00 	lds	r26, 0x00D5	; 0x8000d5 <rf+0x26>
 518:	b0 91 d6 00 	lds	r27, 0x00D6	; 0x8000d6 <rf+0x27>
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:78
            size_t sz = sizeof(REGW);
            if (half != register_bottom) {
                v >>= (sz * 4);
 51c:	4d 01       	movw	r8, r26
 51e:	aa 24       	eor	r10, r10
 520:	bb 24       	eor	r11, r11
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:82
            }
            REGW halfmask = ~(0x0);
            halfmask >>= (sz * 4);
            v &= halfmask;
 522:	aa 27       	eor	r26, r26
 524:	bb 27       	eor	r27, r27
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:75
            registers[addr % REG_COUNT] = o;
            return o;
        }

        REGW gethl(uint8_t addr, register_half_t half) {
            REGW v = registers[addr % REG_COUNT];
 526:	40 91 c7 00 	lds	r20, 0x00C7	; 0x8000c7 <rf+0x18>
 52a:	50 91 c8 00 	lds	r21, 0x00C8	; 0x8000c8 <rf+0x19>
 52e:	60 91 c9 00 	lds	r22, 0x00C9	; 0x8000c9 <rf+0x1a>
 532:	70 91 ca 00 	lds	r23, 0x00CA	; 0x8000ca <rf+0x1b>
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:82
            if (half != register_bottom) {
                v >>= (sz * 4);
            }
            REGW halfmask = ~(0x0);
            halfmask >>= (sz * 4);
            v &= halfmask;
 536:	2a 01       	movw	r4, r20
 538:	3b 01       	movw	r6, r22
 53a:	66 24       	eor	r6, r6
 53c:	77 24       	eor	r7, r7
doSecondWork():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:126
            reg_t b_on_thresh = rf.gethl(REG_VSENSE_ON_THRESHOLD,register_bottom); 
            bool a_over = rf.gethl(REG_VSENSA_VSENSB,register_top) >= a_on_thresh;
            bool b_over = rf.gethl(REG_VSENSA_VSENSB,register_bottom) >= b_on_thresh;
            bool enable = (!a_on_thresh && !b_on_thresh)                   || 
                          (a_on_thresh && a_over && b_on_thresh && b_over) || 
                          (a_on_thresh && a_over && !b_on_thresh)          || 
 53e:	81 14       	cp	r8, r1
 540:	91 04       	cpc	r9, r1
 542:	a1 04       	cpc	r10, r1
 544:	b1 04       	cpc	r11, r1
 546:	09 f0       	breq	.+2      	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
 548:	2b c1       	rjmp	.+598    	; 0x7a0 <__LOCK_REGION_LENGTH__+0x3a0>
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:125
            reg_t a_on_thresh = rf.gethl(REG_VSENSE_ON_THRESHOLD,register_top);
            reg_t b_on_thresh = rf.gethl(REG_VSENSE_ON_THRESHOLD,register_bottom); 
            bool a_over = rf.gethl(REG_VSENSA_VSENSB,register_top) >= a_on_thresh;
            bool b_over = rf.gethl(REG_VSENSA_VSENSB,register_bottom) >= b_on_thresh;
            bool enable = (!a_on_thresh && !b_on_thresh)                   || 
                          (a_on_thresh && a_over && b_on_thresh && b_over) || 
 54a:	00 97       	sbiw	r24, 0x00	; 0
 54c:	a1 05       	cpc	r26, r1
 54e:	b1 05       	cpc	r27, r1
 550:	31 f0       	breq	.+12     	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
 552:	48 16       	cp	r4, r24
 554:	59 06       	cpc	r5, r25
 556:	6a 06       	cpc	r6, r26
 558:	7b 06       	cpc	r7, r27
 55a:	08 f4       	brcc	.+2      	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
 55c:	2a c1       	rjmp	.+596    	; 0x7b2 <__LOCK_REGION_LENGTH__+0x3b2>
 55e:	ad eb       	ldi	r26, 0xBD	; 189
 560:	ca 22       	and	r12, r26
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:135
                srl.println("Powering on pi.");
                #endif
                s |= _BV(STAT_WAKE_FIRED);
                s |= _BV(STAT_PWR_ON);
                s &= ~_BV(STAT_LED_WARN);
                s &= ~_BV(STAT_WDOG_FIRED);
 562:	b0 e3       	ldi	r27, 0x30	; 48
 564:	cb 2a       	or	r12, r27
_ZN9regfile_cImLj12EE3setEhm():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:99
        REGW setAnd(uint8_t addr, REGW val) {
            registers[addr % REG_COUNT] &= val;
            return get(addr);
        }
        REGW set(uint8_t addr, REGW val) {
            registers[addr % REG_COUNT] = val;
 566:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <rf+0xc>
 56a:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <rf+0xd>
 56e:	a0 91 bd 00 	lds	r26, 0x00BD	; 0x8000bd <rf+0xe>
 572:	b0 91 be 00 	lds	r27, 0x00BE	; 0x8000be <rf+0xf>
 576:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <rf+0x4>
 57a:	90 93 b4 00 	sts	0x00B4, r25	; 0x8000b4 <rf+0x5>
 57e:	a0 93 b5 00 	sts	0x00B5, r26	; 0x8000b5 <rf+0x6>
 582:	b0 93 b6 00 	sts	0x00B6, r27	; 0x8000b6 <rf+0x7>
_ZN9regfile_cImLj12EE5gethlEh15register_half_t():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:75
            registers[addr % REG_COUNT] = o;
            return o;
        }

        REGW gethl(uint8_t addr, register_half_t half) {
            REGW v = registers[addr % REG_COUNT];
 586:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <rf+0x20>
 58a:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <rf+0x21>
 58e:	a0 91 d1 00 	lds	r26, 0x00D1	; 0x8000d1 <rf+0x22>
 592:	b0 91 d2 00 	lds	r27, 0x00D2	; 0x8000d2 <rf+0x23>
sethl():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:67
            } else {
                i <<= (sz * 4);
            }
            REGW o = registers[addr % REG_COUNT];

            o &= mask;
 596:	ac 01       	movw	r20, r24
 598:	bd 01       	movw	r22, r26
 59a:	66 27       	eor	r22, r22
 59c:	77 27       	eor	r23, r23
doSecondWork():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:137
                rf.set(REG_ON_REMAINING,rf.get(REG_ON_REM_RESETVAL));
                rf.sethl(REG_FIRECOUNTS,rf.gethl(REG_FIRECOUNTS,register_top)+1,register_top);
 59e:	88 27       	eor	r24, r24
 5a0:	99 27       	eor	r25, r25
sethl():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:68
            o |= i;
 5a2:	11 96       	adiw	r26, 0x01	; 1
 5a4:	84 2b       	or	r24, r20
 5a6:	95 2b       	or	r25, r21
 5a8:	a6 2b       	or	r26, r22
 5aa:	b7 2b       	or	r27, r23
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:70

            registers[addr % REG_COUNT] = o;
 5ac:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <rf+0x20>
 5b0:	90 93 d0 00 	sts	0x00D0, r25	; 0x8000d0 <rf+0x21>
 5b4:	a0 93 d1 00 	sts	0x00D1, r26	; 0x8000d1 <rf+0x22>
 5b8:	b0 93 d2 00 	sts	0x00D2, r27	; 0x8000d2 <rf+0x23>
_ZN9regfile_cImLj12EE3setEhm():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:99
        REGW setAnd(uint8_t addr, REGW val) {
            registers[addr % REG_COUNT] &= val;
            return get(addr);
        }
        REGW set(uint8_t addr, REGW val) {
            registers[addr % REG_COUNT] = val;
 5bc:	c0 92 af 00 	sts	0x00AF, r12	; 0x8000af <rf>
 5c0:	d0 92 b0 00 	sts	0x00B0, r13	; 0x8000b0 <rf+0x1>
 5c4:	e0 92 b1 00 	sts	0x00B1, r14	; 0x8000b1 <rf+0x2>
 5c8:	f0 92 b2 00 	sts	0x00B2, r15	; 0x8000b2 <rf+0x3>
doSecondWork():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:152

    rf.set(REG_STATUS,s);

    if (true) {
        // NB the power pin has negative polarity
        digitalWrite(PIN_PWR,      !(s & _BV(STAT_PWR_ON)));
 5cc:	d7 01       	movw	r26, r14
 5ce:	c6 01       	movw	r24, r12
 5d0:	15 e0       	ldi	r17, 0x05	; 5
 5d2:	b6 95       	lsr	r27
 5d4:	a7 95       	ror	r26
 5d6:	97 95       	ror	r25
 5d8:	87 95       	ror	r24
 5da:	1a 95       	dec	r17
 5dc:	d1 f7       	brne	.-12     	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
 5de:	e1 e0       	ldi	r30, 0x01	; 1
 5e0:	8e 27       	eor	r24, r30
 5e2:	68 2f       	mov	r22, r24
 5e4:	61 70       	andi	r22, 0x01	; 1
 5e6:	83 e0       	ldi	r24, 0x03	; 3
 5e8:	c4 dd       	rcall	.-1144   	; 0x172 <digitalWrite>
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:154
#ifndef SERIAL_DEBUG
        digitalWrite(PIN_LED_0,    s & _BV(STAT_LED_WARN));
 5ea:	6c 2d       	mov	r22, r12
 5ec:	60 74       	andi	r22, 0x40	; 64
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	c0 dd       	rcall	.-1152   	; 0x172 <digitalWrite>
_ZN9regfile_cImLj12EE5gethlEh15register_half_t():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:75
            registers[addr % REG_COUNT] = o;
            return o;
        }

        REGW gethl(uint8_t addr, register_half_t half) {
            REGW v = registers[addr % REG_COUNT];
 5f2:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <rf+0x20>
 5f6:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <rf+0x21>
 5fa:	a0 91 d1 00 	lds	r26, 0x00D1	; 0x8000d1 <rf+0x22>
 5fe:	b0 91 d2 00 	lds	r27, 0x00D2	; 0x8000d2 <rf+0x23>
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:82
            if (half != register_bottom) {
                v >>= (sz * 4);
            }
            REGW halfmask = ~(0x0);
            halfmask >>= (sz * 4);
            v &= halfmask;
 602:	aa 27       	eor	r26, r26
 604:	bb 27       	eor	r27, r27
doSecondWork():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:155
        digitalWrite(PIN_LED_1,    rf.gethl(REG_FIRECOUNTS,register_bottom) > 0);
 606:	61 e0       	ldi	r22, 0x01	; 1
 608:	89 2b       	or	r24, r25
 60a:	8a 2b       	or	r24, r26
 60c:	8b 2b       	or	r24, r27
 60e:	09 f4       	brne	.+2      	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
 610:	60 e0       	ldi	r22, 0x00	; 0
 612:	82 e0       	ldi	r24, 0x02	; 2
 614:	ae dd       	rcall	.-1188   	; 0x172 <digitalWrite>
dump():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:44
        void clear() {
          for (uint8_t i=0;i<REG_COUNT;i++) registers[i] = 0;
        };

        void dump() {
            if (ser) {
 616:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <rf+0x30>
 61a:	90 91 e0 00 	lds	r25, 0x00E0	; 0x8000e0 <rf+0x31>
 61e:	00 97       	sbiw	r24, 0x00	; 0
 620:	09 f4       	brne	.+2      	; 0x624 <__LOCK_REGION_LENGTH__+0x224>
 622:	88 c0       	rjmp	.+272    	; 0x734 <__LOCK_REGION_LENGTH__+0x334>
print():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/Print.cpp:53
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 624:	60 e6       	ldi	r22, 0x60	; 96
 626:	70 e0       	ldi	r23, 0x00	; 0
 628:	94 de       	rcall	.-728    	; 0x352 <Print::write(char const*)>
 62a:	af ea       	ldi	r26, 0xAF	; 175
 62c:	8a 2e       	mov	r8, r26
 62e:	a0 e0       	ldi	r26, 0x00	; 0
 630:	9a 2e       	mov	r9, r26
_Z10doTickWorkv():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:46
                ser->print("[ ");
                for (uint8_t i=0; i< REG_COUNT; i++) {
 632:	10 e0       	ldi	r17, 0x00	; 0
print():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/Print.cpp:53
 634:	63 e6       	ldi	r22, 0x63	; 99
 636:	70 e0       	ldi	r23, 0x00	; 0
 638:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <rf+0x30>
 63c:	90 91 e0 00 	lds	r25, 0x00E0	; 0x8000e0 <rf+0x31>
 640:	88 de       	rcall	.-752    	; 0x352 <Print::write(char const*)>
dump():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:48
                    ser->print("0x");
                    pp32hex(registers[i]);
 642:	d4 01       	movw	r26, r8
 644:	4d 90       	ld	r4, X+
 646:	5d 90       	ld	r5, X+
 648:	6d 90       	ld	r6, X+
 64a:	7d 90       	ld	r7, X+
 64c:	4d 01       	movw	r8, r26
 64e:	f8 e1       	ldi	r31, 0x18	; 24
 650:	af 2e       	mov	r10, r31
 652:	b1 2c       	mov	r11, r1
_ZN9regfile_cImLj12EE6pp8hexEh.isra.4():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:19
class regfile_c {
    private:
        REGW registers[REG_COUNT];
        Stream *ser;
        void pp8hex(uint8_t i) {
            if (ser) {
 654:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <rf+0x30>
 658:	90 91 e0 00 	lds	r25, 0x00E0	; 0x8000e0 <rf+0x31>
 65c:	00 97       	sbiw	r24, 0x00	; 0
 65e:	d1 f1       	breq	.+116    	; 0x6d4 <__LOCK_REGION_LENGTH__+0x2d4>
pp32hex():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:27
            }
        }
        void pp32hex(REGW i) {
            uint8_t j = sizeof(REGW);
            while (j) {
                pp8hex((uint8_t)((i >> ((j-1)*8)) & 0xff));
 660:	73 01       	movw	r14, r6
 662:	62 01       	movw	r12, r4
 664:	0a 2c       	mov	r0, r10
 666:	04 c0       	rjmp	.+8      	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
 668:	f6 94       	lsr	r15
 66a:	e7 94       	ror	r14
 66c:	d7 94       	ror	r13
 66e:	c7 94       	ror	r12
 670:	0a 94       	dec	r0
 672:	d2 f7       	brpl	.-12     	; 0x668 <__LOCK_REGION_LENGTH__+0x268>
_ZN9regfile_cImLj12EE6pp8hexEh.isra.4():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:20
    private:
        REGW registers[REG_COUNT];
        Stream *ser;
        void pp8hex(uint8_t i) {
            if (ser) {
                if (i < 16) ser->print("0");
 674:	bf e0       	ldi	r27, 0x0F	; 15
 676:	bc 15       	cp	r27, r12
 678:	18 f0       	brcs	.+6      	; 0x680 <__LOCK_REGION_LENGTH__+0x280>
print():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/Print.cpp:53
 67a:	66 e6       	ldi	r22, 0x66	; 102
 67c:	70 e0       	ldi	r23, 0x00	; 0
 67e:	69 de       	rcall	.-814    	; 0x352 <Print::write(char const*)>
_ZN9regfile_cImLj12EE6pp8hexEh.isra.4():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:21
                ser->print(i,HEX);
 680:	40 91 df 00 	lds	r20, 0x00DF	; 0x8000df <rf+0x30>
 684:	50 91 e0 00 	lds	r21, 0x00E0	; 0x8000e0 <rf+0x31>
 688:	dd 24       	eor	r13, r13
 68a:	ee 24       	eor	r14, r14
 68c:	ff 24       	eor	r15, r15
printNumber():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/Print.cpp:261

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 68e:	19 a2       	std	Y+33, r1	; 0x21
 690:	be 01       	movw	r22, r28
 692:	6f 5d       	subi	r22, 0xDF	; 223
 694:	7f 4f       	sbci	r23, 0xFF	; 255
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/Print.cpp:268
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 696:	d7 01       	movw	r26, r14
 698:	c6 01       	movw	r24, r12
 69a:	e4 e0       	ldi	r30, 0x04	; 4
 69c:	b6 95       	lsr	r27
 69e:	a7 95       	ror	r26
 6a0:	97 95       	ror	r25
 6a2:	87 95       	ror	r24
 6a4:	ea 95       	dec	r30
 6a6:	d1 f7       	brne	.-12     	; 0x69c <__LOCK_REGION_LENGTH__+0x29c>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/Print.cpp:269
    char c = m - base * n;
 6a8:	28 2f       	mov	r18, r24
 6aa:	22 95       	swap	r18
 6ac:	20 7f       	andi	r18, 0xF0	; 240
 6ae:	ec 2d       	mov	r30, r12
 6b0:	e2 1b       	sub	r30, r18
 6b2:	2e 2f       	mov	r18, r30
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/Print.cpp:270
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 6b4:	ea 30       	cpi	r30, 0x0A	; 10
 6b6:	0c f0       	brlt	.+2      	; 0x6ba <__LOCK_REGION_LENGTH__+0x2ba>
 6b8:	a2 c0       	rjmp	.+324    	; 0x7fe <__LOCK_REGION_LENGTH__+0x3fe>
 6ba:	20 5d       	subi	r18, 0xD0	; 208
 6bc:	fb 01       	movw	r30, r22
 6be:	22 93       	st	-Z, r18
 6c0:	bf 01       	movw	r22, r30
 6c2:	6c 01       	movw	r12, r24
 6c4:	7d 01       	movw	r14, r26
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/Print.cpp:271
  } while(n);
 6c6:	c1 14       	cp	r12, r1
 6c8:	d1 04       	cpc	r13, r1
 6ca:	e1 04       	cpc	r14, r1
 6cc:	f1 04       	cpc	r15, r1
 6ce:	19 f7       	brne	.-58     	; 0x696 <__LOCK_REGION_LENGTH__+0x296>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/Print.cpp:273

  return write(str);
 6d0:	ca 01       	movw	r24, r20
 6d2:	3f de       	rcall	.-898    	; 0x352 <Print::write(char const*)>
 6d4:	f8 e0       	ldi	r31, 0x08	; 8
 6d6:	af 1a       	sub	r10, r31
 6d8:	b1 08       	sbc	r11, r1
pp32hex():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:26
            }
        }
        void pp32hex(REGW i) {
            uint8_t j = sizeof(REGW);
            while (j) {
 6da:	28 ef       	ldi	r18, 0xF8	; 248
 6dc:	a2 16       	cp	r10, r18
 6de:	2f ef       	ldi	r18, 0xFF	; 255
 6e0:	b2 06       	cpc	r11, r18
 6e2:	09 f0       	breq	.+2      	; 0x6e6 <__LOCK_REGION_LENGTH__+0x2e6>
 6e4:	b7 cf       	rjmp	.-146    	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
 6e6:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <rf+0x30>
 6ea:	90 91 e0 00 	lds	r25, 0x00E0	; 0x8000e0 <rf+0x31>
dump():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:49
            if (ser) {
                ser->print("[ ");
                for (uint8_t i=0; i< REG_COUNT; i++) {
                    ser->print("0x");
                    pp32hex(registers[i]);
                    if (i < (REG_COUNT-1)) ser->print(", ");
 6ee:	1b 30       	cpi	r17, 0x0B	; 11
 6f0:	19 f0       	breq	.+6      	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
print():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/Print.cpp:53
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 6f2:	68 e6       	ldi	r22, 0x68	; 104
 6f4:	70 e0       	ldi	r23, 0x00	; 0
 6f6:	2d de       	rcall	.-934    	; 0x352 <Print::write(char const*)>
dump():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:46
        };

        void dump() {
            if (ser) {
                ser->print("[ ");
                for (uint8_t i=0; i< REG_COUNT; i++) {
 6f8:	1f 5f       	subi	r17, 0xFF	; 255
 6fa:	1c 30       	cpi	r17, 0x0C	; 12
 6fc:	09 f0       	breq	.+2      	; 0x700 <__LOCK_REGION_LENGTH__+0x300>
 6fe:	9a cf       	rjmp	.-204    	; 0x634 <__LOCK_REGION_LENGTH__+0x234>
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:51
                    ser->print("0x");
                    pp32hex(registers[i]);
                    if (i < (REG_COUNT-1)) ser->print(", ");
                }
                ser->println(" ]");
 700:	e0 90 df 00 	lds	r14, 0x00DF	; 0x8000df <rf+0x30>
 704:	f0 90 e0 00 	lds	r15, 0x00E0	; 0x8000e0 <rf+0x31>
print():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/Print.cpp:53
 708:	6b e6       	ldi	r22, 0x6B	; 107
 70a:	70 e0       	ldi	r23, 0x00	; 0
 70c:	c7 01       	movw	r24, r14
 70e:	21 de       	rcall	.-958    	; 0x352 <Print::write(char const*)>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/Print.cpp:58
}

size_t Print::print(char c)
{
  return write(c);
 710:	d7 01       	movw	r26, r14
 712:	ed 91       	ld	r30, X+
 714:	fc 91       	ld	r31, X
 716:	01 90       	ld	r0, Z+
 718:	f0 81       	ld	r31, Z
 71a:	e0 2d       	mov	r30, r0
 71c:	6d e0       	ldi	r22, 0x0D	; 13
 71e:	c7 01       	movw	r24, r14
 720:	09 95       	icall
 722:	d7 01       	movw	r26, r14
 724:	ed 91       	ld	r30, X+
 726:	fc 91       	ld	r31, X
 728:	01 90       	ld	r0, Z+
 72a:	f0 81       	ld	r31, Z
 72c:	e0 2d       	mov	r30, r0
 72e:	6a e0       	ldi	r22, 0x0A	; 10
 730:	c7 01       	movw	r24, r14
 732:	09 95       	icall
_Z10doTickWorkv():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:180
    }
   
    adcreader.doRead();
    return;

}
 734:	a1 96       	adiw	r28, 0x21	; 33
 736:	0f b6       	in	r0, 0x3f	; 63
 738:	f8 94       	cli
 73a:	de bf       	out	0x3e, r29	; 62
 73c:	0f be       	out	0x3f, r0	; 63
 73e:	cd bf       	out	0x3d, r28	; 61
 740:	df 91       	pop	r29
 742:	cf 91       	pop	r28
 744:	1f 91       	pop	r17
 746:	0f 91       	pop	r16
 748:	ff 90       	pop	r15
 74a:	ef 90       	pop	r14
 74c:	df 90       	pop	r13
 74e:	cf 90       	pop	r12
 750:	bf 90       	pop	r11
 752:	af 90       	pop	r10
 754:	9f 90       	pop	r9
 756:	8f 90       	pop	r8
 758:	7f 90       	pop	r7
 75a:	6f 90       	pop	r6
 75c:	5f 90       	pop	r5
 75e:	4f 90       	pop	r4
 760:	08 95       	ret
doSecondWork():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:105
            srl.println("Powering off pi.");
            #endif
            s |=  _BV(STAT_WDOG_FIRED);
            s &= ~(_BV(STAT_WDOG_FIRE_CODE) | _BV(STAT_WDOG_FIRE_CODE+1));                        //00b - on-remaining timer expired 
            if (a_under && b_under) s |= (_BV(STAT_WDOG_FIRE_CODE) | _BV(STAT_WDOG_FIRE_CODE+1)); //11b - vsensb & vsensb dropped below threshold 
            else if (a_under)       s |= _BV(STAT_WDOG_FIRE_CODE);                                //01b - vsensa dropped below threshold
 762:	32 e8       	ldi	r19, 0x82	; 130
 764:	c3 2a       	or	r12, r19
 766:	90 ce       	rjmp	.-736    	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:106
            else if (b_under)       s |= _BV(STAT_WDOG_FIRE_CODE+1);                              //10b - vsensb dropped below threshold
 768:	21 11       	cpse	r18, r1
 76a:	03 c0       	rjmp	.+6      	; 0x772 <__LOCK_REGION_LENGTH__+0x372>
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:103
        if ( !on_rem || a_under || b_under) {
            #ifdef SERIAL_DEBUG
            srl.println("Powering off pi.");
            #endif
            s |=  _BV(STAT_WDOG_FIRED);
            s &= ~(_BV(STAT_WDOG_FIRE_CODE) | _BV(STAT_WDOG_FIRE_CODE+1));                        //00b - on-remaining timer expired 
 76c:	68 94       	set
 76e:	c1 f8       	bld	r12, 1
 770:	8b ce       	rjmp	.-746    	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:106
            if (a_under && b_under) s |= (_BV(STAT_WDOG_FIRE_CODE) | _BV(STAT_WDOG_FIRE_CODE+1)); //11b - vsensb & vsensb dropped below threshold 
            else if (a_under)       s |= _BV(STAT_WDOG_FIRE_CODE);                                //01b - vsensa dropped below threshold
            else if (b_under)       s |= _BV(STAT_WDOG_FIRE_CODE+1);                              //10b - vsensb dropped below threshold
 772:	68 94       	set
 774:	c1 f8       	bld	r12, 1
 776:	d0 f8       	bld	r13, 0
 778:	87 ce       	rjmp	.-754    	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:113
            s &= ~_BV(STAT_PWR_ON);
            s &= ~_BV(STAT_LED_WARN);
            rf.set(REG_OFF_REMAINING,rf.get(REG_OFF_REM_RESETVAL));
            rf.sethl(REG_FIRECOUNTS,rf.gethl(REG_FIRECOUNTS,register_bottom)+1,register_bottom);
        } else {
            if (on_rem < WARN_SECS) s |= _BV(STAT_LED_WARN);
 77a:	8e 31       	cpi	r24, 0x1E	; 30
 77c:	91 05       	cpc	r25, r1
 77e:	a1 05       	cpc	r26, r1
 780:	b1 05       	cpc	r27, r1
 782:	10 f4       	brcc	.+4      	; 0x788 <__LOCK_REGION_LENGTH__+0x388>
 784:	68 94       	set
 786:	c6 f8       	bld	r12, 6
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:114
            rf.set(REG_ON_REMAINING,on_rem-1);
 788:	01 97       	sbiw	r24, 0x01	; 1
 78a:	a1 09       	sbc	r26, r1
 78c:	b1 09       	sbc	r27, r1
_ZN9regfile_cImLj12EE3setEhm():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:99
        REGW setAnd(uint8_t addr, REGW val) {
            registers[addr % REG_COUNT] &= val;
            return get(addr);
        }
        REGW set(uint8_t addr, REGW val) {
            registers[addr % REG_COUNT] = val;
 78e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <rf+0x4>
 792:	90 93 b4 00 	sts	0x00B4, r25	; 0x8000b4 <rf+0x5>
 796:	a0 93 b5 00 	sts	0x00B5, r26	; 0x8000b5 <rf+0x6>
 79a:	b0 93 b6 00 	sts	0x00B6, r27	; 0x8000b6 <rf+0x7>
 79e:	a5 ce       	rjmp	.-694    	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
_ZN9regfile_cImLj12EE5gethlEh15register_half_t():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:78

        REGW gethl(uint8_t addr, register_half_t half) {
            REGW v = registers[addr % REG_COUNT];
            size_t sz = sizeof(REGW);
            if (half != register_bottom) {
                v >>= (sz * 4);
 7a0:	ab 01       	movw	r20, r22
 7a2:	66 27       	eor	r22, r22
 7a4:	77 27       	eor	r23, r23
doSecondWork():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:125
            reg_t a_on_thresh = rf.gethl(REG_VSENSE_ON_THRESHOLD,register_top);
            reg_t b_on_thresh = rf.gethl(REG_VSENSE_ON_THRESHOLD,register_bottom); 
            bool a_over = rf.gethl(REG_VSENSA_VSENSB,register_top) >= a_on_thresh;
            bool b_over = rf.gethl(REG_VSENSA_VSENSB,register_bottom) >= b_on_thresh;
            bool enable = (!a_on_thresh && !b_on_thresh)                   || 
                          (a_on_thresh && a_over && b_on_thresh && b_over) || 
 7a6:	48 15       	cp	r20, r8
 7a8:	59 05       	cpc	r21, r9
 7aa:	6a 05       	cpc	r22, r10
 7ac:	7b 05       	cpc	r23, r11
 7ae:	08 f0       	brcs	.+2      	; 0x7b2 <__LOCK_REGION_LENGTH__+0x3b2>
 7b0:	cc ce       	rjmp	.-616    	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
_ZN9regfile_cImLj12EE3setEhm():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:99
        REGW setAnd(uint8_t addr, REGW val) {
            registers[addr % REG_COUNT] &= val;
            return get(addr);
        }
        REGW set(uint8_t addr, REGW val) {
            registers[addr % REG_COUNT] = val;
 7b2:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <rf+0x10>
 7b6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <rf+0x11>
 7ba:	a0 91 c1 00 	lds	r26, 0x00C1	; 0x8000c1 <rf+0x12>
 7be:	b0 91 c2 00 	lds	r27, 0x00C2	; 0x8000c2 <rf+0x13>
 7c2:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <rf+0x8>
 7c6:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <rf+0x9>
 7ca:	a0 93 b9 00 	sts	0x00B9, r26	; 0x8000b9 <rf+0xa>
 7ce:	b0 93 ba 00 	sts	0x00BA, r27	; 0x8000ba <rf+0xb>
doSecondWork():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:140
                s &= ~_BV(STAT_WDOG_FIRED);
                rf.set(REG_ON_REMAINING,rf.get(REG_ON_REM_RESETVAL));
                rf.sethl(REG_FIRECOUNTS,rf.gethl(REG_FIRECOUNTS,register_top)+1,register_top);
            } else if ( a_on_thresh || b_on_thresh ) {
              rf.set(REG_OFF_REMAINING,rf.get(REG_OFF_REM_RESETVAL));
              s &= ~_BV(STAT_LED_WARN);
 7d2:	e8 94       	clt
 7d4:	c6 f8       	bld	r12, 6
 7d6:	f2 ce       	rjmp	.-540    	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:143
            }
        } else {
            if (off_rem < WARN_SECS) s |= _BV(STAT_LED_WARN);
 7d8:	8e 31       	cpi	r24, 0x1E	; 30
 7da:	91 05       	cpc	r25, r1
 7dc:	a1 05       	cpc	r26, r1
 7de:	b1 05       	cpc	r27, r1
 7e0:	10 f4       	brcc	.+4      	; 0x7e6 <__LOCK_REGION_LENGTH__+0x3e6>
 7e2:	68 94       	set
 7e4:	c6 f8       	bld	r12, 6
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:144
            rf.set(REG_OFF_REMAINING,off_rem-1);
 7e6:	01 97       	sbiw	r24, 0x01	; 1
 7e8:	a1 09       	sbc	r26, r1
 7ea:	b1 09       	sbc	r27, r1
_ZN9regfile_cImLj12EE3setEhm():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:99
 7ec:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <rf+0x8>
 7f0:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <rf+0x9>
 7f4:	a0 93 b9 00 	sts	0x00B9, r26	; 0x8000b9 <rf+0xa>
 7f8:	b0 93 ba 00 	sts	0x00BA, r27	; 0x8000ba <rf+0xb>
 7fc:	df ce       	rjmp	.-578    	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
printNumber():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/Print.cpp:270

  do {
    unsigned long m = n;
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 7fe:	29 5c       	subi	r18, 0xC9	; 201
 800:	5d cf       	rjmp	.-326    	; 0x6bc <__LOCK_REGION_LENGTH__+0x2bc>
doRead():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/adcReader.h:26
;
        uint8_t doRead() {
            reg_names_t r = _REG_INVALID;
            reg_t v       = 0xdeadbeef;
            register_half_t h = register_bottom;
            switch (next % 6) {
 802:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <adcreader>
 806:	66 e0       	ldi	r22, 0x06	; 6
 808:	de d2       	rcall	.+1468   	; 0xdc6 <__udivmodqi4>
 80a:	93 30       	cpi	r25, 0x03	; 3
 80c:	09 f4       	brne	.+2      	; 0x810 <__LOCK_REGION_LENGTH__+0x410>
 80e:	5a c0       	rjmp	.+180    	; 0x8c4 <__LOCK_REGION_LENGTH__+0x4c4>
 810:	98 f5       	brcc	.+102    	; 0x878 <__LOCK_REGION_LENGTH__+0x478>
 812:	91 30       	cpi	r25, 0x01	; 1
 814:	09 f4       	brne	.+2      	; 0x818 <__LOCK_REGION_LENGTH__+0x418>
 816:	3f c0       	rjmp	.+126    	; 0x896 <__LOCK_REGION_LENGTH__+0x496>
 818:	92 30       	cpi	r25, 0x02	; 2
 81a:	09 f4       	brne	.+2      	; 0x81e <__LOCK_REGION_LENGTH__+0x41e>
 81c:	47 c0       	rjmp	.+142    	; 0x8ac <__LOCK_REGION_LENGTH__+0x4ac>
_ZN11adcReader_cI9regfile_cImLj12EELh1ELh16EE11readOwnTempEv.isra.1():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/adcReader.h:70
            next += 1;
            return next;
        };

        uint16_t readOwnTemp() {
            ADMUX   = B100010; // select temp sensor
 81e:	82 e2       	ldi	r24, 0x22	; 34
 820:	87 b9       	out	0x07, r24	; 7
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/adcReader.h:73
            // ADMUX  &= ~_BV(ADLAR);
            // select 1.1 volt reference
            ADMUX  |=  _BV(REFS1); 
 822:	3f 9a       	sbi	0x07, 7	; 7
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/adcReader.h:74
            ADMUX  &= ~_BV(REFS0);
 824:	3e 98       	cbi	0x07, 6	; 7
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/adcReader.h:75
            delay(2);
 826:	62 e0       	ldi	r22, 0x02	; 2
 828:	70 e0       	ldi	r23, 0x00	; 0
 82a:	80 e0       	ldi	r24, 0x00	; 0
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	42 dd       	rcall	.-1404   	; 0x2b4 <delay>
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/adcReader.h:77
            // no interrupts and no auto-trigger
            ADCSRA &= ~(_BV(ADATE) | _BV(ADIE));
 830:	86 b1       	in	r24, 0x06	; 6
 832:	87 7d       	andi	r24, 0xD7	; 215
 834:	86 b9       	out	0x06, r24	; 6
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/adcReader.h:79
            // turn her on and start a conversion
            ADCSRA |= _BV(ADEN);
 836:	37 9a       	sbi	0x06, 7	; 6
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/adcReader.h:80
            ADCSRA |= _BV(ADSC);
 838:	36 9a       	sbi	0x06, 6	; 6
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/adcReader.h:81
            delay(2);
 83a:	62 e0       	ldi	r22, 0x02	; 2
 83c:	70 e0       	ldi	r23, 0x00	; 0
 83e:	80 e0       	ldi	r24, 0x00	; 0
 840:	90 e0       	ldi	r25, 0x00	; 0
 842:	38 dd       	rcall	.-1424   	; 0x2b4 <delay>
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/adcReader.h:82
            while (bit_is_set(ADCSRA,ADSC));
 844:	36 99       	sbic	0x06, 6	; 6
 846:	fe cf       	rjmp	.-4      	; 0x844 <__LOCK_REGION_LENGTH__+0x444>
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/adcReader.h:84
            // supposed to read ADCL first, then ADCH
            uint16_t ov = ADCL;
 848:	84 b1       	in	r24, 0x04	; 4
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/adcReader.h:85
            ov |= (ADCH << 8);
 84a:	25 b1       	in	r18, 0x05	; 5
 84c:	32 2f       	mov	r19, r18
 84e:	28 2f       	mov	r18, r24
doRead():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/adcReader.h:31
            switch (next % 6) {
                 
                case 0 :
                    r = REG_TEMP_V33;
                    h = register_top;
                    v = avg_temp.update(readOwnTemp());
 850:	89 01       	movw	r16, r18
 852:	30 e0       	ldi	r19, 0x00	; 0
 854:	20 e0       	ldi	r18, 0x00	; 0
_Z10doTickWorkv():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/adcReader.h:30
            register_half_t h = register_bottom;
            switch (next % 6) {
                 
                case 0 :
                    r = REG_TEMP_V33;
                    h = register_top;
 856:	81 e0       	ldi	r24, 0x01	; 1
 858:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/adcReader.h:34
                    v = avg_temp.update(readOwnTemp());
                    break;
                case 1 :
                    r = REG_TEMP_V33;
 85a:	65 e0       	ldi	r22, 0x05	; 5
 85c:	70 e0       	ldi	r23, 0x00	; 0
doRead():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/adcReader.h:64
                    analogReference(INTERNAL1V1);
                    v = avg_vcc_sw.update(analogRead(A2));
                    break;
            } 
            
            if (r != _REG_INVALID) rf.sethl(r,v,h);
 85e:	e0 91 8b 00 	lds	r30, 0x008B	; 0x80008b <adcreader+0x1>
 862:	f0 91 8c 00 	lds	r31, 0x008C	; 0x80008c <adcreader+0x2>
sethl():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:60
        REGW sethl(uint8_t addr, REGW i, register_half_t half) {
            size_t sz = sizeof(REGW);
            REGW mask = ~0; // all ones
            mask >>= (sz * 4);
            i &= mask;
            if (half == register_bottom) {
 866:	89 2b       	or	r24, r25
 868:	09 f0       	breq	.+2      	; 0x86c <__LOCK_REGION_LENGTH__+0x46c>
 86a:	59 c0       	rjmp	.+178    	; 0x91e <__LOCK_REGION_LENGTH__+0x51e>
_Z10doTickWorkv():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:61
                mask <<= (sz * 4);
 86c:	c1 2c       	mov	r12, r1
 86e:	d1 2c       	mov	r13, r1
 870:	ee 24       	eor	r14, r14
 872:	ea 94       	dec	r14
 874:	fe 2c       	mov	r15, r14
 876:	5b c0       	rjmp	.+182    	; 0x92e <__LOCK_REGION_LENGTH__+0x52e>
doRead():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/adcReader.h:26
;
        uint8_t doRead() {
            reg_names_t r = _REG_INVALID;
            reg_t v       = 0xdeadbeef;
            register_half_t h = register_bottom;
            switch (next % 6) {
 878:	94 30       	cpi	r25, 0x04	; 4
 87a:	79 f1       	breq	.+94     	; 0x8da <__LOCK_REGION_LENGTH__+0x4da>
 87c:	95 30       	cpi	r25, 0x05	; 5
 87e:	79 f6       	brne	.-98     	; 0x81e <__LOCK_REGION_LENGTH__+0x41e>
analogReference():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_analog.c:45
{
  // can't actually set the register here because the default setting
  // will connect AVCC and the AREF pin, which would cause a short if
  // there's something connected to AREF.
  // fix? Validate the mode?
  analog_reference = mode;
 880:	82 e0       	ldi	r24, 0x02	; 2
 882:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <analog_reference>
doRead():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/adcReader.h:60
                    break;
                case 5 :
                    r = REG_V5_V5SWTCH;
                    h = register_bottom;
                    analogReference(INTERNAL1V1);
                    v = avg_vcc_sw.update(analogRead(A2));
 886:	82 e8       	ldi	r24, 0x82	; 130
 888:	e0 dc       	rcall	.-1600   	; 0x24a <analogRead>
 88a:	8c 01       	movw	r16, r24
 88c:	30 e0       	ldi	r19, 0x00	; 0
 88e:	20 e0       	ldi	r18, 0x00	; 0
_Z10doTickWorkv():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/adcReader.h:58
                    h = register_top;
                    v = avg_vcc.update(readOwnVCC());
                    break;
                case 5 :
                    r = REG_V5_V5SWTCH;
                    h = register_bottom;
 890:	90 e0       	ldi	r25, 0x00	; 0
 892:	80 e0       	ldi	r24, 0x00	; 0
 894:	41 c0       	rjmp	.+130    	; 0x918 <__LOCK_REGION_LENGTH__+0x518>
analogReference():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_analog.c:45
 896:	82 e0       	ldi	r24, 0x02	; 2
 898:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <analog_reference>
doRead():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/adcReader.h:37
                    break;
                case 1 :
                    r = REG_TEMP_V33;
                    h = register_bottom;
                    analogReference(INTERNAL1V1);
                    v = avg_vcc_sw.update(analogRead(A3));
 89c:	83 e8       	ldi	r24, 0x83	; 131
 89e:	d5 dc       	rcall	.-1622   	; 0x24a <analogRead>
 8a0:	8c 01       	movw	r16, r24
 8a2:	30 e0       	ldi	r19, 0x00	; 0
 8a4:	20 e0       	ldi	r18, 0x00	; 0
_Z10doTickWorkv():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/adcReader.h:35
                    h = register_top;
                    v = avg_temp.update(readOwnTemp());
                    break;
                case 1 :
                    r = REG_TEMP_V33;
                    h = register_bottom;
 8a6:	90 e0       	ldi	r25, 0x00	; 0
 8a8:	80 e0       	ldi	r24, 0x00	; 0
 8aa:	d7 cf       	rjmp	.-82     	; 0x85a <__LOCK_REGION_LENGTH__+0x45a>
analogReference():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_analog.c:45
 8ac:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <analog_reference>
doRead():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/adcReader.h:43
                    break;
                case 2 :
                    r = REG_VSENSA_VSENSB;
                    h = register_top;
                    analogReference(INTERNAL1V1);
                    v = avg_vbat.update(analogRead(A0));
 8b0:	80 e8       	ldi	r24, 0x80	; 128
 8b2:	cb dc       	rcall	.-1642   	; 0x24a <analogRead>
 8b4:	8c 01       	movw	r16, r24
 8b6:	30 e0       	ldi	r19, 0x00	; 0
 8b8:	20 e0       	ldi	r18, 0x00	; 0
_Z10doTickWorkv():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/adcReader.h:41
                    analogReference(INTERNAL1V1);
                    v = avg_vcc_sw.update(analogRead(A3));
                    break;
                case 2 :
                    r = REG_VSENSA_VSENSB;
                    h = register_top;
 8ba:	81 e0       	ldi	r24, 0x01	; 1
 8bc:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/adcReader.h:46
                    analogReference(INTERNAL1V1);
                    v = avg_vbat.update(analogRead(A0));
                    break;
                case 3 :
                    r = REG_VSENSA_VSENSB;
 8be:	66 e0       	ldi	r22, 0x06	; 6
 8c0:	70 e0       	ldi	r23, 0x00	; 0
 8c2:	cd cf       	rjmp	.-102    	; 0x85e <__LOCK_REGION_LENGTH__+0x45e>
analogReference():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring_analog.c:45
 8c4:	82 e0       	ldi	r24, 0x02	; 2
 8c6:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <analog_reference>
doRead():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/adcReader.h:49
                    h = register_bottom;
                    analogReference(INTERNAL1V1);
                    v = avg_vbat.update(analogRead(A1));
 8ca:	81 e8       	ldi	r24, 0x81	; 129
 8cc:	be dc       	rcall	.-1668   	; 0x24a <analogRead>
 8ce:	8c 01       	movw	r16, r24
 8d0:	30 e0       	ldi	r19, 0x00	; 0
 8d2:	20 e0       	ldi	r18, 0x00	; 0
_Z10doTickWorkv():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/adcReader.h:47
                    analogReference(INTERNAL1V1);
                    v = avg_vbat.update(analogRead(A0));
                    break;
                case 3 :
                    r = REG_VSENSA_VSENSB;
                    h = register_bottom;
 8d4:	90 e0       	ldi	r25, 0x00	; 0
 8d6:	80 e0       	ldi	r24, 0x00	; 0
 8d8:	f2 cf       	rjmp	.-28     	; 0x8be <__LOCK_REGION_LENGTH__+0x4be>
_ZN11adcReader_cI9regfile_cImLj12EELh1ELh16EE10readOwnVCCEv.isra.3():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/adcReader.h:91
            return ov;
        }

        uint16_t readOwnVCC() {
            uint32_t result;
            ADMUX = _BV(MUX5) | _BV(MUX0);
 8da:	81 e2       	ldi	r24, 0x21	; 33
 8dc:	87 b9       	out	0x07, r24	; 7
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/adcReader.h:92
            delay(2);
 8de:	62 e0       	ldi	r22, 0x02	; 2
 8e0:	70 e0       	ldi	r23, 0x00	; 0
 8e2:	80 e0       	ldi	r24, 0x00	; 0
 8e4:	90 e0       	ldi	r25, 0x00	; 0
 8e6:	e6 dc       	rcall	.-1588   	; 0x2b4 <delay>
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/adcReader.h:93
            ADCSRA |= _BV(ADSC);
 8e8:	36 9a       	sbi	0x06, 6	; 6
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/adcReader.h:94
            while (bit_is_set(ADCSRA,ADSC));
 8ea:	36 99       	sbic	0x06, 6	; 6
 8ec:	fe cf       	rjmp	.-4      	; 0x8ea <__LOCK_REGION_LENGTH__+0x4ea>
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/adcReader.h:95
            result = ADCL;
 8ee:	84 b1       	in	r24, 0x04	; 4
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/adcReader.h:96
            result |= ADCH << 8;
 8f0:	25 b1       	in	r18, 0x05	; 5
 8f2:	30 e0       	ldi	r19, 0x00	; 0
 8f4:	32 2f       	mov	r19, r18
 8f6:	22 27       	eor	r18, r18
 8f8:	03 2e       	mov	r0, r19
 8fa:	00 0c       	add	r0, r0
 8fc:	44 0b       	sbc	r20, r20
 8fe:	55 0b       	sbc	r21, r21
 900:	28 2b       	or	r18, r24
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/adcReader.h:98
            // reading directly in mV
            result = 1126400L / result;
 902:	60 e0       	ldi	r22, 0x00	; 0
 904:	70 e3       	ldi	r23, 0x30	; 48
 906:	81 e1       	ldi	r24, 0x11	; 17
 908:	90 e0       	ldi	r25, 0x00	; 0
 90a:	69 d2       	rcall	.+1234   	; 0xdde <__udivmodsi4>
 90c:	89 01       	movw	r16, r18
 90e:	9a 01       	movw	r18, r20
 910:	22 27       	eor	r18, r18
 912:	33 27       	eor	r19, r19
_Z10doTickWorkv():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/adcReader.h:53
                    analogReference(INTERNAL1V1);
                    v = avg_vbat.update(analogRead(A1));
                    break;
                case 4 :
                    r = REG_V5_V5SWTCH;
                    h = register_top;
 914:	81 e0       	ldi	r24, 0x01	; 1
 916:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/adcReader.h:57
                    v = avg_vcc.update(readOwnVCC());
                    break;
                case 5 :
                    r = REG_V5_V5SWTCH;
 918:	67 e0       	ldi	r22, 0x07	; 7
 91a:	70 e0       	ldi	r23, 0x00	; 0
 91c:	a0 cf       	rjmp	.-192    	; 0x85e <__LOCK_REGION_LENGTH__+0x45e>
sethl():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:63
            } else {
                i <<= (sz * 4);
 91e:	98 01       	movw	r18, r16
 920:	11 27       	eor	r17, r17
 922:	00 27       	eor	r16, r16
_Z10doTickWorkv():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:58
        }

        REGW sethl(uint8_t addr, REGW i, register_half_t half) {
            size_t sz = sizeof(REGW);
            REGW mask = ~0; // all ones
            mask >>= (sz * 4);
 924:	cc 24       	eor	r12, r12
 926:	ca 94       	dec	r12
 928:	dc 2c       	mov	r13, r12
 92a:	e1 2c       	mov	r14, r1
 92c:	f1 2c       	mov	r15, r1
 92e:	66 0f       	add	r22, r22
 930:	77 1f       	adc	r23, r23
 932:	66 0f       	add	r22, r22
 934:	77 1f       	adc	r23, r23
 936:	e6 0f       	add	r30, r22
 938:	f7 1f       	adc	r31, r23
sethl():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:65
            if (half == register_bottom) {
                mask <<= (sz * 4);
            } else {
                i <<= (sz * 4);
            }
            REGW o = registers[addr % REG_COUNT];
 93a:	80 81       	ld	r24, Z
 93c:	91 81       	ldd	r25, Z+1	; 0x01
 93e:	a2 81       	ldd	r26, Z+2	; 0x02
 940:	b3 81       	ldd	r27, Z+3	; 0x03
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:67

            o &= mask;
 942:	8c 21       	and	r24, r12
 944:	9d 21       	and	r25, r13
 946:	ae 21       	and	r26, r14
 948:	bf 21       	and	r27, r15
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:68
            o |= i;
 94a:	80 2b       	or	r24, r16
 94c:	91 2b       	or	r25, r17
 94e:	a2 2b       	or	r26, r18
 950:	b3 2b       	or	r27, r19
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:70

            registers[addr % REG_COUNT] = o;
 952:	80 83       	st	Z, r24
 954:	91 83       	std	Z+1, r25	; 0x01
 956:	a2 83       	std	Z+2, r26	; 0x02
 958:	b3 83       	std	Z+3, r27	; 0x03
doRead():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/adcReader.h:65
                    v = avg_vcc_sw.update(analogRead(A2));
                    break;
            } 
            
            if (r != _REG_INVALID) rf.sethl(r,v,h);
            next += 1;
 95a:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <adcreader>
 95e:	8f 5f       	subi	r24, 0xFF	; 255
 960:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <adcreader>
 964:	e7 ce       	rjmp	.-562    	; 0x734 <__LOCK_REGION_LENGTH__+0x334>

00000966 <__vector_11>:
__vector_11():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:139
      #error "cannot find Millis() timer overflow vector"
    #endif
  #else
    #error "Millis() timer not defined!"
  #endif
  {
 966:	1f 92       	push	r1
 968:	0f 92       	push	r0
 96a:	0f b6       	in	r0, 0x3f	; 63
 96c:	0f 92       	push	r0
 96e:	11 24       	eor	r1, r1
 970:	2f 93       	push	r18
 972:	3f 93       	push	r19
 974:	8f 93       	push	r24
 976:	9f 93       	push	r25
 978:	af 93       	push	r26
 97a:	bf 93       	push	r27
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:142
    // copy these to local variables so they can be stored in registers
    // (volatile variables must be read from memory on every access)
    unsigned long m = millis_timer_millis;
 97c:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <millis_timer_millis>
 980:	90 91 a8 00 	lds	r25, 0x00A8	; 0x8000a8 <millis_timer_millis+0x1>
 984:	a0 91 a9 00 	lds	r26, 0x00A9	; 0x8000a9 <millis_timer_millis+0x2>
 988:	b0 91 aa 00 	lds	r27, 0x00AA	; 0x8000aa <millis_timer_millis+0x3>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:143
    unsigned char f = millis_timer_fract;
 98c:	30 91 a1 00 	lds	r19, 0x00A1	; 0x8000a1 <millis_timer_fract>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:145

    f += FRACT_INC;
 990:	26 e0       	ldi	r18, 0x06	; 6
 992:	23 0f       	add	r18, r19
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:147

    if (f >= FRACT_MAX)
 994:	2d 37       	cpi	r18, 0x7D	; 125
 996:	68 f1       	brcs	.+90     	; 0x9f2 <__vector_11+0x8c>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:149
    {
      f -= FRACT_MAX;
 998:	29 e8       	ldi	r18, 0x89	; 137
 99a:	23 0f       	add	r18, r19
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:151
    m += 1;
      m += MILLIS_INC;
 99c:	03 96       	adiw	r24, 0x03	; 3
 99e:	a1 1d       	adc	r26, r1
 9a0:	b1 1d       	adc	r27, r1
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:158
    else
    {
      m += MILLIS_INC;
    }

    millis_timer_fract = f;
 9a2:	20 93 a1 00 	sts	0x00A1, r18	; 0x8000a1 <millis_timer_fract>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:159
    millis_timer_millis = m;
 9a6:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <millis_timer_millis>
 9aa:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <millis_timer_millis+0x1>
 9ae:	a0 93 a9 00 	sts	0x00A9, r26	; 0x8000a9 <millis_timer_millis+0x2>
 9b2:	b0 93 aa 00 	sts	0x00AA, r27	; 0x8000aa <millis_timer_millis+0x3>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:160
    millis_timer_overflow_count++;
 9b6:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <millis_timer_overflow_count>
 9ba:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <millis_timer_overflow_count+0x1>
 9be:	a0 91 a4 00 	lds	r26, 0x00A4	; 0x8000a4 <millis_timer_overflow_count+0x2>
 9c2:	b0 91 a5 00 	lds	r27, 0x00A5	; 0x8000a5 <millis_timer_overflow_count+0x3>
 9c6:	01 96       	adiw	r24, 0x01	; 1
 9c8:	a1 1d       	adc	r26, r1
 9ca:	b1 1d       	adc	r27, r1
 9cc:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <millis_timer_overflow_count>
 9d0:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <millis_timer_overflow_count+0x1>
 9d4:	a0 93 a4 00 	sts	0x00A4, r26	; 0x8000a4 <millis_timer_overflow_count+0x2>
 9d8:	b0 93 a5 00 	sts	0x00A5, r27	; 0x8000a5 <millis_timer_overflow_count+0x3>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:162

  }
 9dc:	bf 91       	pop	r27
 9de:	af 91       	pop	r26
 9e0:	9f 91       	pop	r25
 9e2:	8f 91       	pop	r24
 9e4:	3f 91       	pop	r19
 9e6:	2f 91       	pop	r18
 9e8:	0f 90       	pop	r0
 9ea:	0f be       	out	0x3f, r0	; 63
 9ec:	0f 90       	pop	r0
 9ee:	1f 90       	pop	r1
 9f0:	18 95       	reti
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:155
    m += 1;
      m += MILLIS_INC;
    }
    else
    {
      m += MILLIS_INC;
 9f2:	02 96       	adiw	r24, 0x02	; 2
 9f4:	a1 1d       	adc	r26, r1
 9f6:	b1 1d       	adc	r27, r1
 9f8:	d4 cf       	rjmp	.-88     	; 0x9a2 <__vector_11+0x3c>

000009fa <__vector_16>:
__vector_16():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/spislave.cpp:10

ISR(PCINT1_vect)  { 
    spislave_c::getInstance()->_ss_int();
}

ISR(USI_OVF_vect) { 
 9fa:	1f 92       	push	r1
 9fc:	0f 92       	push	r0
 9fe:	0f b6       	in	r0, 0x3f	; 63
 a00:	0f 92       	push	r0
 a02:	11 24       	eor	r1, r1
 a04:	1f 93       	push	r17
 a06:	2f 93       	push	r18
 a08:	3f 93       	push	r19
 a0a:	4f 93       	push	r20
 a0c:	5f 93       	push	r21
 a0e:	6f 93       	push	r22
 a10:	7f 93       	push	r23
 a12:	8f 93       	push	r24
 a14:	9f 93       	push	r25
 a16:	af 93       	push	r26
 a18:	bf 93       	push	r27
 a1a:	cf 93       	push	r28
 a1c:	df 93       	push	r29
 a1e:	ef 93       	push	r30
 a20:	ff 93       	push	r31
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/spislave.cpp:11
    spislave_c::getInstance()->_byte_int();
 a22:	72 dc       	rcall	.-1820   	; 0x308 <spislave_c::getInstance()>
 a24:	ec 01       	movw	r28, r24
_byte_int():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/spislave.cpp:61

};

void 
spislave_c::_byte_int() {
    uint8_t newbyte = USIDR;
 a26:	1f b1       	in	r17, 0x0f	; 15
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/spislave.cpp:63

    USISR = _BV(USIOIF);
 a28:	80 e4       	ldi	r24, 0x40	; 64
 a2a:	8e b9       	out	0x0e, r24	; 14
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/spislave.cpp:64
    USIDR = 0xff & (dv_out >> 24);
 a2c:	89 85       	ldd	r24, Y+9	; 0x09
 a2e:	9a 85       	ldd	r25, Y+10	; 0x0a
 a30:	ab 85       	ldd	r26, Y+11	; 0x0b
 a32:	bc 85       	ldd	r27, Y+12	; 0x0c
 a34:	8b 2f       	mov	r24, r27
 a36:	99 27       	eor	r25, r25
 a38:	aa 27       	eor	r26, r26
 a3a:	bb 27       	eor	r27, r27
 a3c:	8f b9       	out	0x0f, r24	; 15
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/spislave.cpp:67

    // do not do anythign at all if the SS is not low
    if (digitalRead(PIN_SS) || (bctr < 0)) return; 
 a3e:	34 db       	rcall	.-2456   	; 0xa8 <digitalRead.constprop.0>
 a40:	89 2b       	or	r24, r25
 a42:	41 f5       	brne	.+80     	; 0xa94 <__vector_16+0x9a>
 a44:	2c 81       	ldd	r18, Y+4	; 0x04
 a46:	27 fd       	sbrc	r18, 7
 a48:	25 c0       	rjmp	.+74     	; 0xa94 <__vector_16+0x9a>
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/spislave.cpp:69

    if (!bctr) {
 a4a:	21 11       	cpse	r18, r1
 a4c:	37 c0       	rjmp	.+110    	; 0xabc <__vector_16+0xc2>
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/spislave.cpp:70
        cmd_in = newbyte;
 a4e:	1d 87       	std	Y+13, r17	; 0x0d
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/spislave.cpp:88
        psrl->print(cmd_out,HEX);
        psrl->print(" dv_out: ");
        psrl->println(dv_out,HEX);
    }

    dv_out <<= 8;
 a50:	89 85       	ldd	r24, Y+9	; 0x09
 a52:	9a 85       	ldd	r25, Y+10	; 0x0a
 a54:	ab 85       	ldd	r26, Y+11	; 0x0b
 a56:	bc 85       	ldd	r27, Y+12	; 0x0c
 a58:	ba 2f       	mov	r27, r26
 a5a:	a9 2f       	mov	r26, r25
 a5c:	98 2f       	mov	r25, r24
 a5e:	88 27       	eor	r24, r24
 a60:	89 87       	std	Y+9, r24	; 0x09
 a62:	9a 87       	std	Y+10, r25	; 0x0a
 a64:	ab 87       	std	Y+11, r26	; 0x0b
 a66:	bc 87       	std	Y+12, r27	; 0x0c
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/spislave.cpp:90
  
    if (bctr == 4) {
 a68:	24 30       	cpi	r18, 0x04	; 4
 a6a:	89 f4       	brne	.+34     	; 0xa8e <__vector_16+0x94>
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/spislave.cpp:91
        reg_t rv = ch(cmd_in, dv_in);
 a6c:	4d 81       	ldd	r20, Y+5	; 0x05
 a6e:	5e 81       	ldd	r21, Y+6	; 0x06
 a70:	6f 81       	ldd	r22, Y+7	; 0x07
 a72:	78 85       	ldd	r23, Y+8	; 0x08
 a74:	e8 81       	ld	r30, Y
 a76:	f9 81       	ldd	r31, Y+1	; 0x01
 a78:	8d 85       	ldd	r24, Y+13	; 0x0d
 a7a:	09 95       	icall
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/spislave.cpp:92
        dv_out = rv;
 a7c:	69 87       	std	Y+9, r22	; 0x09
 a7e:	7a 87       	std	Y+10, r23	; 0x0a
 a80:	8b 87       	std	Y+11, r24	; 0x0b
 a82:	9c 87       	std	Y+12, r25	; 0x0c
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/spislave.cpp:93
        cmd_out = cmd_in | 0x40;
 a84:	8d 85       	ldd	r24, Y+13	; 0x0d
 a86:	80 64       	ori	r24, 0x40	; 64
 a88:	8e 87       	std	Y+14, r24	; 0x0e
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/spislave.cpp:94
        bctr = -1;
 a8a:	8f ef       	ldi	r24, 0xFF	; 255
 a8c:	8c 83       	std	Y+4, r24	; 0x04
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/spislave.cpp:97
    }

    bctr += 1;
 a8e:	8c 81       	ldd	r24, Y+4	; 0x04
 a90:	8f 5f       	subi	r24, 0xFF	; 255
 a92:	8c 83       	std	Y+4, r24	; 0x04
__vector_16():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/spislave.cpp:12
    spislave_c::getInstance()->_ss_int();
}

ISR(USI_OVF_vect) { 
    spislave_c::getInstance()->_byte_int();
}
 a94:	ff 91       	pop	r31
 a96:	ef 91       	pop	r30
 a98:	df 91       	pop	r29
 a9a:	cf 91       	pop	r28
 a9c:	bf 91       	pop	r27
 a9e:	af 91       	pop	r26
 aa0:	9f 91       	pop	r25
 aa2:	8f 91       	pop	r24
 aa4:	7f 91       	pop	r23
 aa6:	6f 91       	pop	r22
 aa8:	5f 91       	pop	r21
 aaa:	4f 91       	pop	r20
 aac:	3f 91       	pop	r19
 aae:	2f 91       	pop	r18
 ab0:	1f 91       	pop	r17
 ab2:	0f 90       	pop	r0
 ab4:	0f be       	out	0x3f, r0	; 63
 ab6:	0f 90       	pop	r0
 ab8:	1f 90       	pop	r1
 aba:	18 95       	reti
_byte_int():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/spislave.cpp:72
    if (digitalRead(PIN_SS) || (bctr < 0)) return; 

    if (!bctr) {
        cmd_in = newbyte;
    } else {
        dv_in = (dv_in << 8) | newbyte;
 abc:	8d 81       	ldd	r24, Y+5	; 0x05
 abe:	9e 81       	ldd	r25, Y+6	; 0x06
 ac0:	af 81       	ldd	r26, Y+7	; 0x07
 ac2:	b8 85       	ldd	r27, Y+8	; 0x08
 ac4:	ba 2f       	mov	r27, r26
 ac6:	a9 2f       	mov	r26, r25
 ac8:	98 2f       	mov	r25, r24
 aca:	88 27       	eor	r24, r24
 acc:	81 2b       	or	r24, r17
 ace:	8d 83       	std	Y+5, r24	; 0x05
 ad0:	9e 83       	std	Y+6, r25	; 0x06
 ad2:	af 83       	std	Y+7, r26	; 0x07
 ad4:	b8 87       	std	Y+8, r27	; 0x08
 ad6:	bc cf       	rjmp	.-136    	; 0xa50 <__vector_16+0x56>

00000ad8 <__vector_3>:
__vector_3():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/spislave.cpp:6
#include <Arduino.h>
#include "spislave.h"
#include <avr/interrupt.h>
#include <avr/io.h>

ISR(PCINT1_vect)  { 
 ad8:	1f 92       	push	r1
 ada:	0f 92       	push	r0
 adc:	0f b6       	in	r0, 0x3f	; 63
 ade:	0f 92       	push	r0
 ae0:	11 24       	eor	r1, r1
 ae2:	2f 93       	push	r18
 ae4:	3f 93       	push	r19
 ae6:	4f 93       	push	r20
 ae8:	5f 93       	push	r21
 aea:	6f 93       	push	r22
 aec:	7f 93       	push	r23
 aee:	8f 93       	push	r24
 af0:	9f 93       	push	r25
 af2:	af 93       	push	r26
 af4:	bf 93       	push	r27
 af6:	cf 93       	push	r28
 af8:	df 93       	push	r29
 afa:	ef 93       	push	r30
 afc:	ff 93       	push	r31
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/spislave.cpp:7
    spislave_c::getInstance()->_ss_int();
 afe:	04 dc       	rcall	.-2040   	; 0x308 <spislave_c::getInstance()>
 b00:	ec 01       	movw	r28, r24
_ss_int():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/spislave.cpp:37
    GIMSK  = _BV(PCIE1);
}

void
spislave_c::_ss_int() {
    if (!digitalRead(PIN_SS)) {
 b02:	d2 da       	rcall	.-2652   	; 0xa8 <digitalRead.constprop.0>
 b04:	89 2b       	or	r24, r25
 b06:	e1 f4       	brne	.+56     	; 0xb40 <__vector_3+0x68>
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/spislave.cpp:38
        pinMode(PIN_MISO, OUTPUT);
 b08:	61 e0       	ldi	r22, 0x01	; 1
 b0a:	85 e0       	ldi	r24, 0x05	; 5
 b0c:	6d db       	rcall	.-2342   	; 0x1e8 <pinMode>
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/spislave.cpp:44
        if (false && psrl) {
            psrl->println("T_start");
            // psrl->print("last USIDR ");
            // psrl->println(USIDR,HEX);
        }
        bctr = 0;
 b0e:	1c 82       	std	Y+4, r1	; 0x04
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/spislave.cpp:45
        USICR |= _BV(USIOIE);
 b10:	6e 9a       	sbi	0x0d, 6	; 13
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/spislave.cpp:46
        USISR = _BV(USIOIF);
 b12:	80 e4       	ldi	r24, 0x40	; 64
 b14:	8e b9       	out	0x0e, r24	; 14
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/spislave.cpp:47
        USIDR = cmd_out;
 b16:	8e 85       	ldd	r24, Y+14	; 0x0e
 b18:	8f b9       	out	0x0f, r24	; 15
__vector_3():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/spislave.cpp:8
#include <avr/interrupt.h>
#include <avr/io.h>

ISR(PCINT1_vect)  { 
    spislave_c::getInstance()->_ss_int();
}
 b1a:	ff 91       	pop	r31
 b1c:	ef 91       	pop	r30
 b1e:	df 91       	pop	r29
 b20:	cf 91       	pop	r28
 b22:	bf 91       	pop	r27
 b24:	af 91       	pop	r26
 b26:	9f 91       	pop	r25
 b28:	8f 91       	pop	r24
 b2a:	7f 91       	pop	r23
 b2c:	6f 91       	pop	r22
 b2e:	5f 91       	pop	r21
 b30:	4f 91       	pop	r20
 b32:	3f 91       	pop	r19
 b34:	2f 91       	pop	r18
 b36:	0f 90       	pop	r0
 b38:	0f be       	out	0x3f, r0	; 63
 b3a:	0f 90       	pop	r0
 b3c:	1f 90       	pop	r1
 b3e:	18 95       	reti
_ss_int():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/spislave.cpp:49
        bctr = 0;
        USICR |= _BV(USIOIE);
        USISR = _BV(USIOIF);
        USIDR = cmd_out;
    } else {
        USICR &= ~_BV(USIOIE);
 b40:	6e 98       	cbi	0x0d, 6	; 13
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/spislave.cpp:50
        USISR = 0;
 b42:	1e b8       	out	0x0e, r1	; 14
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/spislave.cpp:51
        bctr = -1;
 b44:	8f ef       	ldi	r24, 0xFF	; 255
 b46:	8c 83       	std	Y+4, r24	; 0x04
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/spislave.cpp:52
        pinMode(PIN_MISO, INPUT);
 b48:	60 e0       	ldi	r22, 0x00	; 0
 b4a:	85 e0       	ldi	r24, 0x05	; 5
 b4c:	4d db       	rcall	.-2406   	; 0x1e8 <pinMode>
 b4e:	e5 cf       	rjmp	.-54     	; 0xb1a <__vector_3+0x42>

00000b50 <__vector_default>:
__vector_default():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:276
        delay(MILLIS_PER_TICK / 10);
    }
}


ISR(BADISR_vect)  { }
 b50:	1f 92       	push	r1
 b52:	0f 92       	push	r0
 b54:	0f b6       	in	r0, 0x3f	; 63
 b56:	0f 92       	push	r0
 b58:	11 24       	eor	r1, r1
 b5a:	0f 90       	pop	r0
 b5c:	0f be       	out	0x3f, r0	; 63
 b5e:	0f 90       	pop	r0
 b60:	1f 90       	pop	r1
 b62:	18 95       	reti

00000b64 <__vector_4>:
__vector_4():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:26
const uint8_t PIN_LED_0    = 1;
const uint8_t PIN_LED_1    = 2;
const uint8_t PIN_PWR      = 3;

uint32_t vhits;
ISR(WDT_vect) { 
 b64:	1f 92       	push	r1
 b66:	0f 92       	push	r0
 b68:	0f b6       	in	r0, 0x3f	; 63
 b6a:	0f 92       	push	r0
 b6c:	11 24       	eor	r1, r1
 b6e:	8f 93       	push	r24
 b70:	9f 93       	push	r25
 b72:	af 93       	push	r26
 b74:	bf 93       	push	r27
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:27
    vhits++;
 b76:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <vhits>
 b7a:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <vhits+0x1>
 b7e:	a0 91 87 00 	lds	r26, 0x0087	; 0x800087 <vhits+0x2>
 b82:	b0 91 88 00 	lds	r27, 0x0088	; 0x800088 <vhits+0x3>
 b86:	01 96       	adiw	r24, 0x01	; 1
 b88:	a1 1d       	adc	r26, r1
 b8a:	b1 1d       	adc	r27, r1
 b8c:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <vhits>
 b90:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <vhits+0x1>
 b94:	a0 93 87 00 	sts	0x0087, r26	; 0x800087 <vhits+0x2>
 b98:	b0 93 88 00 	sts	0x0088, r27	; 0x800088 <vhits+0x3>
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:28
}
 b9c:	bf 91       	pop	r27
 b9e:	af 91       	pop	r26
 ba0:	9f 91       	pop	r25
 ba2:	8f 91       	pop	r24
 ba4:	0f 90       	pop	r0
 ba6:	0f be       	out	0x3f, r0	; 63
 ba8:	0f 90       	pop	r0
 baa:	1f 90       	pop	r1
 bac:	18 95       	reti

00000bae <main>:
main():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:904
  */

  // Use the Millis Timer for fast PWM (unless it doesn't have an output).
  #if (TIMER_TO_USE_FOR_MILLIS == 0)
    #if defined(WGM01) // if Timer0 has PWM
      TCCR0A = (1<<WGM01) | (1<<WGM00);
 bae:	83 e0       	ldi	r24, 0x03	; 3
 bb0:	80 bf       	out	0x30, r24	; 48
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:907
    #endif
    #if defined(TCCR0B) //The x61 has a wacky Timer0!
      TCCR0B = (MillisTimer_Prescale_Index << CS00);
 bb2:	83 bf       	out	0x33, r24	; 51
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:928
    TCCR1A = 1<<WGM10;
    TCCR1B = (1<<WGM12) | (MillisTimer_Prescale_Index << CS10);
  #endif

  // this needs to be called before setup() or some functions won't work there
  sei();
 bb4:	78 94       	sei
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:935
  #ifndef DISABLEMILLIS
    // Enable the overflow interrupt (this is the basic system tic-toc for millis)
    #if defined(TIMSK) && defined(TOIE0) && (TIMER_TO_USE_FOR_MILLIS == 0)
      sbi(TIMSK, TOIE0);
    #elif defined(TIMSK0) && defined(TOIE0) && (TIMER_TO_USE_FOR_MILLIS == 0)
      sbi(TIMSK0, TOIE0);
 bb6:	99 b7       	in	r25, 0x39	; 57
 bb8:	91 60       	ori	r25, 0x01	; 1
 bba:	99 bf       	out	0x39, r25	; 57
initToneTimerInternal():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:608
    #elif (TIMER_TO_USE_FOR_TONE == 1 ) && defined(__AVR_ATtinyX7__)
      TCCR1A = (1<<COM1A1)|(1<<COM1B1)|(1<<WGM10);
      TCCR1B = (ToneTimer_Prescale_Index << CS10)|(1<<WGM12);
    #elif (TIMER_TO_USE_FOR_TONE == 1) // x4, x8, x313,
      // Use the Tone Timer for phase correct PWM
      TCCR1A = (1<<WGM10) | (1<<WGM11);
 bbc:	8f bd       	out	0x2f, r24	; 47
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:609
      TCCR1B = (0<<WGM12) | (0<<WGM13) | (ToneTimer_Prescale_Index << CS10); //set the clock
 bbe:	8e bd       	out	0x2e, r24	; 46
main():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:972

  // Initialize the ADC
  #if defined( INITIALIZE_ANALOG_TO_DIGITAL_CONVERTER ) && INITIALIZE_ANALOG_TO_DIGITAL_CONVERTER
    #if defined(ADCSRA)
      // set a2d prescale factor
      ADCSRA = (ADCSRA & ~((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0))) | (ADC_ARDUINO_PRESCALER << ADPS0) | (1<<ADEN);
 bc0:	86 b1       	in	r24, 0x06	; 6
 bc2:	88 77       	andi	r24, 0x78	; 120
 bc4:	86 68       	ori	r24, 0x86	; 134
 bc6:	86 b9       	out	0x06, r24	; 6
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:974
      // enable a2d conversions
      sbi(ADCSRA, ADEN);
 bc8:	37 9a       	sbi	0x06, 7	; 6
setup():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:186


void setup() {

    // disable the watchdog
    MCUSR = 0;
 bca:	14 be       	out	0x34, r1	; 52
wdt_enable():
c:\users\ericw\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\avr/wdt.h:469
				: "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
 bcc:	88 e1       	ldi	r24, 0x18	; 24
 bce:	9f e0       	ldi	r25, 0x0F	; 15
 bd0:	0f b6       	in	r0, 0x3f	; 63
 bd2:	f8 94       	cli
 bd4:	a8 95       	wdr
 bd6:	81 bd       	out	0x21, r24	; 33
 bd8:	0f be       	out	0x3f, r0	; 63
 bda:	91 bd       	out	0x21, r25	; 33
setup():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:188
    wdt_enable(WDTO_2S);
    wdt_reset();
 bdc:	a8 95       	wdr
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:191
    // WDTCSR = _BV(WDCE) | _BV(WDIE);

    pinMode(PIN_PWR,      OUTPUT);
 bde:	61 e0       	ldi	r22, 0x01	; 1
 be0:	83 e0       	ldi	r24, 0x03	; 3
 be2:	02 db       	rcall	.-2556   	; 0x1e8 <pinMode>
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:192
    pinMode(PIN_LED_0,    OUTPUT);
 be4:	61 e0       	ldi	r22, 0x01	; 1
 be6:	81 e0       	ldi	r24, 0x01	; 1
 be8:	ff da       	rcall	.-2562   	; 0x1e8 <pinMode>
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:194
#ifndef SERIAL_DEBUG
    pinMode(PIN_LED_1,    OUTPUT);
 bea:	61 e0       	ldi	r22, 0x01	; 1
 bec:	82 e0       	ldi	r24, 0x02	; 2
 bee:	fc da       	rcall	.-2568   	; 0x1e8 <pinMode>
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:203
        for (uint8_t i=0;i<11;i++) {
            digitalWrite(PIN_LED_1,i&0x1);
            delay(i & 0x1 ? 10 : 20);
        }
    }
    noInterrupts();
 bf0:	f8 94       	cli
 bf2:	ef ea       	ldi	r30, 0xAF	; 175
 bf4:	f0 e0       	ldi	r31, 0x00	; 0
clear():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:40
        }
        void set_debug(Stream *nser) {
          ser = nser;
        }
        void clear() {
          for (uint8_t i=0;i<REG_COUNT;i++) registers[i] = 0;
 bf6:	11 92       	st	Z+, r1
 bf8:	11 92       	st	Z+, r1
 bfa:	11 92       	st	Z+, r1
 bfc:	11 92       	st	Z+, r1
 bfe:	80 e0       	ldi	r24, 0x00	; 0
 c00:	ef 3d       	cpi	r30, 0xDF	; 223
 c02:	f8 07       	cpc	r31, r24
 c04:	c1 f7       	brne	.-16     	; 0xbf6 <main+0x48>
_ZN9regfile_cImLj12EE3setEhm():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:99
        REGW setAnd(uint8_t addr, REGW val) {
            registers[addr % REG_COUNT] &= val;
            return get(addr);
        }
        REGW set(uint8_t addr, REGW val) {
            registers[addr % REG_COUNT] = val;
 c06:	86 e0       	ldi	r24, 0x06	; 6
 c08:	92 e0       	ldi	r25, 0x02	; 2
 c0a:	a4 e6       	ldi	r26, 0x64	; 100
 c0c:	b0 e7       	ldi	r27, 0x70	; 112
 c0e:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <rf+0x2c>
 c12:	90 93 dc 00 	sts	0x00DC, r25	; 0x8000dc <rf+0x2d>
 c16:	a0 93 dd 00 	sts	0x00DD, r26	; 0x8000dd <rf+0x2e>
 c1a:	b0 93 de 00 	sts	0x00DE, r27	; 0x8000de <rf+0x2f>
 c1e:	84 e8       	ldi	r24, 0x84	; 132
 c20:	93 e0       	ldi	r25, 0x03	; 3
 c22:	a0 e0       	ldi	r26, 0x00	; 0
 c24:	b0 e0       	ldi	r27, 0x00	; 0
 c26:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <rf+0x4>
 c2a:	90 93 b4 00 	sts	0x00B4, r25	; 0x8000b4 <rf+0x5>
 c2e:	a0 93 b5 00 	sts	0x00B5, r26	; 0x8000b5 <rf+0x6>
 c32:	b0 93 b6 00 	sts	0x00B6, r27	; 0x8000b6 <rf+0x7>
 c36:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <rf+0x8>
 c3a:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <rf+0x9>
 c3e:	a0 93 b9 00 	sts	0x00B9, r26	; 0x8000b9 <rf+0xa>
 c42:	b0 93 ba 00 	sts	0x00BA, r27	; 0x8000ba <rf+0xb>
 c46:	80 93 bf 00 	sts	0x00BF, r24	; 0x8000bf <rf+0x10>
 c4a:	90 93 c0 00 	sts	0x00C0, r25	; 0x8000c0 <rf+0x11>
 c4e:	a0 93 c1 00 	sts	0x00C1, r26	; 0x8000c1 <rf+0x12>
 c52:	b0 93 c2 00 	sts	0x00C2, r27	; 0x8000c2 <rf+0x13>
 c56:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <rf+0xc>
 c5a:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <rf+0xd>
 c5e:	a0 93 bd 00 	sts	0x00BD, r26	; 0x8000bd <rf+0xe>
 c62:	b0 93 be 00 	sts	0x00BE, r27	; 0x8000be <rf+0xf>
 c66:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <rf+0x20>
 c6a:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <rf+0x21>
 c6e:	10 92 d1 00 	sts	0x00D1, r1	; 0x8000d1 <rf+0x22>
 c72:	10 92 d2 00 	sts	0x00D2, r1	; 0x8000d2 <rf+0x23>
 c76:	89 e2       	ldi	r24, 0x29	; 41
 c78:	90 e0       	ldi	r25, 0x00	; 0
 c7a:	a0 e0       	ldi	r26, 0x00	; 0
 c7c:	b0 e0       	ldi	r27, 0x00	; 0
 c7e:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <rf>
 c82:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <rf+0x1>
 c86:	a0 93 b1 00 	sts	0x00B1, r26	; 0x8000b1 <rf+0x2>
 c8a:	b0 93 b2 00 	sts	0x00B2, r27	; 0x8000b2 <rf+0x3>
 c8e:	10 92 d3 00 	sts	0x00D3, r1	; 0x8000d3 <rf+0x24>
 c92:	10 92 d4 00 	sts	0x00D4, r1	; 0x8000d4 <rf+0x25>
 c96:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <rf+0x26>
 c9a:	10 92 d6 00 	sts	0x00D6, r1	; 0x8000d6 <rf+0x27>
 c9e:	10 92 d7 00 	sts	0x00D7, r1	; 0x8000d7 <rf+0x28>
 ca2:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <rf+0x29>
 ca6:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <rf+0x2a>
 caa:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <rf+0x2b>
setup():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:227
        _BV(STAT_PWR_ON)
    );
    rf.set(REG_VSENSE_ON_THRESHOLD,VSENSE_ON_THRESHOLD);
    rf.set(REG_VSENSE_OFF_THRESHOLD,VSENSE_OFF_THRESHOLD);

    spislave_c *spi = spislave_c::getInstance();
 cae:	2c db       	rcall	.-2472   	; 0x308 <spislave_c::getInstance()>
_ZN10spislave_c13setCmdHandlerEPFmhmE():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/spislave.h:31
        void setCmdHandler(cmdhandler_t ich) { ch = ich; }
 cb0:	2d e6       	ldi	r18, 0x6D	; 109
 cb2:	30 e0       	ldi	r19, 0x00	; 0
 cb4:	fc 01       	movw	r30, r24
 cb6:	31 83       	std	Z+1, r19	; 0x01
 cb8:	20 83       	st	Z, r18
init():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/spislave.cpp:22
 * USISR == status register
 */

void
spislave_c::init() {
    pinMode(PIN_MISO, INPUT); // do not switch to output unless /CS
 cba:	60 e0       	ldi	r22, 0x00	; 0
 cbc:	85 e0       	ldi	r24, 0x05	; 5
 cbe:	94 da       	rcall	.-2776   	; 0x1e8 <pinMode>
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/spislave.cpp:23
    pinMode(PIN_MOSI, INPUT);
 cc0:	60 e0       	ldi	r22, 0x00	; 0
 cc2:	84 e0       	ldi	r24, 0x04	; 4
 cc4:	91 da       	rcall	.-2782   	; 0x1e8 <pinMode>
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/spislave.cpp:24
    pinMode(PIN_SCK,  INPUT);
 cc6:	60 e0       	ldi	r22, 0x00	; 0
 cc8:	86 e0       	ldi	r24, 0x06	; 6
 cca:	8e da       	rcall	.-2788   	; 0x1e8 <pinMode>
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/spislave.cpp:25
    pinMode(PIN_SS ,  INPUT);
 ccc:	60 e0       	ldi	r22, 0x00	; 0
 cce:	80 e0       	ldi	r24, 0x00	; 0
 cd0:	8b da       	rcall	.-2794   	; 0x1e8 <pinMode>
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/spislave.cpp:28

    // three wire mode
    USICR = _BV(USIWM0) | _BV(USICS1);
 cd2:	88 e1       	ldi	r24, 0x18	; 24
 cd4:	8d b9       	out	0x0d, r24	; 13
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/spislave.cpp:31

    // enable interrupts on SS only
    PCMSK1 = _BV(PCINT8);
 cd6:	81 e0       	ldi	r24, 0x01	; 1
 cd8:	80 bd       	out	0x20, r24	; 32
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/spislave.cpp:32
    GIMSK  = _BV(PCIE1);
 cda:	80 e2       	ldi	r24, 0x20	; 32
 cdc:	8b bf       	out	0x3b, r24	; 59
setup():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:234
    spi->init();
#ifdef SERIAL_DEBUG
    spi->setDebug(&srl);
#endif

    interrupts();
 cde:	78 94       	sei
millis():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:167
  }

  unsigned long millis()
  {
    unsigned long m;
    uint8_t oldSREG = SREG;
 ce0:	2f b7       	in	r18, 0x3f	; 63
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:171

    // disable interrupts while we read millis_timer_millis or we might get an
    // inconsistent value (e.g. in the middle of a write to millis_timer_millis)
    cli();
 ce2:	f8 94       	cli
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:172
    m = millis_timer_millis;
 ce4:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <millis_timer_millis>
 ce8:	90 91 a8 00 	lds	r25, 0x00A8	; 0x8000a8 <millis_timer_millis+0x1>
 cec:	a0 91 a9 00 	lds	r26, 0x00A9	; 0x8000a9 <millis_timer_millis+0x2>
 cf0:	b0 91 aa 00 	lds	r27, 0x00AA	; 0x8000aa <millis_timer_millis+0x3>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:173
    SREG = oldSREG;
 cf4:	2f bf       	out	0x3f, r18	; 63
setup():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:238
#ifdef SERIAL_DEBUG
    srl.println("setup complete");
#endif
    next_tick = millis();
 cf6:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <next_tick>
 cfa:	90 93 ac 00 	sts	0x00AC, r25	; 0x8000ac <next_tick+0x1>
 cfe:	a0 93 ad 00 	sts	0x00AD, r26	; 0x8000ad <next_tick+0x2>
 d02:	b0 93 ae 00 	sts	0x00AE, r27	; 0x8000ae <next_tick+0x3>
wdt_enable():
c:\users\ericw\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\avr/wdt.h:469
 d06:	c8 e1       	ldi	r28, 0x18	; 24
 d08:	dc e0       	ldi	r29, 0x0C	; 12
loop():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:260
    ADCSRA = adcsra_was;
}


void loop() {
    bool use_sleep = !(rf.get(REG_STATUS) & _BV(STAT_PWR_ON));
 d0a:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <rf>
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:261
    if (use_sleep) {
 d0e:	85 fd       	sbrc	r24, 5
 d10:	1a c0       	rjmp	.+52     	; 0xd46 <main+0x198>
sleep250():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:244
}



void sleep250() {
    uint8_t adcsra_was = ADCSRA;
 d12:	96 b1       	in	r25, 0x06	; 6
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:245
    ADCSRA = 0;
 d14:	16 b8       	out	0x06, r1	; 6
wdt_enable():
c:\users\ericw\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\avr/wdt.h:469
 d16:	0f b6       	in	r0, 0x3f	; 63
 d18:	f8 94       	cli
 d1a:	a8 95       	wdr
 d1c:	c1 bd       	out	0x21, r28	; 33
 d1e:	0f be       	out	0x3f, r0	; 63
 d20:	d1 bd       	out	0x21, r29	; 33
sleep250():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:248

    wdt_enable(WDTO_250MS);
    wdt_reset();
 d22:	a8 95       	wdr
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:249
    WDTCSR |= _BV(WDIE);
 d24:	81 b5       	in	r24, 0x21	; 33
 d26:	80 64       	ori	r24, 0x40	; 64
 d28:	81 bd       	out	0x21, r24	; 33
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:250
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 d2a:	85 b7       	in	r24, 0x35	; 53
 d2c:	87 7e       	andi	r24, 0xE7	; 231
 d2e:	80 61       	ori	r24, 0x10	; 16
 d30:	85 bf       	out	0x35, r24	; 53
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:252

    sleep_mode();
 d32:	85 b7       	in	r24, 0x35	; 53
 d34:	80 62       	ori	r24, 0x20	; 32
 d36:	85 bf       	out	0x35, r24	; 53
 d38:	88 95       	sleep
 d3a:	85 b7       	in	r24, 0x35	; 53
 d3c:	8f 7d       	andi	r24, 0xDF	; 223
 d3e:	85 bf       	out	0x35, r24	; 53
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:255
    
    // and now we are awake again
    ADCSRA = adcsra_was;
 d40:	96 b9       	out	0x06, r25	; 6
loop():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:263

void loop() {
    bool use_sleep = !(rf.get(REG_STATUS) & _BV(STAT_PWR_ON));
    if (use_sleep) {
        sleep250();
        doTickWork();      
 d42:	16 db       	rcall	.-2516   	; 0x370 <doTickWork()>
 d44:	e2 cf       	rjmp	.-60     	; 0xd0a <main+0x15c>
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:265
    } else {
        wdt_reset();
 d46:	a8 95       	wdr
millis():
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:167
  }

  unsigned long millis()
  {
    unsigned long m;
    uint8_t oldSREG = SREG;
 d48:	2f b7       	in	r18, 0x3f	; 63
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:171

    // disable interrupts while we read millis_timer_millis or we might get an
    // inconsistent value (e.g. in the middle of a write to millis_timer_millis)
    cli();
 d4a:	f8 94       	cli
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:172
    m = millis_timer_millis;
 d4c:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <millis_timer_millis>
 d50:	90 91 a8 00 	lds	r25, 0x00A8	; 0x8000a8 <millis_timer_millis+0x1>
 d54:	a0 91 a9 00 	lds	r26, 0x00A9	; 0x8000a9 <millis_timer_millis+0x2>
 d58:	b0 91 aa 00 	lds	r27, 0x00AA	; 0x8000aa <millis_timer_millis+0x3>
C:\Users\ericw\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.1\cores\tiny/wiring.c:173
    SREG = oldSREG;
 d5c:	2f bf       	out	0x3f, r18	; 63
loop():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:267
        bool new_tick = (millis() >= next_tick);
        if (new_tick) {
 d5e:	40 91 ab 00 	lds	r20, 0x00AB	; 0x8000ab <next_tick>
 d62:	50 91 ac 00 	lds	r21, 0x00AC	; 0x8000ac <next_tick+0x1>
 d66:	60 91 ad 00 	lds	r22, 0x00AD	; 0x8000ad <next_tick+0x2>
 d6a:	70 91 ae 00 	lds	r23, 0x00AE	; 0x8000ae <next_tick+0x3>
 d6e:	84 17       	cp	r24, r20
 d70:	95 07       	cpc	r25, r21
 d72:	a6 07       	cpc	r26, r22
 d74:	b7 07       	cpc	r27, r23
 d76:	a8 f0       	brcs	.+42     	; 0xda2 <main+0x1f4>
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:268
            doTickWork();
 d78:	fb da       	rcall	.-2570   	; 0x370 <doTickWork()>
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:269
            next_tick += MILLIS_PER_TICK;
 d7a:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <next_tick>
 d7e:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <next_tick+0x1>
 d82:	a0 91 ad 00 	lds	r26, 0x00AD	; 0x8000ad <next_tick+0x2>
 d86:	b0 91 ae 00 	lds	r27, 0x00AE	; 0x8000ae <next_tick+0x3>
 d8a:	86 50       	subi	r24, 0x06	; 6
 d8c:	9f 4f       	sbci	r25, 0xFF	; 255
 d8e:	af 4f       	sbci	r26, 0xFF	; 255
 d90:	bf 4f       	sbci	r27, 0xFF	; 255
 d92:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <next_tick>
 d96:	90 93 ac 00 	sts	0x00AC, r25	; 0x8000ac <next_tick+0x1>
 d9a:	a0 93 ad 00 	sts	0x00AD, r26	; 0x8000ad <next_tick+0x2>
 d9e:	b0 93 ae 00 	sts	0x00AE, r27	; 0x8000ae <next_tick+0x3>
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:271
        }
        delay(MILLIS_PER_TICK / 10);
 da2:	69 e1       	ldi	r22, 0x19	; 25
 da4:	70 e0       	ldi	r23, 0x00	; 0
 da6:	80 e0       	ldi	r24, 0x00	; 0
 da8:	90 e0       	ldi	r25, 0x00	; 0
 daa:	84 da       	rcall	.-2808   	; 0x2b4 <delay>
 dac:	ae cf       	rjmp	.-164    	; 0xd0a <main+0x15c>

00000dae <_GLOBAL__sub_I_vhits>:
_ZN9regfile_cImLj12EEC2Ev():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/regfile.h:34
            }
        }

    public:
        regfile_c() {
          ser = 0;
 dae:	af ea       	ldi	r26, 0xAF	; 175
 db0:	b0 e0       	ldi	r27, 0x00	; 0
 db2:	d1 96       	adiw	r26, 0x31	; 49
 db4:	1c 92       	st	X, r1
 db6:	1e 92       	st	-X, r1
 db8:	d0 97       	sbiw	r26, 0x30	; 48
_ZN11adcReader_cI9regfile_cImLj12EELh1ELh16EEC2ERS1_():
C:\Users\ericw\AppData\Local\Temp\arduino_build_531670\sketch/adcReader.h:20
        ema_c <uint16_t, uint32_t, EMA_ALPHA, EMA_DENOM> avg_vcc_sw;
        ema_c <uint16_t, uint32_t, EMA_ALPHA, EMA_DENOM> avg_vcc33;
        ema_c <uint16_t, uint32_t, EMA_ALPHA, EMA_DENOM> avg_vbat;
        ema_c <uint16_t, uint32_t, EMA_ALPHA, EMA_DENOM> avg_temp;
    public:
        adcReader_c(RF_TYPE &irf) : next(0), rf(irf) { };
 dba:	ea e8       	ldi	r30, 0x8A	; 138
 dbc:	f0 e0       	ldi	r31, 0x00	; 0
 dbe:	10 82       	st	Z, r1
 dc0:	b2 83       	std	Z+2, r27	; 0x02
 dc2:	a1 83       	std	Z+1, r26	; 0x01
_GLOBAL__sub_I_vhits():
C:\Users\ericw\Documents\GitHub\pidog2\attiny84_sketch\pidog2/pidog2.ino:276
    }
}


ISR(BADISR_vect)  { }
 dc4:	08 95       	ret

00000dc6 <__udivmodqi4>:
__udivmodqi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1346
 dc6:	99 1b       	sub	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1347
 dc8:	79 e0       	ldi	r23, 0x09	; 9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1348
 dca:	04 c0       	rjmp	.+8      	; 0xdd4 <__udivmodqi4_ep>

00000dcc <__udivmodqi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1350
 dcc:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1351
 dce:	96 17       	cp	r25, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1352
 dd0:	08 f0       	brcs	.+2      	; 0xdd4 <__udivmodqi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1353
 dd2:	96 1b       	sub	r25, r22

00000dd4 <__udivmodqi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1355
 dd4:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1356
 dd6:	7a 95       	dec	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1357
 dd8:	c9 f7       	brne	.-14     	; 0xdcc <__udivmodqi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1358
 dda:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1360
 ddc:	08 95       	ret

00000dde <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
 dde:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
 de0:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
 de2:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
 de4:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
 de6:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
 de8:	0d c0       	rjmp	.+26     	; 0xe04 <__udivmodsi4_ep>

00000dea <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
 dea:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
 dec:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
 dee:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
 df0:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
 df2:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
 df4:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
 df6:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
 df8:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
 dfa:	20 f0       	brcs	.+8      	; 0xe04 <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
 dfc:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
 dfe:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
 e00:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
 e02:	f5 0b       	sbc	r31, r21

00000e04 <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
 e04:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
 e06:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
 e08:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
 e0a:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
 e0c:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
 e0e:	69 f7       	brne	.-38     	; 0xdea <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
 e10:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
 e12:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
 e14:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
 e16:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
 e18:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
 e1a:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
 e1c:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
 e1e:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
 e20:	08 95       	ret

00000e22 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
 e22:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
 e24:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
 e26:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
 e28:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
 e2a:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
 e2c:	09 94       	ijmp

00000e2e <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
 e2e:	f8 94       	cli

00000e30 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
 e30:	ff cf       	rjmp	.-2      	; 0xe30 <__stop_program>
